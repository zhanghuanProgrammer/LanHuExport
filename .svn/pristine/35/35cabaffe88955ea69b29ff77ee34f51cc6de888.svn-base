
//------------------- 常量配置 模块 -------------------

const Develop_Lan_ios = 1;//语言-iOS
const Develop_Lan_android = 2;//语言-安卓
const Develop_Lan_flutter = 3;////语言-Flutter
const Develop_Lan_swift = 4;////语言-Swift

var cur_lan = Develop_Lan_ios;

const DevelopDone_Lan_ios = true;//语言-iOS 是否适配完
const DevelopDone_Lan_android = true;//语言-安卓 是否适配完
const DevelopDone_Lan_flutter = false;////语言-Flutter 是否适配完
const DevelopDone_Lan_swift = true;////语言-Swift 是否适配完

const Save_Data_Type_Define_Name_ = "define_name";//自定义控件名
const Save_Data_Type_Switch_View_Type_ = "switch_view_type";//切换控件类型
const Save_Data_Type_Union_View_Type_ = "union_view_type";//合成控件类型
function Save_Data_Type_Define_Name() {return Save_Data_Type_Define_Name_;}
function Save_Data_Type_Switch_View_Type() {return Save_Data_Type_Switch_View_Type_ + cur_lan;}//控件类型跟语言有关,所以要加个语言类型
function Save_Data_Type_Union_View_Type() {return Save_Data_Type_Union_View_Type_ + cur_lan;}//控件类型跟语言有关,所以要加个语言类型

//------------------- 常量配置 模块 -------------------

//------------------- 全局变量 模块 -------------------

function isIOS() {
    return cur_lan == Develop_Lan_ios;
}

function isANDROID() {
    return cur_lan == Develop_Lan_android;
}

function isFLUTTER() {
    return cur_lan == Develop_Lan_flutter;
}

function isSWIFT() {
    return cur_lan == Develop_Lan_swift;
}

//------------------- 全局变量 模块 -------------------

var hexcase = 0;
var chrsz   = 8;

function hex_md5(s){ return binl2hex(core_md5(str2binl(s), s.length * chrsz));}
function core_md5(x, len)
{
    x[len >> 5] |= 0x80 << ((len) % 32);
    x[(((len + 64) >>> 9) << 4) + 14] = len;

    var a =  1732584193;
    var b = -271733879;
    var c = -1732584194;
    var d =  271733878;

    for(var i = 0; i < x.length; i += 16)
    {
        var olda = a;
        var oldb = b;
        var oldc = c;
        var oldd = d;

        a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
        d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
        c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
        b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
        a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
        d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
        c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
        b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
        a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
        d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
        c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
        b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
        a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
        d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
        c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
        b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

        a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
        d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
        c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
        b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
        a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
        d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
        c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
        b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
        a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
        d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
        c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
        b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
        a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
        d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
        c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
        b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

        a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
        d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
        c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
        b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
        a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
        d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
        c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
        b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
        a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
        d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
        c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
        b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
        a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
        d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
        c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
        b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

        a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
        d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
        c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
        b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
        a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
        d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
        c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
        b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
        a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
        d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
        c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
        b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
        a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
        d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
        c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
        b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

        a = safe_add(a, olda);
        b = safe_add(b, oldb);
        c = safe_add(c, oldc);
        d = safe_add(d, oldd);
    }
    return Array(a, b, c, d);
}
function md5_cmn(q, a, b, x, s, t) {return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);}
function md5_ff(a, b, c, d, x, s, t) {return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);}
function md5_gg(a, b, c, d, x, s, t) {return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);}
function md5_hh(a, b, c, d, x, s, t) {return md5_cmn(b ^ c ^ d, a, b, x, s, t);}
function md5_ii(a, b, c, d, x, s, t) {return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);}
function safe_add(x, y) {
    var lsw = (x & 0xFFFF) + (y & 0xFFFF);
    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return (msw << 16) | (lsw & 0xFFFF);
}
function bit_rol(num, cnt) {return (num << cnt) | (num >>> (32 - cnt));}
function str2binl(str) {
    var bin = Array();
    var mask = (1 << chrsz) - 1;
    for(var i = 0; i < str.length * chrsz; i += chrsz)
        bin[i>>5] |= (str.charCodeAt(i / chrsz) & mask) << (i%32);
    return bin;
}
function binl2hex(binarray) {
    var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
    var str = "";
    for(var i = 0; i < binarray.length * 4; i++) {
        str += hex_tab.charAt((binarray[i>>2] >> ((i%4)*8+4)) & 0xF) +
            hex_tab.charAt((binarray[i>>2] >> ((i%4)*8  )) & 0xF);
    }
    return str;
}


//------------------- localStorage数据存储 模块 -------------------

/*
 * 因为localStorage有点特殊,1:是所有网页全局共享的 2:不会自动删除 3:只能读到length
 * 所以要特殊处理,1.任何操作都是基于当前页面的 2.支持手动清除当前页面的存储 3.能遍历当前页面的数据
 */


/**
 * 是否支持存储功能
 */
function db_isSupportStorage() {
    return typeof(Storage) != "undefined";
}

function localStorage_setItem(key,value){
    localStorage.setItem(curPageKeyMd5() + key,value);
}

function localStorage_getItem(key){
    return localStorage.getItem(curPageKeyMd5() + key);
}

function localStorage_removeItem(key){
    localStorage.removeItem(curPageKeyMd5() + key);
}

function curPageKeyMd5(){
    return hex_md5(window.location.href);
}



/**
 * 获取当前页面存储数据
 */
function db_curPageData() {
    var pageKeysStr = localStorage.getItem(curPageKeyMd5());
    var pageKeysArr = new Array();
    if (pageKeysStr && pageKeysStr.length > 0){
        pageKeysArr = JSON.parse(pageKeysStr);
    }
    return pageKeysArr;
}

/**
 * 清除所有存储数据-不建议用
 */
function db_clearAll() {
    if (!db_isSupportStorage())return;
    localStorage.clear();
}

/**
 * 清除当前页面存储数据
 */
function db_clearCurPage() {
    if (!db_isSupportStorage())return;
    //找到当前页面的数据
    var arr = db_curPageData();
    for (let i = 0; i < arr.length; i++) {
        var str = arr[i];
        localStorage_removeItem(str);
    }
}

/**
 * 保存key到page记录数组里面去
 */
function db_savePageKeys(key) {
    var pageKeysArr = db_curPageData();
    var index = pageKeysArr.indexOf(key);
    if (index <= -1) {
        pageKeysArr.push(key);
        localStorage.setItem(curPageKeyMd5(),JSON.stringify(pageKeysArr));
    }
}

/**
 * 删除key从page记录数组里面
 */
function db_removePageKeys(key) {
    var pageKeysArr = db_curPageData();
    if (pageKeysArr.length > 0){
        var index = pageKeysArr.indexOf(key);
        if (index > -1) {
            pageKeysArr.splice(index, 1);
            localStorage.setItem(curPageKeyMd5(),JSON.stringify(pageKeysArr));
        }
    }
}




//对外使用的几个增删查改接口


/**
 * 保存数据到本地
 */
function db_saveData(key,value,type) {
    if (!db_isSupportStorage())return;
    if (key && key.length > 0){
        if (value && value.length > 0){
            //1.要存page-key 的Array
            db_savePageKeys(key+type);
            //2.存数据
            localStorage_setItem(key+type, value);
        }else {
            db_removeData(key,type);
        }
    }
}

/**
 * 读取数据
 */
function db_getData(key,type) {
    if (!db_isSupportStorage())return "";
    if (key && key.length > 0){
        return localStorage_getItem(key+type);
    }
    return "";
}

/**
 * 读取某一类型数据 - 一般是后面是某个后缀
 */
function db_getAllDataForType(type) {
    var map = {};
    if (!db_isSupportStorage())return map;
    //找到当前页面的数据
    var arr = db_curPageData();
    for (let i = 0; i < arr.length; i++) {
        var key = arr[i];
        if (type && type.length > 0 && !key.endsWith(type)){
            continue;
        }
        var value = db_getData(key,"");//这里不用穿Type,因为拿出来的key已经包含type了
        var pureKey = key;
        if (type && type.length > 0 && key.endsWith(type)){
            pureKey = pureKey.replaceAll(type,"");
        }
        map[pureKey] = value;
    }
    return map;
}

/**
 * 读取所有数据
 */
function db_getAllData() {
    return db_getAllDataForType("");
}

/**
 * 删除某个数据
 */
function db_removeData(key,type) {
    if (!db_isSupportStorage())return;
    if (key && key.length > 0){
        db_removePageKeys(key+type);
        localStorage_removeItem(key+type);
    }
}

/**
 * 打印当前页面的所有数据
 */
function db_printAll() {
    if (!db_isSupportStorage())return;
    var pageKeysStr = localStorage.getItem(curPageKeyMd5());
    console.log("pageKeysStr:",pageKeysStr);
    console.log("map:",JSON.stringify(db_getAllData()));
}


//------------------- localStorage数据存储 模块 -------------------



//------------------- 引擎模板 模块 -------------------

;(function ($) {
    'use strict'
    //入口方法 str 是模板 data 是JSON数据 这是我见过最牛逼的代码
    var tmpl = function (str, data) {
        var param1 = tmpl.arg + ',tmpl';
        var param2 = 'var _e=tmpl.encode' + tmpl.helper + ",_s='" + str.replace(tmpl.regexp, tmpl.func) + "';return _s;";
        var f = new Function(param1,param2);
        return f(data, tmpl);
    }
    tmpl.regexp =
        /([\s'\\])(?!(?:[^{]|\{(?!%))*%\})|(?:\{%(=|#)([\s\S]+?)%\})|(\{%)|(%\})/g
    tmpl.func = function (s, p1, p2, p3, p4, p5) {
        if (p1) {
            // whitespace, quote and backspace in HTML context
            return (
                {
                    '\n': '\\n',
                    '\r': '\\r',
                    '\t': '\\t',
                    ' ': ' '
                }[p1] || '\\' + p1
            )
        }
        if (p2) {
            // interpolation: {%=prop%}, or unescaped: {%#prop%}
            if (p2 === '=') {
                return "'+_e(" + p3 + ")+'"
            }
            return "'+(" + p3 + "==null?'':" + p3 + ")+'"
        }
        if (p4) {
            // evaluation start tag: {%
            return "';"
        }
        if (p5) {
            // evaluation end tag: %}
            return "_s+='"
        }
    }

    tmpl.encReg = /[<>&"'\x00]/g // eslint-disable-line no-control-regex
    tmpl.encMap = {
        '<': '&lt;',
        '>': '&gt;',
        '&': '&amp;',
        '"': '&quot;',
        "'": '&#39;'
    }
    tmpl.encode = function (s) {
        // eslint-disable-next-line eqeqeq
        return (s == null ? '' : '' + s).replace(tmpl.encReg, function (c) {
            return tmpl.encMap[c] || ''
        })
    }

    tmpl.arg = 'o'
    tmpl.helper = ",print=function(s,e){_s+=e?(s==null?'':s):_e(s);}" + ',include=function(s,d){_s+=tmpl(s,d);}'
    if (typeof define === 'function' && define.amd) {
        define(function () {
            return tmpl
        })
    } else if (typeof module === 'object' && module.exports) {
        module.exports = tmpl
    } else {
        $.tmpl = tmpl
    }

})(this)

//------------------- 引擎模板 模块 -------------------



//------------------- 公用模板 模块 -------------------

;(function () {

    //操作模板
    document.writeln("<!-- 操作模板 -->");
    document.writeln("		<script type=\'text/x-tmpl\' id=\'operating-area\'>");
    document.writeln("			<div class=\'operating_div\'>");
    document.writeln("				<div class=\'operating_subdiv\'>");
    document.writeln("					<div class=\'operating_area\'><img id=\'all_visiable_img\' title=\'全部选择\' class=\'operating_area_img\' src=\'https://upload-images.jianshu.io/upload_images/14003450-238e2873b7a15ddf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\'/></div>");
    document.writeln("					<div class=\'operating_area\'><img id=\'all_invisiable_img\' title=\'清空选择\' class=\'operating_area_img\' src=\'https://upload-images.jianshu.io/upload_images/14003450-8490e8c102507e34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\'/></div>");
    document.writeln("					<div class=\'operating_area\'><img id=\'software_set_img\' title=\'设置\' class=\'operating_area_img\' src=\'https://upload-images.jianshu.io/upload_images/14003450-f0a7bf1de11869ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\'/></div>");
    document.writeln("					<div class=\'operating_area\'><img id=\'help_img\' title=\'查看帮助\' class=\'operating_area_img\' src=\'https://upload-images.jianshu.io/upload_images/14003450-5797903b1d4f236c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\'/></div>");
    document.writeln("				</div>");
    document.writeln("			</div>");
    document.writeln("		</script>");


    //语言切换模板
    document.writeln("<!-- 语言切换模板 -->");
    document.writeln("		<script type=\'text/x-tmpl\' id=\'operating-lan\'>");
    document.writeln("			<div class=\'operating_lan_div\'>");
    document.writeln("				<div class=\'operating_lan_subdiv\'>");
    document.writeln("					<div id=\'switch_ios_img\' style=\'opacity:1;\' class=\'operating_area\'><img title=\'切换成iOS\' class=\'operating_area_img\' src=\'https://upload-images.jianshu.io/upload_images/14003450-fa13159806e8df6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\'/></div>");
    document.writeln("					<div id=\'switch_android_img\' style=\'opacity:0.3;\' class=\'operating_area\'><img title=\'切换成Android\' class=\'operating_area_img\' src=\'https://upload-images.jianshu.io/upload_images/14003450-8664c77839bdd505.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\'/></div>");
    document.writeln("					<div id=\'switch_swift_img\' style=\'opacity:0.3;\' class=\'operating_area\'><img title=\'切换成Swift\' class=\'operating_area_img\' src=\'https://upload-images.jianshu.io/upload_images/14003450-a7fe401b30770104.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\'/></div>");
    document.writeln("					<div id=\'switch_flutter_img\' style=\'opacity:0.3;\' class=\'operating_area\'><img title=\'切换成Flutter\' class=\'operating_area_img\' src=\'https://upload-images.jianshu.io/upload_images/14003450-ad790fab0486b973.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\'/></div>");
    document.writeln("				</div>");
    document.writeln("			</div>");
    document.writeln("		</script>");


    //控件信息显示模块
    document.writeln("<script type=\'text/x-tmpl\' id=\'show_info_view\'>");
    document.writeln("		<div id=\'show_info_view_bg\' class=\'fuceng\' style=\'margin-left: 0px;\'>");
    document.writeln("			<div class=\'subtitle\'>控件信息</div>");
    document.writeln("			<div style=\'height:10px;\'></div>");
    document.writeln("			<div class=\'flex-row\'>");
    document.writeln("				<span class=\'item_title\'>类型</span>");
    document.writeln("				<div id=\'info_view_type_bg\' class=\'item_value flex-row\' style=\'pointer-events: none\'>");
    document.writeln("					<div style=\'width: 189px;height: 40px;\' class=\'flex-row\'>");
    document.writeln("						<div style=\'width: 150px;min-width: 150px;height: 40px;\'>");
    document.writeln("							<span id=\'info_view_type\'>未选择</span>");
    document.writeln("						</div>");
    document.writeln("						<img id=\'info_view_type_img\' style=\'pointer-events: none;opacity: 0;height: 15px;width: 15px;margin-left: 8px;margin-top: 12px;\' src=\'https://upload-images.jianshu.io/upload_images/14003450-345864712f07d617.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\'>");
    document.writeln("					</div>");
    document.writeln("				</div>");
    document.writeln("			</div>");
    document.writeln("");
    document.writeln("			<div style=\'height:10px;\'></div>");
    document.writeln("			<div class=\'flex-row\'>");
    document.writeln("				<span class=\'item_title\'>命名</span>");
    document.writeln("				<div id=\'info_view_define_name_bg\' class=\'item_input_value flex-row\' style=\'pointer-events: none\'>");
    document.writeln("					<div style=\'width: 189px;height: 40px;\' class=\'flex-row\'>");
    document.writeln("						<div style=\'width: 150px;min-width: 150px;height: 40px;\'>");
    document.writeln("							<input id=\'info_view_define_name\' style=\'width: 189px;height: 40px; border: 1px;background: #f7f9fc;padding: 0px 30px 0px 8px;\' placeholder=\'未命名\'>");
    document.writeln("						</div>");
    document.writeln("						<img id=\'info_view_define_name_img\' style=\'pointer-events: none; opacity: 0;height: 15px;width: 15px;margin-left: 15px;margin-top: 12px;\' src=\'https://upload-images.jianshu.io/upload_images/14003450-ce1bfd1764a7976a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\'>");
    document.writeln("					</div>");
    document.writeln("				</div>");
    document.writeln("			</div>");
    document.writeln("");
    document.writeln("			<div style=\'height:10px;\'></div>");
    document.writeln("			<div class=\'flex-row\'>");
    document.writeln("				<span class=\'item_title\'>合成</span>");
    document.writeln("				<div id=\'info_view_layer_union_bg\' class=\'item_value flex-row\' style=\'pointer-events: none\'>");
    document.writeln("					<div style=\'width: 189px;height: 40px;\' class=\'flex-row\'>");
    document.writeln("						<div style=\'width: 150px;min-width: 150px;height: 40px;\'>");
    document.writeln("							<span id=\'info_view_layer_union\'>未选择</span>");
    document.writeln("						</div>");
    document.writeln("						<img id=\'info_view_layer_union_img\' style=\'pointer-events: none;opacity: 0; height: 13px;width: 13px;margin-left: 8px;margin-top: 13px;\' src=\'https://upload-images.jianshu.io/upload_images/14003450-fdf4737aadb3c28f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\'>");
    document.writeln("					</div>");
    document.writeln("				</div>");
    document.writeln("			</div>");
    document.writeln("");
    document.writeln("			<div style=\'height:10px;\'></div>");
    document.writeln("			<div class=\'flex-col\'>");
    document.writeln("				<span class=\'item_title\'>代码</span>");
    document.writeln("				<p id=\'info_view_code\' class=\'code_item_value\' style=\'width: 230px; height: 300px;max-height: 300px; margin-left: 24px;overflow: auto;\'>");
    document.writeln("				</p>");
    document.writeln("			</div>");
    document.writeln("			<div style=\'height:50px;\'></div>");
    document.writeln("");
    document.writeln("			<div class=\'view-btn\'>");
    document.writeln("				<div id=\'export_xml\' class=\'view flex-row\'>");
    document.writeln("					<div style=\'margin: auto;\'>");
    document.writeln("						<img id=\'export_btn_img\' style=\'height: 20px;width: 20px;margin-top: 9px;position: absolute;\' src=\'https://upload-images.jianshu.io/upload_images/14003450-c89d154f59ba4ab6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\'/>");
    document.writeln("						<span id=\'export_btn_text\' style=\'margin-left: 25px;\'>生成iOS布局</span>");
    document.writeln("					</div>");
    document.writeln("				</div>");
    document.writeln("			</div>");
    document.writeln("");
    document.writeln("		</div>");
    document.writeln("		</script>");

    //软件介绍模块
    document.writeln("<script type=\'text/x-tmpl\' id=\'tmpl-set-dialog\'>");
    document.writeln("			<div>");
    document.writeln("			<p class=\'set_ui_css\'>");
    document.writeln("				软件版本:v1.0.0<br><br>");
    document.writeln("				软件简介:<br>");
    document.writeln("				蓝湖辅助工具,减少移动端开发中控件属性的复制和粘贴.<br><br>");
    document.writeln("				待开发的功能:<br>");
    document.writeln("				1.支持自动生成约束<br>");
    document.writeln("				2.开发设置页面<br>");
    document.writeln("				3.做一个浏览器插件,支持不需要下载整个工程,可即时操作当前蓝湖浏览页面<br>");
    document.writeln("				4.支持Flutter语言模板生成<br>");
    document.writeln("				5.支持更多平台,如Sketch等<br>");
    document.writeln("				6.支持用户自定义语言模板<br><br>");
    document.writeln("				备注:使用中如有疑问,可查看帮助,或加QQ群:481431442(无需验证),或联系开发者微信号:13077821373(无需验证),如若未能即时回复,请谅解");
    document.writeln("			</p>");
    document.writeln("		</div>");
    document.writeln("		</script>");

})(this);

//------------------- 公用模板 模块 -------------------






//------------------- 弹窗模板 模块 -------------------

;(function () {

    //自定义命名,切换控件类型,合成控件类型 模板
    document.writeln('      <dialog id=\"ios_switch_view_type_dialog\" class=\"fuceng\" style=\"z-index:999999;padding: 1px; border-color: white\">');
    document.writeln('		</dialog>');
    document.writeln('');
    document.writeln('		<dialog id=\"android_switch_view_type_dialog\" class=\"fuceng\" style=\"z-index:999999;padding: 1px; border-color: white\">');
    document.writeln('		</dialog>');
    document.writeln('');
    document.writeln('		<dialog id=\"ios_union_view_type_dialog\" class=\"fuceng\" style=\"z-index:999999;padding: 1px; border-color: white\">');
    document.writeln('		</dialog>');
    document.writeln('');
    document.writeln('		<dialog id=\"android_union_view_type_dialog\" class=\"fuceng\" style=\"z-index:999999;padding: 1px; border-color: white\">');
    document.writeln('		</dialog>');
    document.writeln('');
    document.writeln('		<script type=\"text/x-tmpl\" id=\"tmpl-define-dialog-father\">');
    document.writeln('			<div style=\"display: flex;flex-direction: column;justify-content: space-between;margin: 9px;\">');
    document.writeln('    		      {% if (o.root.datas) { %}');
    document.writeln('    		      {% var templateValue = document.getElementById(\"tmpl-define-dialog-child\").innerHTML;var map = {};map[\"root\"] = o.root.datas; var ret = tmpl(templateValue, map); %}');
    document.writeln('    		      {% if(ret) { %}');
    document.writeln('    		      {%=ret%}');
    document.writeln('    		      {% } %}');
    document.writeln('    		      {% } %}');
    document.writeln('    		</div>');
    document.writeln('    	 </script>');
    document.writeln('');
    document.writeln('		<script type=\"text/x-tmpl\" id=\"tmpl-define-dialog-child\">');
    document.writeln('		{% for (var i=0; i<o.root.length; i++) { %}');
    document.writeln('			{% var subArr = o.root[i]; %}');
    document.writeln('			<div style=\"display: flex;flex-direction: row;justify-content: space-between;\">');
    document.writeln('			{% for (var j=0; j<subArr.length; j++) { %}');
    document.writeln('				{% var data = subArr[j]; %}');
    document.writeln('				<div id=\"{%=data.bg_id %}\" class=\"define_view_box_view\">');
    document.writeln('					<img id=\"{%=data.img_id %}\" class=\"define_view_box_img\" title=\"{%=data.text %}\" src=\"{%=data.src %}\" />');
    document.writeln('					<span id=\"{%=data.text_id %}\" class=\"define_view_box_title\" title=\"{%=data.text %}\">{%=data.text %}</span>');
    document.writeln('				</div>');
    document.writeln('			{% } %}');
    document.writeln('			</div>');
    document.writeln('		{% } %}');
    document.writeln('    	</script>');

    //设置模板
    document.writeln('<dialog id=\"software_set_dialog\" class=\"fuceng\" style=\"z-index:999999;padding: 20px; border-color: white\">');
    document.writeln('</dialog>');

})(this);

//------------------- 弹窗模板 模块 -------------------






//------------------- iOS模板 模块 -------------------

;(function () {

    //模板数据ViewController
    document.writeln('<!-- 模板数据ViewController -->');
    document.writeln('		<script type=\"text/x-tmpl\" id=\"tmpl-ios-viewcontroller\">');
    document.writeln('<?xml version=\"1.0\" encoding=\"UTF-8\"?>');
    document.writeln('		<document type=\"com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB\" version=\"3.0\" toolsVersion=\"12121\" systemVersion=\"16G29\" targetRuntime=\"iOS.CocoaTouch\" propertyAccessControl=\"none\" useAutolayout=\"YES\" useTraitCollections=\"YES\" colorMatched=\"YES\">');
    document.writeln('		    <device id=\"retina4_7\" orientation=\"portrait\">');
    document.writeln('		        <adaptation id=\"fullscreen\"/>');
    document.writeln('		    </device>');
    document.writeln('		    <dependencies>');
    document.writeln('		        <plugIn identifier=\"com.apple.InterfaceBuilder.IBCocoaTouchPlugin\" version=\"12089\"/>');
    document.writeln('		        <capability name=\"documents saved in the Xcode 8 format\" minToolsVersion=\"8.0\"/>');
    document.writeln('		    </dependencies>');
    document.writeln('		    <scenes>');
    document.writeln('		        <!--View Controller-->');
    document.writeln('		        <scene sceneID=\"84N-Jg-pdF\">');
    document.writeln('		            <objects>');
    document.writeln('		                <viewController id=\"zis-Mr-Kss\" sceneMemberID=\"viewController\">');
    document.writeln('		                    <layoutGuides>');
    document.writeln('		                        <viewControllerLayoutGuide type=\"top\" id=\"tKX-wS-7Jq\"/>');
    document.writeln('		                        <viewControllerLayoutGuide type=\"bottom\" id=\"tku-jY-el4\"/>');
    document.writeln('		                    </layoutGuides>');
    document.writeln('		                    <view key=\"view\" contentMode=\"scaleToFill\" id=\"n0Z-fF-wfF\">');
    document.writeln('		                        <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"{%=o.root.width %}\" height=\"{%=o.root.height %}\"/>');
    document.writeln('		                        <autoresizingMask key=\"autoresizingMask\" widthSizable=\"YES\" heightSizable=\"YES\"/>');
    document.writeln('		                        <subviews>');
    document.writeln('		                            <view contentMode=\"scaleToFill\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"9ju-6x-dsY\">');
    document.writeln('		                                <rect key=\"frame\" x=\"0.0\" y=\"20\" width=\"{%=o.root.width %}\" height=\"{%=o.root.height %}\"/>');
    document.writeln('		                                {% if (o.root.views) { %}');
    document.writeln('		                                {% var templateViewsValue = document.getElementById(\"tmpl-ios-views\").innerHTML;var map = {};map[\"root\"] = o.root.views; var ret = tmpl(templateViewsValue, map); %}');
    document.writeln('		                                {% if(ret) { %}');
    document.writeln('		                                {%=ret%}');
    document.writeln('		                                {% } %}');
    document.writeln('		                                {% } %}');
    document.writeln('		                                <color key=\"backgroundColor\" white=\"1\" alpha=\"1\" colorSpace=\"custom\" customColorSpace=\"genericGamma22GrayColorSpace\"/>');
    document.writeln('		                            </view>');
    document.writeln('		                        </subviews>');
    document.writeln('		                        <color key=\"backgroundColor\" white=\"1\" alpha=\"1\" colorSpace=\"calibratedWhite\"/>');
    document.writeln('		                        <constraints>');
    document.writeln('		                            <constraint firstItem=\"9ju-6x-dsY\" firstAttribute=\"leading\" secondItem=\"n0Z-fF-wfF\" secondAttribute=\"leading\" id=\"L4g-fe-NOp\"/>');
    document.writeln('		                            <constraint firstItem=\"tku-jY-el4\" firstAttribute=\"top\" secondItem=\"9ju-6x-dsY\" secondAttribute=\"bottom\" id=\"kHf-Tw-7eh\"/>');
    document.writeln('		                            <constraint firstItem=\"9ju-6x-dsY\" firstAttribute=\"top\" secondItem=\"tKX-wS-7Jq\" secondAttribute=\"bottom\" id=\"ynb-x5-XOo\"/>');
    document.writeln('		                            <constraint firstAttribute=\"trailing\" secondItem=\"9ju-6x-dsY\" secondAttribute=\"trailing\" id=\"zkA-27-wdD\"/>');
    document.writeln('		                        </constraints>');
    document.writeln('		                    </view>');
    document.writeln('		                    <size key=\"freeformSize\" width=\"{%=o.root.width %}\" height=\"{%=o.root.height %}\"/>');
    document.writeln('		                </viewController>');
    document.writeln('		                <placeholder placeholderIdentifier=\"IBFirstResponder\" id=\"giQ-2R-Y34\" userLabel=\"First Responder\" sceneMemberID=\"firstResponder\"/>');
    document.writeln('		            </objects>');
    document.writeln('		            <point key=\"canvasLocation\" x=\"599.20000000000005\" y=\"100.29985007496252\"/>');
    document.writeln('		        </scene>');
    document.writeln('		    </scenes>');
    document.writeln('		</document>');
    document.writeln('		    </script>');

    //模板数据View
    document.writeln('<!-- 模板数据View -->');
    document.writeln('			<script type=\"text/x-tmpl\" id=\"tmpl-ios-views\">');
    document.writeln('				');
    document.writeln('		                    <subviews>');
    document.writeln('		{% for (var i=0; i<o.root.length; i++) { %}');
    document.writeln('		{% var tempView = o.root[i]; %}');
    document.writeln('		');
    document.writeln('		{% if (tempView.viewType == \"label\") { %}');
    document.writeln('		                            <label opaque=\"NO\" userInteractionEnabled=\"NO\" contentMode=\"left\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" fixedFrame=\"YES\" text=\"{% if (tempView.text) { %}{%=tempView.text %}{% } else { %}Label{% } %}\" {% if (tempView.align) { %}textAlignment=\"{% if (tempView.align == \"default\") { %}natural{% } %}{% if (tempView.align == \"left\") { %}natural{% } %}{% if (tempView.align == \"right\") { %}right{% } %}{% if (tempView.align == \"center\") { %}center{% } %}\"{% } else { %}textAlignment=\"natural\"{% } %} lineBreakMode=\"tailTruncation\" {% if (tempView.line) { %}numberOfLines=\"{%=tempView.line %}\"{% } %} baselineAdjustment=\"alignBaselines\" adjustsFontSizeToFit=\"NO\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"{%=tempView.idStr %}\">');
    document.writeln('		                                <rect key=\"frame\" x=\"{%=tempView.x %}\" y=\"{%=tempView.y %}\" width=\"{%=tempView.width %}\" height=\"{%=tempView.height %}\"/>');
    document.writeln('		                                <autoresizingMask key=\"autoresizingMask\" flexibleMaxX=\"YES\" flexibleMaxY=\"YES\"/>');
    document.writeln('		                {% if (tempView.bgColorRed) { %}<color key=\"backgroundColor\" red=\"{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}\" green=\"{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}\" blue=\"{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}\" alpha=\"{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}\" colorSpace=\"calibratedRGB\"/>{% } %}');
    document.writeln('		                                <fontDescription key=\"fontDescription\" {% if (tempView.font_family) { %} {% if (tempView.font_family) { %} name=\"{%=tempView.font_family%}\" {% } %} {% if (tempView.font_family_for_name) { %} family=\"{%=tempView.font_family_for_name%}\" {% } %} {% } else { %} type=\"system\" {% } %} pointSize=\"{% if (tempView.font) { %}{%=tempView.font %}{% } else { %}14{% } %}\"/>');
    document.writeln('		                                {% if (tempView.textColorRed) { %}<color key=\"textColor\" red=\"{% if (tempView.textColorRed) { %}{%=tempView.textColorRed %}{% } else { %}1{% } %}\" green=\"{% if (tempView.textColorGreen) { %}{%=tempView.textColorGreen %}{% } else { %}1{% } %}\" blue=\"{% if (tempView.textColorBlue) { %}{%=tempView.textColorBlue %}{% } else { %}1{% } %}\" alpha=\"{% if (tempView.textColorAlpha) { %}{%=tempView.textColorAlpha %}{% } else { %}1{% } %}\" colorSpace=\"calibratedRGB\"/>{% } else { %}<nil key=\"textColor\"/>{% } %}');
    document.writeln('		                                <nil key=\"highlightedColor\"/>');
    document.writeln('                                        {% if (tempView.border_width) { %}<userDefinedRuntimeAttributes>\n {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderWidth\">\n<integer key=\"value\" value=\"{%=tempView.border_width%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderRadius\">\n<integer key=\"value\" value=\"{%=tempView.border_radius%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.borderColorRed) { %}<userDefinedRuntimeAttribute type=\"color\" keyPath=\"layer.borderUIColor\">\n<color key=\"value\" red=\"{%=tempView.borderColorRed%}\" green=\"{%=tempView.borderColorGreen%}\" blue=\"{%=tempView.borderColorBlue%}\" alpha=\"{%=tempView.borderColorAlpha%}\" colorSpace=\"custom\" customColorSpace=\"sRGB\"/>\n</userDefinedRuntimeAttribute>\n {% } %}</userDefinedRuntimeAttributes>{% } %}');
    document.writeln('		                ');
    document.writeln('		                            </label>');
    document.writeln('		{% } %}');
    document.writeln('		{% if (tempView.viewType == \"switch\") { %}');
    document.writeln('		                            <switch opaque=\"NO\" contentMode=\"scaleToFill\" horizontalHuggingPriority=\"750\" verticalHuggingPriority=\"750\" fixedFrame=\"YES\" contentHorizontalAlignment=\"center\" contentVerticalAlignment=\"center\" on=\"YES\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"{%=tempView.idStr %}\">');
    document.writeln('		                                <rect key=\"frame\" x=\"{%=tempView.x %}\" y=\"{%=tempView.y %}\" width=\"51\" height=\"31\"/>');
    document.writeln('		                                <autoresizingMask key=\"autoresizingMask\" flexibleMaxX=\"YES\" flexibleMaxY=\"YES\"/>');
    document.writeln('		                {% if (tempView.bgColorRed) { %}<color key=\"backgroundColor\" red=\"{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}\" green=\"{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}\" blue=\"{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}\" alpha=\"{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}\" colorSpace=\"calibratedRGB\"/>{% } %}');
    document.writeln('                                        {% if (tempView.border_width) { %}<userDefinedRuntimeAttributes>\n {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderWidth\">\n<integer key=\"value\" value=\"{%=tempView.border_width%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderRadius\">\n<integer key=\"value\" value=\"{%=tempView.border_radius%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.borderColorRed) { %}<userDefinedRuntimeAttribute type=\"color\" keyPath=\"layer.borderUIColor\">\n<color key=\"value\" red=\"{%=tempView.borderColorRed%}\" green=\"{%=tempView.borderColorGreen%}\" blue=\"{%=tempView.borderColorBlue%}\" alpha=\"{%=tempView.borderColorAlpha%}\" colorSpace=\"custom\" customColorSpace=\"sRGB\"/>\n</userDefinedRuntimeAttribute>\n {% } %}</userDefinedRuntimeAttributes>{% } %}');
    document.writeln('		                ');
    document.writeln('		                            </switch>');
    document.writeln('		{% } %}');
    document.writeln('		{% if (tempView.viewType == \"scrollView\") { %}');
    document.writeln('		                            <scrollView clipsSubviews=\"YES\" multipleTouchEnabled=\"YES\" contentMode=\"scaleToFill\" fixedFrame=\"YES\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"{%=tempView.idStr %}\">');
    document.writeln('		                                <rect key=\"frame\" x=\"{%=tempView.x %}\" y=\"{%=tempView.y %}\" width=\"{%=tempView.width %}\" height=\"{%=tempView.height %}\"/>');
    document.writeln('		                                <autoresizingMask key=\"autoresizingMask\" flexibleMaxX=\"YES\" flexibleMaxY=\"YES\"/>');
    document.writeln('		                {% if (tempView.bgColorRed) { %}<color key=\"backgroundColor\" red=\"{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}\" green=\"{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}\" blue=\"{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}\" alpha=\"{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}\" colorSpace=\"calibratedRGB\"/>{% } %}');
    document.writeln('		                                       {% if (tempView.views) { %}');
    document.writeln('		                                       {% var templateViewsValue = document.getElementById(\"tmpl-ios-views\").innerHTML;var map = {};map[\"root\"] = tempView.views; var ret = tmpl(templateViewsValue, map); %}');
    document.writeln('		                                       {% if(ret) { %}');
    document.writeln('		                                       {%=ret%}');
    document.writeln('		                                       {% } %}');
    document.writeln('		                                       {% } %}');
    document.writeln('                                        {% if (tempView.border_width) { %}<userDefinedRuntimeAttributes>\n {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderWidth\">\n<integer key=\"value\" value=\"{%=tempView.border_width%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderRadius\">\n<integer key=\"value\" value=\"{%=tempView.border_radius%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.borderColorRed) { %}<userDefinedRuntimeAttribute type=\"color\" keyPath=\"layer.borderUIColor\">\n<color key=\"value\" red=\"{%=tempView.borderColorRed%}\" green=\"{%=tempView.borderColorGreen%}\" blue=\"{%=tempView.borderColorBlue%}\" alpha=\"{%=tempView.borderColorAlpha%}\" colorSpace=\"custom\" customColorSpace=\"sRGB\"/>\n</userDefinedRuntimeAttribute>\n {% } %}</userDefinedRuntimeAttributes>{% } %}');
    document.writeln('		                ');
    document.writeln('		                            </scrollView>');
    document.writeln('		{% } %}');
    document.writeln('		{% if (tempView.viewType == \"textField\") { %}');
    document.writeln('		                            <textField opaque=\"NO\" clipsSubviews=\"YES\" contentMode=\"scaleToFill\" fixedFrame=\"YES\" contentHorizontalAlignment=\"left\" contentVerticalAlignment=\"center\" borderStyle=\"roundedRect\" textAlignment=\"natural\" minimumFontSize=\"17\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"{%=tempView.idStr %}\">');
    document.writeln('		                                <rect key=\"frame\" x=\"{%=tempView.x %}\" y=\"{%=tempView.y %}\" width=\"{%=tempView.width %}\" height=\"30\"/>');
    document.writeln('		                                <autoresizingMask key=\"autoresizingMask\" flexibleMaxX=\"YES\" flexibleMaxY=\"YES\"/>');
    document.writeln('		                {% if (tempView.bgColorRed) { %}<color key=\"backgroundColor\" red=\"{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}\" green=\"{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}\" blue=\"{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}\" alpha=\"{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}\" colorSpace=\"calibratedRGB\"/>{% } %}');
    document.writeln('		                                {% if (tempView.textColorRed) { %}<color key=\"textColor\" red=\"{% if (tempView.textColorRed) { %}{%=tempView.textColorRed %}{% } else { %}1{% } %}\" green=\"{% if (tempView.textColorGreen) { %}{%=tempView.textColorGreen %}{% } else { %}1{% } %}\" blue=\"{% if (tempView.textColorBlue) { %}{%=tempView.textColorBlue %}{% } else { %}1{% } %}\" alpha=\"{% if (tempView.textColorAlpha) { %}{%=tempView.textColorAlpha %}{% } else { %}1{% } %}\" colorSpace=\"calibratedRGB\"/>{% } else { %}<nil key=\"textColor\"/>{% } %}');
    document.writeln('		                                <fontDescription key=\"fontDescription\" {% if (tempView.font_family) { %} {% if (tempView.font_family) { %} name=\"{%=tempView.font_family%}\" {% } %} {% if (tempView.font_family_for_name) { %} family=\"{%=tempView.font_family_for_name%}\" {% } %} {% } else { %} type=\"system\" {% } %} pointSize=\"{% if (tempView.font) { %}{%=tempView.font %}{% } else { %}14{% } %}\"/>');
    document.writeln('		                                <textInputTraits key=\"textInputTraits\"/>');
    document.writeln('                                        {% if (tempView.border_width) { %}<userDefinedRuntimeAttributes>\n {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderWidth\">\n<integer key=\"value\" value=\"{%=tempView.border_width%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderRadius\">\n<integer key=\"value\" value=\"{%=tempView.border_radius%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.borderColorRed) { %}<userDefinedRuntimeAttribute type=\"color\" keyPath=\"layer.borderUIColor\">\n<color key=\"value\" red=\"{%=tempView.borderColorRed%}\" green=\"{%=tempView.borderColorGreen%}\" blue=\"{%=tempView.borderColorBlue%}\" alpha=\"{%=tempView.borderColorAlpha%}\" colorSpace=\"custom\" customColorSpace=\"sRGB\"/>\n</userDefinedRuntimeAttribute>\n {% } %}</userDefinedRuntimeAttributes>{% } %}');
    document.writeln('		                ');
    document.writeln('		                            </textField>');
    document.writeln('		{% } %}');
    document.writeln('		{% if (tempView.viewType == \"textView\") { %}');
    document.writeln('		                            <textView clipsSubviews=\"YES\" multipleTouchEnabled=\"YES\" contentMode=\"scaleToFill\" fixedFrame=\"YES\" textAlignment=\"natural\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"{%=tempView.idStr %}\">');
    document.writeln('		                                <rect key=\"frame\" x=\"{%=tempView.x %}\" y=\"{%=tempView.y %}\" width=\"{%=tempView.width %}\" height=\"{%=tempView.height %}\"/>');
    document.writeln('		                                <autoresizingMask key=\"autoresizingMask\" flexibleMaxX=\"YES\" flexibleMaxY=\"YES\"/>');
    document.writeln('		                {% if (tempView.bgColorRed) { %}<color key=\"backgroundColor\" red=\"{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}\" green=\"{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}\" blue=\"{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}\" alpha=\"{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}\" colorSpace=\"calibratedRGB\"/>{% } else { %}<color key=\"backgroundColor\" white=\"0.0\" alpha=\"0.0\" colorSpace=\"custom\" customColorSpace=\"genericGamma22GrayColorSpace\"/>{% } %}');
    document.writeln('		                                <string key=\"text\">Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Nam liber te conscient to factor tum poen legum odioque civiuda.</string>');
    document.writeln('		                {% if (tempView.textColorRed) { %}<color key=\"textColor\" red=\"{% if (tempView.textColorRed) { %}{%=tempView.textColorRed %}{% } else { %}1{% } %}\" green=\"{% if (tempView.textColorGreen) { %}{%=tempView.textColorGreen %}{% } else { %}1{% } %}\" blue=\"{% if (tempView.textColorBlue) { %}{%=tempView.textColorBlue %}{% } else { %}1{% } %}\" alpha=\"{% if (tempView.textColorAlpha) { %}{%=tempView.textColorAlpha %}{% } else { %}1{% } %}\" colorSpace=\"calibratedRGB\"/>{% } %}');
    document.writeln('		                                <fontDescription key=\"fontDescription\" {% if (tempView.font_family) { %} {% if (tempView.font_family) { %} name=\"{%=tempView.font_family%}\" {% } %} {% if (tempView.font_family_for_name) { %} family=\"{%=tempView.font_family_for_name%}\" {% } %} {% } else { %} type=\"system\" {% } %} pointSize=\"{% if (tempView.font) { %}{%=tempView.font %}{% } else { %}14{% } %}\"/>');
    document.writeln('		                                <textInputTraits key=\"textInputTraits\" autocapitalizationType=\"sentences\"/>');
    document.writeln('                                        {% if (tempView.border_width) { %}<userDefinedRuntimeAttributes>\n {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderWidth\">\n<integer key=\"value\" value=\"{%=tempView.border_width%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderRadius\">\n<integer key=\"value\" value=\"{%=tempView.border_radius%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.borderColorRed) { %}<userDefinedRuntimeAttribute type=\"color\" keyPath=\"layer.borderUIColor\">\n<color key=\"value\" red=\"{%=tempView.borderColorRed%}\" green=\"{%=tempView.borderColorGreen%}\" blue=\"{%=tempView.borderColorBlue%}\" alpha=\"{%=tempView.borderColorAlpha%}\" colorSpace=\"custom\" customColorSpace=\"sRGB\"/>\n</userDefinedRuntimeAttribute>\n {% } %}</userDefinedRuntimeAttributes>{% } %}');
    document.writeln('		                ');
    document.writeln('		                            </textView>');
    document.writeln('		{% } %}');
    document.writeln('		{% if (tempView.viewType == \"imageView\") { %}');
    document.writeln('		                            <imageView userInteractionEnabled=\"NO\" contentMode=\"scaleToFill\" horizontalHuggingPriority=\"251\" verticalHuggingPriority=\"251\" fixedFrame=\"YES\" {% if (tempView.image) { %}image=\"{%=tempView.image %}\"{% } %} translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"{%=tempView.idStr %}\">');
    document.writeln('		                                <rect key=\"frame\" x=\"{%=tempView.x %}\" y=\"{%=tempView.y %}\" width=\"{%=tempView.width %}\" height=\"{%=tempView.height %}\"/>');
    document.writeln('		                                <autoresizingMask key=\"autoresizingMask\" flexibleMaxX=\"YES\" flexibleMaxY=\"YES\"/>');
    document.writeln('		                {% if (tempView.bgColorRed) { %}<color key=\"backgroundColor\" red=\"{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}\" green=\"{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}\" blue=\"{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}\" alpha=\"{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}\" colorSpace=\"calibratedRGB\"/>{% } %}');
    document.writeln('                                        {% if (tempView.border_width) { %}<userDefinedRuntimeAttributes>\n {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderWidth\">\n<integer key=\"value\" value=\"{%=tempView.border_width%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderRadius\">\n<integer key=\"value\" value=\"{%=tempView.border_radius%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.borderColorRed) { %}<userDefinedRuntimeAttribute type=\"color\" keyPath=\"layer.borderUIColor\">\n<color key=\"value\" red=\"{%=tempView.borderColorRed%}\" green=\"{%=tempView.borderColorGreen%}\" blue=\"{%=tempView.borderColorBlue%}\" alpha=\"{%=tempView.borderColorAlpha%}\" colorSpace=\"custom\" customColorSpace=\"sRGB\"/>\n</userDefinedRuntimeAttribute>\n {% } %}</userDefinedRuntimeAttributes>{% } %}');
    document.writeln('		                ');
    document.writeln('		                            </imageView>');
    document.writeln('		{% } %}');
    document.writeln('		{% if (tempView.viewType == \"activityIndicatorView\") { %}');
    document.writeln('		                            <activityIndicatorView opaque=\"NO\" contentMode=\"scaleToFill\" horizontalHuggingPriority=\"750\" verticalHuggingPriority=\"750\" fixedFrame=\"YES\" style=\"gray\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"{%=tempView.idStr %}\">');
    document.writeln('		                                <rect key=\"frame\" x=\"{%=tempView.x %}\" y=\"{%=tempView.y %}\" width=\"20\" height=\"20\"/>');
    document.writeln('		                                <autoresizingMask key=\"autoresizingMask\" flexibleMaxX=\"YES\" flexibleMaxY=\"YES\"/>');
    document.writeln('		                {% if (tempView.bgColorRed) { %}<color key=\"backgroundColor\" red=\"{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}\" green=\"{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}\" blue=\"{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}\" alpha=\"{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}\" colorSpace=\"calibratedRGB\"/>{% } %}');
    document.writeln('                                        {% if (tempView.border_width) { %}<userDefinedRuntimeAttributes>\n {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderWidth\">\n<integer key=\"value\" value=\"{%=tempView.border_width%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderRadius\">\n<integer key=\"value\" value=\"{%=tempView.border_radius%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.borderColorRed) { %}<userDefinedRuntimeAttribute type=\"color\" keyPath=\"layer.borderUIColor\">\n<color key=\"value\" red=\"{%=tempView.borderColorRed%}\" green=\"{%=tempView.borderColorGreen%}\" blue=\"{%=tempView.borderColorBlue%}\" alpha=\"{%=tempView.borderColorAlpha%}\" colorSpace=\"custom\" customColorSpace=\"sRGB\"/>\n</userDefinedRuntimeAttribute>\n {% } %}</userDefinedRuntimeAttributes>{% } %}');
    document.writeln('		                ');
    document.writeln('		                            </activityIndicatorView>');
    document.writeln('		{% } %}');
    document.writeln('		{% if (tempView.viewType == \"button\") { %}');
    document.writeln('		                            <button opaque=\"NO\" contentMode=\"scaleToFill\" fixedFrame=\"YES\" contentHorizontalAlignment=\"center\" contentVerticalAlignment=\"center\" buttonType=\"roundedRect\" lineBreakMode=\"middleTruncation\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"{%=tempView.idStr %}\">');
    document.writeln('		                                <rect key=\"frame\" x=\"{%=tempView.x %}\" y=\"{%=tempView.y %}\" width=\"{%=tempView.width %}\" height=\"{%=tempView.height %}\"/>');
    document.writeln('		                                <autoresizingMask key=\"autoresizingMask\" flexibleMaxX=\"YES\" flexibleMaxY=\"YES\"/>');
    document.writeln('		                {% if (tempView.bgColorRed) { %}<color key=\"backgroundColor\" red=\"{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}\" green=\"{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}\" blue=\"{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}\" alpha=\"{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}\" colorSpace=\"calibratedRGB\"/>{% } %}');
    document.writeln('		                <fontDescription key=\"fontDescription\" {% if (tempView.font_family) { %} {% if (tempView.font_family) { %} name=\"{%=tempView.font_family%}\" {% } %} {% if (tempView.font_family_for_name) { %} family=\"{%=tempView.font_family_for_name%}\" {% } %} {% } else { %} type=\"system\" {% } %} pointSize=\"{% if (tempView.font) { %}{%=tempView.font %}{% } else { %}14{% } %}\"/>');
    document.writeln('		                                {% if (tempView.textColorRed) { %}<state key=\"normal\" title=\"{% if (tempView.text) { %}{%=tempView.text %}{% } else { %}Button{% } %}\">');
    document.writeln('		                    <color key=\"titleColor\" red=\"{% if (tempView.textColorRed) { %}{%=tempView.textColorRed %}{% } else { %}1{% } %}\" green=\"{% if (tempView.textColorGreen) { %}{%=tempView.textColorGreen %}{% } else { %}1{% } %}\" blue=\"{% if (tempView.textColorBlue) { %}{%=tempView.textColorBlue %}{% } else { %}1{% } %}\" alpha=\"{% if (tempView.textColorAlpha) { %}{%=tempView.textColorAlpha %}{% } else { %}1{% } %}\" colorSpace=\"calibratedRGB\"/>');
    document.writeln('		                    </state>{% } else { %}<state key=\"normal\" title=\"{% if (tempView.text) { %}{%=tempView.text %}{% } else { %}Button{% } %}\"/>{% } %}');
    document.writeln('                                        {% if (tempView.border_width) { %}<userDefinedRuntimeAttributes>\n {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderWidth\">\n<integer key=\"value\" value=\"{%=tempView.border_width%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderRadius\">\n<integer key=\"value\" value=\"{%=tempView.border_radius%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.borderColorRed) { %}<userDefinedRuntimeAttribute type=\"color\" keyPath=\"layer.borderUIColor\">\n<color key=\"value\" red=\"{%=tempView.borderColorRed%}\" green=\"{%=tempView.borderColorGreen%}\" blue=\"{%=tempView.borderColorBlue%}\" alpha=\"{%=tempView.borderColorAlpha%}\" colorSpace=\"custom\" customColorSpace=\"sRGB\"/>\n</userDefinedRuntimeAttribute>\n {% } %}</userDefinedRuntimeAttributes>{% } %}');
    document.writeln('		                ');
    document.writeln('		                            </button>');
    document.writeln('		{% } %}');
    document.writeln('		{% if (tempView.viewType == \"progressView\") { %}');
    document.writeln('		                            <progressView opaque=\"NO\" contentMode=\"scaleToFill\" verticalHuggingPriority=\"750\" fixedFrame=\"YES\" progress=\"0.5\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"{%=tempView.idStr %}\">');
    document.writeln('		                                <rect key=\"frame\" x=\"{%=tempView.x %}\" y=\"{%=tempView.y %}\" width=\"{%=tempView.width %}\" height=\"2\"/>');
    document.writeln('		                                <autoresizingMask key=\"autoresizingMask\" flexibleMaxX=\"YES\" flexibleMaxY=\"YES\"/>');
    document.writeln('		                {% if (tempView.bgColorRed) { %}<color key=\"backgroundColor\" red=\"{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}\" green=\"{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}\" blue=\"{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}\" alpha=\"{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}\" colorSpace=\"calibratedRGB\"/>{% } %}');
    document.writeln('                                        {% if (tempView.border_width) { %}<userDefinedRuntimeAttributes>\n {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderWidth\">\n<integer key=\"value\" value=\"{%=tempView.border_width%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderRadius\">\n<integer key=\"value\" value=\"{%=tempView.border_radius%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.borderColorRed) { %}<userDefinedRuntimeAttribute type=\"color\" keyPath=\"layer.borderUIColor\">\n<color key=\"value\" red=\"{%=tempView.borderColorRed%}\" green=\"{%=tempView.borderColorGreen%}\" blue=\"{%=tempView.borderColorBlue%}\" alpha=\"{%=tempView.borderColorAlpha%}\" colorSpace=\"custom\" customColorSpace=\"sRGB\"/>\n</userDefinedRuntimeAttribute>\n {% } %}</userDefinedRuntimeAttributes>{% } %}');
    document.writeln('		                ');
    document.writeln('		                            </progressView>');
    document.writeln('		{% } %}');
    document.writeln('		{% if (tempView.viewType == \"tableView\") { %}');
    document.writeln('		                            <tableView clipsSubviews=\"YES\" contentMode=\"scaleToFill\" fixedFrame=\"YES\" alwaysBounceVertical=\"YES\" dataMode=\"prototypes\" style=\"plain\" separatorStyle=\"default\" rowHeight=\"44\" sectionHeaderHeight=\"28\" sectionFooterHeight=\"28\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"{%=tempView.idStr %}\">');
    document.writeln('		                                <rect key=\"frame\" x=\"{%=tempView.x %}\" y=\"{%=tempView.y %}\" width=\"{%=tempView.width %}\" height=\"{%=tempView.height %}\"/>');
    document.writeln('		                                <autoresizingMask key=\"autoresizingMask\" flexibleMaxX=\"YES\" flexibleMaxY=\"YES\"/>');
    document.writeln('		                {% if (tempView.bgColorRed) { %}<color key=\"backgroundColor\" red=\"{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}\" green=\"{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}\" blue=\"{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}\" alpha=\"{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}\" colorSpace=\"calibratedRGB\"/>{% } else { %}<color key=\"backgroundColor\" white=\"0.0\" alpha=\"0.0\" colorSpace=\"custom\" customColorSpace=\"genericGamma22GrayColorSpace\"/>{% } %}');
    document.writeln('                                        {% if (tempView.border_width) { %}<userDefinedRuntimeAttributes>\n {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderWidth\">\n<integer key=\"value\" value=\"{%=tempView.border_width%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderRadius\">\n<integer key=\"value\" value=\"{%=tempView.border_radius%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.borderColorRed) { %}<userDefinedRuntimeAttribute type=\"color\" keyPath=\"layer.borderUIColor\">\n<color key=\"value\" red=\"{%=tempView.borderColorRed%}\" green=\"{%=tempView.borderColorGreen%}\" blue=\"{%=tempView.borderColorBlue%}\" alpha=\"{%=tempView.borderColorAlpha%}\" colorSpace=\"custom\" customColorSpace=\"sRGB\"/>\n</userDefinedRuntimeAttribute>\n {% } %}</userDefinedRuntimeAttributes>{% } %}');
    document.writeln('		                ');
    document.writeln('		                            </tableView>');
    document.writeln('		{% } %}');
    document.writeln('		{% if (tempView.viewType == \"collectionView\") { %}');
    document.writeln('		                            <collectionView clipsSubviews=\"YES\" multipleTouchEnabled=\"YES\" contentMode=\"scaleToFill\" fixedFrame=\"YES\" dataMode=\"prototypes\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"{%=tempView.idStr %}\">');
    document.writeln('		                                <rect key=\"frame\" x=\"{%=tempView.x %}\" y=\"{%=tempView.y %}\" width=\"{%=tempView.width %}\" height=\"{%=tempView.height %}\"/>');
    document.writeln('		                                <autoresizingMask key=\"autoresizingMask\" flexibleMaxX=\"YES\" flexibleMaxY=\"YES\"/>');
    document.writeln('		                {% if (tempView.bgColorRed) { %}<color key=\"backgroundColor\" red=\"{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}\" green=\"{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}\" blue=\"{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}\" alpha=\"{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}\" colorSpace=\"calibratedRGB\"/>{% } else { %}<color key=\"backgroundColor\" white=\"0.0\" alpha=\"0.0\" colorSpace=\"custom\" customColorSpace=\"genericGamma22GrayColorSpace\"/>{% } %}');
    document.writeln('		                                <collectionViewFlowLayout key=\"collectionViewLayout\" minimumLineSpacing=\"10\" minimumInteritemSpacing=\"10\" id=\"iud-6I-mZG\">');
    document.writeln('		                                    <size key=\"itemSize\" width=\"50\" height=\"50\"/>');
    document.writeln('		                                    <size key=\"headerReferenceSize\" width=\"0.0\" height=\"0.0\"/>');
    document.writeln('		                                    <size key=\"footerReferenceSize\" width=\"0.0\" height=\"0.0\"/>');
    document.writeln('		                                    <inset key=\"sectionInset\" minX=\"0.0\" minY=\"0.0\" maxX=\"0.0\" maxY=\"0.0\"/>');
    document.writeln('		                                </collectionViewFlowLayout>');
    document.writeln('		                                <cells>');
    document.writeln('		                                    <collectionViewCell opaque=\"NO\" clipsSubviews=\"YES\" multipleTouchEnabled=\"YES\" contentMode=\"center\" id=\"kFT-tQ-qBs\">');
    document.writeln('		                                        <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"50\" height=\"50\"/>');
    document.writeln('		                                        <autoresizingMask key=\"autoresizingMask\" flexibleMaxX=\"YES\" flexibleMaxY=\"YES\"/>');
    document.writeln('		                                        <view key=\"contentView\" opaque=\"NO\" clipsSubviews=\"YES\" multipleTouchEnabled=\"YES\" contentMode=\"center\">');
    document.writeln('		                                            <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"50\" height=\"50\"/>');
    document.writeln('		                                            <autoresizingMask key=\"autoresizingMask\"/>');
    document.writeln('		                                        </view>');
    document.writeln('		                                    </collectionViewCell>');
    document.writeln('		                                </cells>');
    document.writeln('                                        {% if (tempView.border_width) { %}<userDefinedRuntimeAttributes>\n {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderWidth\">\n<integer key=\"value\" value=\"{%=tempView.border_width%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderRadius\">\n<integer key=\"value\" value=\"{%=tempView.border_radius%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.borderColorRed) { %}<userDefinedRuntimeAttribute type=\"color\" keyPath=\"layer.borderUIColor\">\n<color key=\"value\" red=\"{%=tempView.borderColorRed%}\" green=\"{%=tempView.borderColorGreen%}\" blue=\"{%=tempView.borderColorBlue%}\" alpha=\"{%=tempView.borderColorAlpha%}\" colorSpace=\"custom\" customColorSpace=\"sRGB\"/>\n</userDefinedRuntimeAttribute>\n {% } %}</userDefinedRuntimeAttributes>{% } %}');
    document.writeln('		                ');
    document.writeln('		                            </collectionView>');
    document.writeln('		{% } %}');
    document.writeln('		{% if (tempView.viewType == \"stepper\") { %}');
    document.writeln('		                            <stepper opaque=\"NO\" contentMode=\"scaleToFill\" horizontalHuggingPriority=\"750\" verticalHuggingPriority=\"750\" fixedFrame=\"YES\" contentHorizontalAlignment=\"center\" contentVerticalAlignment=\"center\" maximumValue=\"100\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"{%=tempView.idStr %}\">');
    document.writeln('		                                <rect key=\"frame\" x=\"{%=tempView.x %}\" y=\"{%=tempView.y %}\" width=\"94\" height=\"29\"/>');
    document.writeln('		                                <autoresizingMask key=\"autoresizingMask\" flexibleMaxX=\"YES\" flexibleMaxY=\"YES\"/>');
    document.writeln('		                {% if (tempView.bgColorRed) { %}<color key=\"backgroundColor\" red=\"{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}\" green=\"{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}\" blue=\"{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}\" alpha=\"{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}\" colorSpace=\"calibratedRGB\"/>{% } %}');
    document.writeln('                                        {% if (tempView.border_width) { %}<userDefinedRuntimeAttributes>\n {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderWidth\">\n<integer key=\"value\" value=\"{%=tempView.border_width%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderRadius\">\n<integer key=\"value\" value=\"{%=tempView.border_radius%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.borderColorRed) { %}<userDefinedRuntimeAttribute type=\"color\" keyPath=\"layer.borderUIColor\">\n<color key=\"value\" red=\"{%=tempView.borderColorRed%}\" green=\"{%=tempView.borderColorGreen%}\" blue=\"{%=tempView.borderColorBlue%}\" alpha=\"{%=tempView.borderColorAlpha%}\" colorSpace=\"custom\" customColorSpace=\"sRGB\"/>\n</userDefinedRuntimeAttribute>\n {% } %}</userDefinedRuntimeAttributes>{% } %}');
    document.writeln('		                ');
    document.writeln('		                            </stepper>');
    document.writeln('		{% } %}');
    document.writeln('		{% if (tempView.viewType == \"pageControl\") { %}');
    document.writeln('		                            <pageControl opaque=\"NO\" contentMode=\"scaleToFill\" fixedFrame=\"YES\" contentHorizontalAlignment=\"center\" contentVerticalAlignment=\"center\" numberOfPages=\"3\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"{%=tempView.idStr %}\">');
    document.writeln('		                                <rect key=\"frame\" x=\"{%=tempView.x %}\" y=\"{%=tempView.y %}\" width=\"{%=tempView.width %}\" height=\"37\"/>');
    document.writeln('		                                <autoresizingMask key=\"autoresizingMask\" flexibleMaxX=\"YES\" flexibleMaxY=\"YES\"/>');
    document.writeln('		                {% if (tempView.bgColorRed) { %}<color key=\"backgroundColor\" red=\"{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}\" green=\"{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}\" blue=\"{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}\" alpha=\"{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}\" colorSpace=\"calibratedRGB\"/>{% } %}');
    document.writeln('                                        {% if (tempView.border_width) { %}<userDefinedRuntimeAttributes>\n {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderWidth\">\n<integer key=\"value\" value=\"{%=tempView.border_width%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderRadius\">\n<integer key=\"value\" value=\"{%=tempView.border_radius%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.borderColorRed) { %}<userDefinedRuntimeAttribute type=\"color\" keyPath=\"layer.borderUIColor\">\n<color key=\"value\" red=\"{%=tempView.borderColorRed%}\" green=\"{%=tempView.borderColorGreen%}\" blue=\"{%=tempView.borderColorBlue%}\" alpha=\"{%=tempView.borderColorAlpha%}\" colorSpace=\"custom\" customColorSpace=\"sRGB\"/>\n</userDefinedRuntimeAttribute>\n {% } %}</userDefinedRuntimeAttributes>{% } %}');
    document.writeln('		                ');
    document.writeln('		                            </pageControl>');
    document.writeln('		{% } %}');
    document.writeln('		{% if (tempView.viewType == \"pickerView\") { %}');
    document.writeln('		                            <pickerView contentMode=\"scaleToFill\" fixedFrame=\"YES\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"{%=tempView.idStr %}\">');
    document.writeln('		                                <rect key=\"frame\" x=\"{%=tempView.x %}\" y=\"{%=tempView.y %}\" width=\"{%=tempView.width %}\" height=\"{%=tempView.height %}\"/>');
    document.writeln('		                                <autoresizingMask key=\"autoresizingMask\" widthSizable=\"YES\" flexibleMaxY=\"YES\"/>');
    document.writeln('		                {% if (tempView.bgColorRed) { %}<color key=\"backgroundColor\" red=\"{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}\" green=\"{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}\" blue=\"{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}\" alpha=\"{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}\" colorSpace=\"calibratedRGB\"/>{% } %}');
    document.writeln('                                        {% if (tempView.border_width) { %}<userDefinedRuntimeAttributes>\n {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderWidth\">\n<integer key=\"value\" value=\"{%=tempView.border_width%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderRadius\">\n<integer key=\"value\" value=\"{%=tempView.border_radius%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.borderColorRed) { %}<userDefinedRuntimeAttribute type=\"color\" keyPath=\"layer.borderUIColor\">\n<color key=\"value\" red=\"{%=tempView.borderColorRed%}\" green=\"{%=tempView.borderColorGreen%}\" blue=\"{%=tempView.borderColorBlue%}\" alpha=\"{%=tempView.borderColorAlpha%}\" colorSpace=\"custom\" customColorSpace=\"sRGB\"/>\n</userDefinedRuntimeAttribute>\n {% } %}</userDefinedRuntimeAttributes>{% } %}');
    document.writeln('		                ');
    document.writeln('		                            </pickerView>');
    document.writeln('		{% } %}');
    document.writeln('		{% if (tempView.viewType == \"datePicker\") { %}');
    document.writeln('		                            <datePicker contentMode=\"scaleToFill\" fixedFrame=\"YES\" contentHorizontalAlignment=\"center\" contentVerticalAlignment=\"center\" datePickerMode=\"dateAndTime\" minuteInterval=\"1\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"{%=tempView.idStr %}\">');
    document.writeln('		                                <rect key=\"frame\" x=\"{%=tempView.x %}\" y=\"{%=tempView.y %}\" width=\"{%=tempView.width %}\" height=\"{%=tempView.height %}\"/>');
    document.writeln('		                                <autoresizingMask key=\"autoresizingMask\" widthSizable=\"YES\" flexibleMaxY=\"YES\"/>');
    document.writeln('		                {% if (tempView.bgColorRed) { %}<color key=\"backgroundColor\" red=\"{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}\" green=\"{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}\" blue=\"{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}\" alpha=\"{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}\" colorSpace=\"calibratedRGB\"/>{% } %}');
    document.writeln('		                                <date key=\"date\" timeIntervalSinceReferenceDate=\"524554937.78742898\">');
    document.writeln('		                                    <!--2017-08-16 05:42:17 +0000-->');
    document.writeln('		                                </date>');
    document.writeln('                                        {% if (tempView.border_width) { %}<userDefinedRuntimeAttributes>\n {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderWidth\">\n<integer key=\"value\" value=\"{%=tempView.border_width%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderRadius\">\n<integer key=\"value\" value=\"{%=tempView.border_radius%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.borderColorRed) { %}<userDefinedRuntimeAttribute type=\"color\" keyPath=\"layer.borderUIColor\">\n<color key=\"value\" red=\"{%=tempView.borderColorRed%}\" green=\"{%=tempView.borderColorGreen%}\" blue=\"{%=tempView.borderColorBlue%}\" alpha=\"{%=tempView.borderColorAlpha%}\" colorSpace=\"custom\" customColorSpace=\"sRGB\"/>\n</userDefinedRuntimeAttribute>\n {% } %}</userDefinedRuntimeAttributes>{% } %}');
    document.writeln('		                ');
    document.writeln('		                            </datePicker>');
    document.writeln('		{% } %}');
    document.writeln('		{% if (tempView.viewType == \"mapView\") { %}');
    document.writeln('		                            <mapView clipsSubviews=\"YES\" multipleTouchEnabled=\"YES\" contentMode=\"scaleToFill\" fixedFrame=\"YES\" mapType=\"standard\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"{%=tempView.idStr %}\">');
    document.writeln('		                                <rect key=\"frame\" x=\"{%=tempView.x %}\" y=\"{%=tempView.y %}\" width=\"{%=tempView.width %}\" height=\"{%=tempView.height %}\"/>');
    document.writeln('		                                <autoresizingMask key=\"autoresizingMask\" flexibleMaxX=\"YES\" flexibleMaxY=\"YES\"/>');
    document.writeln('		                {% if (tempView.bgColorRed) { %}<color key=\"backgroundColor\" red=\"{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}\" green=\"{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}\" blue=\"{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}\" alpha=\"{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}\" colorSpace=\"calibratedRGB\"/>{% } %}');
    document.writeln('                                        {% if (tempView.border_width) { %}<userDefinedRuntimeAttributes>\n {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderWidth\">\n<integer key=\"value\" value=\"{%=tempView.border_width%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderRadius\">\n<integer key=\"value\" value=\"{%=tempView.border_radius%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.borderColorRed) { %}<userDefinedRuntimeAttribute type=\"color\" keyPath=\"layer.borderUIColor\">\n<color key=\"value\" red=\"{%=tempView.borderColorRed%}\" green=\"{%=tempView.borderColorGreen%}\" blue=\"{%=tempView.borderColorBlue%}\" alpha=\"{%=tempView.borderColorAlpha%}\" colorSpace=\"custom\" customColorSpace=\"sRGB\"/>\n</userDefinedRuntimeAttribute>\n {% } %}</userDefinedRuntimeAttributes>{% } %}');
    document.writeln('		                ');
    document.writeln('		                            </mapView>');
    document.writeln('		{% } %}');
    document.writeln('		{% if (tempView.viewType == \"searchBar\") { %}');
    document.writeln('		                            <searchBar contentMode=\"redraw\" fixedFrame=\"YES\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"{%=tempView.idStr %}\">');
    document.writeln('		                                <rect key=\"frame\" x=\"{%=tempView.x %}\" y=\"{%=tempView.y %}\" width=\"{%=tempView.width %}\" height=\"44\"/>');
    document.writeln('		                                <autoresizingMask key=\"autoresizingMask\" widthSizable=\"YES\" flexibleMaxY=\"YES\"/>');
    document.writeln('		                {% if (tempView.bgColorRed) { %}<color key=\"backgroundColor\" red=\"{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}\" green=\"{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}\" blue=\"{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}\" alpha=\"{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}\" colorSpace=\"calibratedRGB\"/>{% } %}');
    document.writeln('		                                <textInputTraits key=\"textInputTraits\"/>');
    document.writeln('                                        {% if (tempView.border_width) { %}<userDefinedRuntimeAttributes>\n {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderWidth\">\n<integer key=\"value\" value=\"{%=tempView.border_width%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderRadius\">\n<integer key=\"value\" value=\"{%=tempView.border_radius%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.borderColorRed) { %}<userDefinedRuntimeAttribute type=\"color\" keyPath=\"layer.borderUIColor\">\n<color key=\"value\" red=\"{%=tempView.borderColorRed%}\" green=\"{%=tempView.borderColorGreen%}\" blue=\"{%=tempView.borderColorBlue%}\" alpha=\"{%=tempView.borderColorAlpha%}\" colorSpace=\"custom\" customColorSpace=\"sRGB\"/>\n</userDefinedRuntimeAttribute>\n {% } %}</userDefinedRuntimeAttributes>{% } %}');
    document.writeln('		                ');
    document.writeln('		                            </searchBar>');
    document.writeln('		{% } %}');
    document.writeln('		{% if (tempView.viewType == \"webView\") { %}');
    document.writeln('		                            <webView contentMode=\"scaleToFill\" fixedFrame=\"YES\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"{%=tempView.idStr %}\">');
    document.writeln('		                                <rect key=\"frame\" x=\"{%=tempView.x %}\" y=\"{%=tempView.y %}\" width=\"{%=tempView.width %}\" height=\"{%=tempView.height %}\"/>');
    document.writeln('		                                <autoresizingMask key=\"autoresizingMask\" flexibleMaxX=\"YES\" flexibleMaxY=\"YES\"/>');
    document.writeln('		                {% if (tempView.bgColorRed) { %}<color key=\"backgroundColor\" red=\"{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}\" green=\"{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}\" blue=\"{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}\" alpha=\"{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}\" colorSpace=\"calibratedRGB\"/>{% } else { %}<color key=\"backgroundColor\" red=\"0.36078431370000003\" green=\"0.38823529410000002\" blue=\"0.4039215686\" alpha=\"1\" colorSpace=\"custom\" customColorSpace=\"sRGB\"/>{% } %}');
    document.writeln('                                        {% if (tempView.border_width) { %}<userDefinedRuntimeAttributes>\n {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderWidth\">\n<integer key=\"value\" value=\"{%=tempView.border_width%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderRadius\">\n<integer key=\"value\" value=\"{%=tempView.border_radius%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.borderColorRed) { %}<userDefinedRuntimeAttribute type=\"color\" keyPath=\"layer.borderUIColor\">\n<color key=\"value\" red=\"{%=tempView.borderColorRed%}\" green=\"{%=tempView.borderColorGreen%}\" blue=\"{%=tempView.borderColorBlue%}\" alpha=\"{%=tempView.borderColorAlpha%}\" colorSpace=\"custom\" customColorSpace=\"sRGB\"/>\n</userDefinedRuntimeAttribute>\n {% } %}</userDefinedRuntimeAttributes>{% } %}');
    document.writeln('		                ');
    document.writeln('		                            </webView>');
    document.writeln('		{% } %}');
    document.writeln('		{% if (tempView.viewType == \"slider\") { %}');
    document.writeln('		                            <slider opaque=\"NO\" contentMode=\"scaleToFill\" fixedFrame=\"YES\" contentHorizontalAlignment=\"center\" contentVerticalAlignment=\"center\" value=\"0.5\" minValue=\"0.0\" maxValue=\"1\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"{%=tempView.idStr %}\">');
    document.writeln('		                                <rect key=\"frame\" x=\"{%=tempView.x %}\" y=\"31\" width=\"{%=tempView.width %}\" height=\"{%=tempView.height %}\"/>');
    document.writeln('		                                <autoresizingMask key=\"autoresizingMask\" flexibleMaxX=\"YES\" flexibleMaxY=\"YES\"/>');
    document.writeln('		                {% if (tempView.bgColorRed) { %}<color key=\"backgroundColor\" red=\"{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}\" green=\"{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}\" blue=\"{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}\" alpha=\"{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}\" colorSpace=\"calibratedRGB\"/>{% } %}');
    document.writeln('                                        {% if (tempView.border_width) { %}<userDefinedRuntimeAttributes>\n {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderWidth\">\n<integer key=\"value\" value=\"{%=tempView.border_width%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderRadius\">\n<integer key=\"value\" value=\"{%=tempView.border_radius%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.borderColorRed) { %}<userDefinedRuntimeAttribute type=\"color\" keyPath=\"layer.borderUIColor\">\n<color key=\"value\" red=\"{%=tempView.borderColorRed%}\" green=\"{%=tempView.borderColorGreen%}\" blue=\"{%=tempView.borderColorBlue%}\" alpha=\"{%=tempView.borderColorAlpha%}\" colorSpace=\"custom\" customColorSpace=\"sRGB\"/>\n</userDefinedRuntimeAttribute>\n {% } %}</userDefinedRuntimeAttributes>{% } %}');
    document.writeln('		                ');
    document.writeln('		                            </slider>');
    document.writeln('		{% } %}');
    document.writeln('		{% if (tempView.viewType == \"view\") { %}');
    document.writeln('		                        <view contentMode=\"scaleToFill\" fixedFrame=\"YES\" translatesAutoresizingMaskIntoConstraints=\"NO\" id=\"{%=tempView.idStr %}\">');
    document.writeln('		                            <rect key=\"frame\" x=\"{%=tempView.x %}\" y=\"{%=tempView.y %}\" width=\"{%=tempView.width %}\" height=\"{%=tempView.height %}\"/>');
    document.writeln('		                            <autoresizingMask key=\"autoresizingMask\" flexibleMaxX=\"YES\" flexibleMaxY=\"YES\"/>');
    document.writeln('                                    {% if (tempView.bgColorRed) { %} <color key=\"backgroundColor\" red=\"{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}\" green=\"{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}\" blue=\"{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}\" alpha=\"{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}\" colorSpace=\"calibratedRGB\"/> {% } else { %} <color key=\"backgroundColor\" white=\"0.0\" alpha=\"0.0\" colorSpace=\"custom\" customColorSpace=\"genericGamma22GrayColorSpace\"/> {% } %}');
    document.writeln('                                    {% if (tempView.border_width) { %}<userDefinedRuntimeAttributes>\n {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderWidth\">\n<integer key=\"value\" value=\"{%=tempView.border_width%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.border_width) { %}<userDefinedRuntimeAttribute type=\"number\" keyPath=\"layer.borderRadius\">\n<integer key=\"value\" value=\"{%=tempView.border_radius%}\"/>\n</userDefinedRuntimeAttribute>\n {% } %} {% if (tempView.borderColorRed) { %}<userDefinedRuntimeAttribute type=\"color\" keyPath=\"layer.borderUIColor\">\n<color key=\"value\" red=\"{%=tempView.borderColorRed%}\" green=\"{%=tempView.borderColorGreen%}\" blue=\"{%=tempView.borderColorBlue%}\" alpha=\"{%=tempView.borderColorAlpha%}\" colorSpace=\"custom\" customColorSpace=\"sRGB\"/>\n</userDefinedRuntimeAttribute>\n {% } %}</userDefinedRuntimeAttributes>{% } %}');
    document.writeln('		                            ');
    document.writeln('		                            {% if (tempView.views) { %}');
    document.writeln('		                            {% var templateViewsValue = document.getElementById(\"tmpl-ios-views\").innerHTML;var map = {};map[\"root\"] = tempView.views; var ret = tmpl(templateViewsValue, map); %}');
    document.writeln('		                            {% if(ret) { %}');
    document.writeln('		                            {%=ret%}');
    document.writeln('		                            {% } %}');
    document.writeln('		                            {% } %}');
    document.writeln('		                        </view>');
    document.writeln('		{% } %}');
    document.writeln('		        ');
    document.writeln('		{% } %}');
    document.writeln('		                    </subviews>');
    document.writeln('			</script>');

})(this);

//------------------- iOS模板 模块 -------------------






//------------------- iOS代码 模块 -------------------

;(function () {

    document.writeln('<script type=\"text/x-tmpl\" id=\"tmpl-ios-code-views\">');
    document.writeln('');
    document.writeln('  		{% for (var i=0; i<o.root.length; i++) { %}');
    document.writeln('  		{% var tempView = o.root[i]; %}');
    document.writeln('  		{% var fatherView = o[\"fatherView\"]; %}');
    document.writeln('');
    document.writeln('  		{% if (tempView.viewType == \"label\") { %}');
    document.writeln('									UILabel *{%=tempView.defineName %} = ({');
    document.writeln('										UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake({%=tempView.x %}, {%=tempView.y %}, {%=tempView.width %}, {%=tempView.height %})];');
    document.writeln('										{% if (tempView.text) { %}label.text = @\"{%=tempView.text %}\";{% } %}');
    document.writeln('										label.font = {% if (tempView.font_family) { %}[UIFont fontWithName:@\"{%=tempView.font_family %}\" size:{% if (tempView.font) { %}{%=tempView.font %}{% } else { %}14{% } %}];{% } else { %}[UIFont systemFontSize:{% if (tempView.font) { %}{%=tempView.font %}{% } else { %}14{% } %}];{% } %}');
    document.writeln('										{% if (tempView.align) { %}');
    document.writeln('										{% if (tempView.align == \"default\") { %}label.textAlignment = NSTextAlignmentLeft;{% } %}');
    document.writeln('										{% if (tempView.align == \"left\") { %}label.textAlignment = NSTextAlignmentLeft;{% } %}');
    document.writeln('										{% if (tempView.align == \"right\") { %}label.textAlignment = NSTextAlignmentRight;{% } %}');
    document.writeln('										{% if (tempView.align == \"center\") { %}label.textAlignment = NSTextAlignmentCenter;{% } %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.textColor) { %}');
    document.writeln('										label.textColor = [UIColor colorWithRed:{% if (tempView.textColorRed) { %}{%=tempView.textColorRed %}{% } else { %}1{% } %} green:{% if (tempView.textColorGreen) { %}{%=tempView.textColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.textColorBlue) { %}{%=tempView.textColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.textColorAlpha) { %}{%=tempView.textColorAlpha %}{% } else { %}1{% } %}];//{%=tempView.textColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										label.backgroundColor = [UIColor colorWithRed:{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %} green:{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}];//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}label.layer.cornerRadius = {%=tempView.border_radius%};{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}label.layer.borderColor = [[UIColor colorWithRed:{% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %} green:{% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}] CGColor];//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}label.layer.borderWidth = {%=tempView.border_width%};{% } %}');
    document.writeln('										label.layer.masksToBounds = YES;');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} [{%=fatherView %} addSubview:label]; {% } %}');
    document.writeln('										label;');
    document.writeln('									});');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"switch\") { %}');
    document.writeln('  									UISwitch *{%=tempView.defineName %} = ({');
    document.writeln('										UISwitch *switch = [[UISwitch alloc] initWithFrame:CGRectMake({%=tempView.x %}, {%=tempView.y %}, {%=tempView.width %}, {%=tempView.height %})];');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										switch.backgroundColor = [UIColor colorWithRed:{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %} green:{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}];//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}switch.layer.cornerRadius = {%=tempView.border_radius%};{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}switch.layer.borderColor = [[UIColor colorWithRed:{% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %} green:{% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}] CGColor];//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}switch.layer.borderWidth = {%=tempView.border_width%};{% } %}');
    document.writeln('										switch.layer.masksToBounds = YES;');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} [{%=fatherView %} addSubview:switch]; {% } %}');
    document.writeln('										switch;');
    document.writeln('									});');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"scrollView\") { %}');
    document.writeln('  									UIScrollView *{%=tempView.defineName %} = ({');
    document.writeln('										UIScrollView *scrollView = [[UIScrollView alloc] initWithFrame:CGRectMake({%=tempView.x %}, {%=tempView.y %}, {%=tempView.width %}, {%=tempView.height %})];');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										scrollView.backgroundColor = [UIColor colorWithRed:{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %} green:{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}];//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}scrollView.layer.cornerRadius = {%=tempView.border_radius%};{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}scrollView.layer.borderColor = [[UIColor colorWithRed:{% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %} green:{% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}] CGColor];//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}scrollView.layer.borderWidth = {%=tempView.border_width%};{% } %}');
    document.writeln('										scrollView.layer.masksToBounds = YES;');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} [{%=fatherView %} addSubview:scrollView]; {% } %}');
    document.writeln('										scrollView;');
    document.writeln('									});');
    document.writeln('									{% if (tempView.views) { %}');
    document.writeln('  		                            {% var templateViewsValue = document.getElementById(\"tmpl-ios-code-views\").innerHTML;var map = {};map[\"root\"] = tempView.views;map[\"fatherView\"] = tempView.defineName; var ret = tmpl(templateViewsValue, map); %}');
    document.writeln('  		                            {% if(ret) { %}');
    document.writeln('  		                            {%=ret%}');
    document.writeln('  		                            {% } %}');
    document.writeln('  		                            {% } %}');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"textField\") { %}');
    document.writeln('  									UITextField *{%=tempView.defineName %} = ({');
    document.writeln('										UITextField *textField = [[UITextField alloc] initWithFrame:CGRectMake({%=tempView.x %}, {%=tempView.y %}, {%=tempView.width %}, {%=tempView.height %})];');
    document.writeln('										{% if (tempView.text) { %}textField.text = @\"{%=tempView.text %}\";{% } %}');
    document.writeln('										textField.font = {% if (tempView.font_family) { %}[UIFont fontWithName:@\"{%=tempView.font_family %}\" size:{% if (tempView.font) { %}{%=tempView.font %}{% } else { %}14{% } %}];{% } else { %}[UIFont systemFontSize:{% if (tempView.font) { %}{%=tempView.font %}{% } else { %}14{% } %}];{% } %}');
    document.writeln('										{% if (tempView.align) { %}');
    document.writeln('										{% if (tempView.align == \"default\") { %}textField.textAlignment = NSTextAlignmentLeft;{% } %}');
    document.writeln('										{% if (tempView.align == \"left\") { %}textField.textAlignment = NSTextAlignmentLeft;{% } %}');
    document.writeln('										{% if (tempView.align == \"right\") { %}textField.textAlignment = NSTextAlignmentRight;{% } %}');
    document.writeln('										{% if (tempView.align == \"center\") { %}textField.textAlignment = NSTextAlignmentCenter;{% } %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.textColor) { %}');
    document.writeln('										textField.textColor = [UIColor colorWithRed:{% if (tempView.textColorRed) { %}{%=tempView.textColorRed %}{% } else { %}1{% } %} green:{% if (tempView.textColorGreen) { %}{%=tempView.textColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.textColorBlue) { %}{%=tempView.textColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.textColorAlpha) { %}{%=tempView.textColorAlpha %}{% } else { %}1{% } %}];//{%=tempView.textColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										textField.backgroundColor = [UIColor colorWithRed:{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %} green:{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}];//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}textField.layer.cornerRadius = {%=tempView.border_radius%};{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}textField.layer.borderColor = [[UIColor colorWithRed:{% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %} green:{% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}] CGColor];//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}textField.layer.borderWidth = {%=tempView.border_width%};{% } %}');
    document.writeln('										textField.layer.masksToBounds = YES;');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} [{%=fatherView %} addSubview:textField]; {% } %}');
    document.writeln('										textField;');
    document.writeln('									});');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"textView\") { %}');
    document.writeln('  									UITextView *{%=tempView.defineName %} = ({');
    document.writeln('										UITextView *textView = [[UITextView alloc] initWithFrame:CGRectMake({%=tempView.x %}, {%=tempView.y %}, {%=tempView.width %}, {%=tempView.height %})];');
    document.writeln('										{% if (tempView.text) { %}textView.text = @\"{%=tempView.text %}\";{% } %}');
    document.writeln('										textView.font = {% if (tempView.font_family) { %}[UIFont fontWithName:@\"{%=tempView.font_family %}\" size:{% if (tempView.font) { %}{%=tempView.font %}{% } else { %}14{% } %}];{% } else { %}[UIFont systemFontSize:{% if (tempView.font) { %}{%=tempView.font %}{% } else { %}14{% } %}];{% } %}');
    document.writeln('										{% if (tempView.align) { %}');
    document.writeln('										{% if (tempView.align == \"default\") { %}textView.textAlignment = NSTextAlignmentLeft;{% } %}');
    document.writeln('										{% if (tempView.align == \"left\") { %}textView.textAlignment = NSTextAlignmentLeft;{% } %}');
    document.writeln('										{% if (tempView.align == \"right\") { %}textView.textAlignment = NSTextAlignmentRight;{% } %}');
    document.writeln('										{% if (tempView.align == \"center\") { %}textView.textAlignment = NSTextAlignmentCenter;{% } %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.textColor) { %}');
    document.writeln('										textView.textColor = [UIColor colorWithRed:{% if (tempView.textColorRed) { %}{%=tempView.textColorRed %}{% } else { %}1{% } %} green:{% if (tempView.textColorGreen) { %}{%=tempView.textColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.textColorBlue) { %}{%=tempView.textColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.textColorAlpha) { %}{%=tempView.textColorAlpha %}{% } else { %}1{% } %}];//{%=tempView.textColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										textView.backgroundColor = [UIColor colorWithRed:{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %} green:{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}];//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}textView.layer.cornerRadius = {%=tempView.border_radius%};{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}textView.layer.borderColor = [[UIColor colorWithRed:{% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %} green:{% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}] CGColor];//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}textView.layer.borderWidth = {%=tempView.border_width%};{% } %}');
    document.writeln('										textView.layer.masksToBounds = YES;');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} [{%=fatherView %} addSubview:textView]; {% } %}');
    document.writeln('										textView;');
    document.writeln('									});');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"imageView\") { %}');
    document.writeln('  									UIImageView *{%=tempView.defineName %} = ({');
    document.writeln('										UIImageView *imageView = [[UIImageView alloc] initWithFrame:CGRectMake({%=tempView.x %}, {%=tempView.y %}, {%=tempView.width %}, {%=tempView.height %})];');
    document.writeln('										{% if (tempView.image) { %}imageView.image = [UIImage imageNamed:@\"{%=tempView.image %}\"];{% } %}');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										imageView.backgroundColor = [UIColor colorWithRed:{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %} green:{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}];//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}imageView.layer.cornerRadius = {%=tempView.border_radius%};{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}imageView.layer.borderColor = [[UIColor colorWithRed:{% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %} green:{% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}] CGColor];//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}imageView.layer.borderWidth = {%=tempView.border_width%};{% } %}');
    document.writeln('										imageView.layer.masksToBounds = YES;');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} [{%=fatherView %} addSubview:imageView]; {% } %}');
    document.writeln('										imageView;');
    document.writeln('									});');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"activityIndicatorView\") { %}');
    document.writeln('  									UIActivityIndicatorView *{%=tempView.defineName %} = ({');
    document.writeln('										UIActivityIndicatorView *activityIndicatorView = [[UIActivityIndicatorView alloc] initWithFrame:CGRectMake({%=tempView.x %}, {%=tempView.y %}, {%=tempView.width %}, {%=tempView.height %})];');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										activityIndicatorView.backgroundColor = [UIColor colorWithRed:{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %} green:{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}];//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}activityIndicatorView.layer.cornerRadius = {%=tempView.border_radius%};{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}activityIndicatorView.layer.borderColor = [[UIColor colorWithRed:{% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %} green:{% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}] CGColor];//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}activityIndicatorView.layer.borderWidth = {%=tempView.border_width%};{% } %}');
    document.writeln('										activityIndicatorView.layer.masksToBounds = YES;');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} [{%=fatherView %} addSubview:activityIndicatorView]; {% } %}');
    document.writeln('										activityIndicatorView;');
    document.writeln('									});');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"button\") { %}');
    document.writeln('  									UIButton *{%=tempView.defineName %} = ({');
    document.writeln('  										UIButton *button = [UIButton buttonWithType:UIButtonTypeSystem];');
    document.writeln('										button.frame = CGRectMake({%=tempView.x %}, {%=tempView.y %}, {%=tempView.width %}, {%=tempView.height %});');
    document.writeln('										{% if (tempView.text) { %}[button setTitle:@\"{%=tempView.text %}\" forState:UIControlStateNormal];{% } %}');
    document.writeln('										button.titleLabel.font = {% if (tempView.font_family) { %}[UIFont fontWithName:@\"{%=tempView.font_family %}\" size:{% if (tempView.font) { %}{%=tempView.font %}{% } else { %}14{% } %}];{% } else { %}[UIFont systemFontSize:{% if (tempView.font) { %}{%=tempView.font %}{% } else { %}14{% } %}];{% } %}');
    document.writeln('										{% if (tempView.align) { %}');
    document.writeln('										{% if (tempView.align == \"default\") { %}button.titleLabel.textAlignment = NSTextAlignmentLeft;{% } %}');
    document.writeln('										{% if (tempView.align == \"left\") { %}button.titleLabel.textAlignment = NSTextAlignmentLeft;{% } %}');
    document.writeln('										{% if (tempView.align == \"right\") { %}button.titleLabel.textAlignment = NSTextAlignmentRight;{% } %}');
    document.writeln('										{% if (tempView.align == \"center\") { %}button.titleLabel.textAlignment = NSTextAlignmentCenter;{% } %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.textColor) { %}');
    document.writeln('										[button setTitleColor:[UIColor colorWithRed:{% if (tempView.textColorRed) { %}{%=tempView.textColorRed %}{% } else { %}1{% } %} green:{% if (tempView.textColorGreen) { %}{%=tempView.textColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.textColorBlue) { %}{%=tempView.textColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.textColorAlpha) { %}{%=tempView.textColorAlpha %}{% } else { %}1{% } %}]; forState:UIControlStateNormal];//{%=tempView.textColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										button.backgroundColor = [UIColor colorWithRed:{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %} green:{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}];//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}button.layer.cornerRadius = {%=tempView.border_radius%};{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}button.layer.borderColor = [[UIColor colorWithRed:{% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %} green:{% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}] CGColor];//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}button.layer.borderWidth = {%=tempView.border_width%};{% } %}');
    document.writeln('										button.layer.masksToBounds = YES;');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} [{%=fatherView %} addSubview:button]; {% } %}');
    document.writeln('										button;');
    document.writeln('									});');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"progressView\") { %}');
    document.writeln('  		                            UIProgressView *{%=tempView.defineName %} = ({');
    document.writeln('										UIProgressView *progressView = [[UIProgressView alloc] initWithFrame:CGRectMake({%=tempView.x %}, {%=tempView.y %}, {%=tempView.width %}, {%=tempView.height %})];');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										progressView.backgroundColor = [UIColor colorWithRed:{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %} green:{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}];//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}progressView.layer.cornerRadius = {%=tempView.border_radius%};{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}progressView.layer.borderColor = [[UIColor colorWithRed:{% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %} green:{% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}] CGColor];//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}progressView.layer.borderWidth = {%=tempView.border_width%};{% } %}');
    document.writeln('										progressView.layer.masksToBounds = YES;');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} [{%=fatherView %} addSubview:progressView]; {% } %}');
    document.writeln('										progressView;');
    document.writeln('									});');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"tableView\") { %}');
    document.writeln('  		                            UITableView *{%=tempView.defineName %} = ({');
    document.writeln('										UITableView *tableView = [[UITableView alloc] initWithFrame:CGRectMake({%=tempView.x %}, {%=tempView.y %}, {%=tempView.width %}, {%=tempView.height %})];');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										tableView.backgroundColor = [UIColor colorWithRed:{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %} green:{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}];//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}tableView.layer.cornerRadius = {%=tempView.border_radius%};{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}tableView.layer.borderColor = [[UIColor colorWithRed:{% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %} green:{% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}] CGColor];//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}tableView.layer.borderWidth = {%=tempView.border_width%};{% } %}');
    document.writeln('										tableView.layer.masksToBounds = YES;');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} [{%=fatherView %} addSubview:tableView]; {% } %}');
    document.writeln('										tableView;');
    document.writeln('									});');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"collectionView\") { %}');
    document.writeln('  		                            UICollectionView *{%=tempView.defineName %} = ({');
    document.writeln('										UICollectionView *collectionView = [[UICollectionView alloc] initWithFrame:CGRectMake({%=tempView.x %}, {%=tempView.y %}, {%=tempView.width %}, {%=tempView.height %})];');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										collectionView.backgroundColor = [UIColor colorWithRed:{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %} green:{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}];//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}collectionView.layer.cornerRadius = {%=tempView.border_radius%};{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}collectionView.layer.borderColor = [[UIColor colorWithRed:{% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %} green:{% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}] CGColor];//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}collectionView.layer.borderWidth = {%=tempView.border_width%};{% } %}');
    document.writeln('										collectionView.layer.masksToBounds = YES;');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} [{%=fatherView %} addSubview:collectionView]; {% } %}');
    document.writeln('										collectionView;');
    document.writeln('									});');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"stepper\") { %}');
    document.writeln('  		                            UIStepper *{%=tempView.defineName %} = ({');
    document.writeln('										UIStepper *stepper = [[UIStepper alloc] initWithFrame:CGRectMake({%=tempView.x %}, {%=tempView.y %}, {%=tempView.width %}, {%=tempView.height %})];');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										stepper.backgroundColor = [UIColor colorWithRed:{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %} green:{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}];//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}stepper.layer.cornerRadius = {%=tempView.border_radius%};{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}stepper.layer.borderColor = [[UIColor colorWithRed:{% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %} green:{% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}] CGColor];//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}stepper.layer.borderWidth = {%=tempView.border_width%};{% } %}');
    document.writeln('										stepper.layer.masksToBounds = YES;');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} [{%=fatherView %} addSubview:stepper]; {% } %}');
    document.writeln('										stepper;');
    document.writeln('									});');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"pageControl\") { %}');
    document.writeln('  		                            UIPageControl *{%=tempView.defineName %} = ({');
    document.writeln('										UIPageControl *pageControl = [[UIPageControl alloc] initWithFrame:CGRectMake({%=tempView.x %}, {%=tempView.y %}, {%=tempView.width %}, {%=tempView.height %})];');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										pageControl.backgroundColor = [UIColor colorWithRed:{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %} green:{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}];//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}pageControl.layer.cornerRadius = {%=tempView.border_radius%};{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}pageControl.layer.borderColor = [[UIColor colorWithRed:{% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %} green:{% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}] CGColor];//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}pageControl.layer.borderWidth = {%=tempView.border_width%};{% } %}');
    document.writeln('										pageControl.layer.masksToBounds = YES;');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} [{%=fatherView %} addSubview:pageControl]; {% } %}');
    document.writeln('										pageControl;');
    document.writeln('									});');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"pickerView\") { %}');
    document.writeln('  		                            UIPickerView *{%=tempView.defineName %} = ({');
    document.writeln('										UIPickerView *pickerView = [[UIPickerView alloc] initWithFrame:CGRectMake({%=tempView.x %}, {%=tempView.y %}, {%=tempView.width %}, {%=tempView.height %})];');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										pickerView.backgroundColor = [UIColor colorWithRed:{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %} green:{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}];//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}pickerView.layer.cornerRadius = {%=tempView.border_radius%};{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}pickerView.layer.borderColor = [[UIColor colorWithRed:{% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %} green:{% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}] CGColor];//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}pickerView.layer.borderWidth = {%=tempView.border_width%};{% } %}');
    document.writeln('										pickerView.layer.masksToBounds = YES;');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} [{%=fatherView %} addSubview:pickerView]; {% } %}');
    document.writeln('										pickerView;');
    document.writeln('									});');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"datePicker\") { %}');
    document.writeln('  		                            UIDatePicker *{%=tempView.defineName %} = ({');
    document.writeln('										UIDatePicker *datePicker = [[UIDatePicker alloc] initWithFrame:CGRectMake({%=tempView.x %}, {%=tempView.y %}, {%=tempView.width %}, {%=tempView.height %})];');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										datePicker.backgroundColor = [UIColor colorWithRed:{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %} green:{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}];//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}datePicker.layer.cornerRadius = {%=tempView.border_radius%};{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}datePicker.layer.borderColor = [[UIColor colorWithRed:{% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %} green:{% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}] CGColor];//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}datePicker.layer.borderWidth = {%=tempView.border_width%};{% } %}');
    document.writeln('										datePicker.layer.masksToBounds = YES;');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} [{%=fatherView %} addSubview:datePicker]; {% } %}');
    document.writeln('										datePicker;');
    document.writeln('									});');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"mapView\") { %}');
    document.writeln('  		                            UIMapView *{%=tempView.defineName %} = ({');
    document.writeln('										UIMapView *mapView = [[UIMapView alloc] initWithFrame:CGRectMake({%=tempView.x %}, {%=tempView.y %}, {%=tempView.width %}, {%=tempView.height %})];');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										mapView.backgroundColor = [UIColor colorWithRed:{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %} green:{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}];//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}mapView.layer.cornerRadius = {%=tempView.border_radius%};{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}mapView.layer.borderColor = [[UIColor colorWithRed:{% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %} green:{% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}] CGColor];//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}mapView.layer.borderWidth = {%=tempView.border_width%};{% } %}');
    document.writeln('										mapView.layer.masksToBounds = YES;');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} [{%=fatherView %} addSubview:mapView]; {% } %}');
    document.writeln('										mapView;');
    document.writeln('									});');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"searchBar\") { %}');
    document.writeln('  		                            UISearchBar *{%=tempView.defineName %} = ({');
    document.writeln('										UISearchBar *searchBar = [[UISearchBar alloc] initWithFrame:CGRectMake({%=tempView.x %}, {%=tempView.y %}, {%=tempView.width %}, {%=tempView.height %})];');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										searchBar.backgroundColor = [UIColor colorWithRed:{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %} green:{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}];//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}searchBar.layer.cornerRadius = {%=tempView.border_radius%};{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}searchBar.layer.borderColor = [[UIColor colorWithRed:{% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %} green:{% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}] CGColor];//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}searchBar.layer.borderWidth = {%=tempView.border_width%};{% } %}');
    document.writeln('										searchBar.layer.masksToBounds = YES;');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} [{%=fatherView %} addSubview:searchBar]; {% } %}');
    document.writeln('										searchBar;');
    document.writeln('									});');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"webView\") { %}');
    document.writeln('  		                            WKWebView *{%=tempView.defineName %} = ({');
    document.writeln('										WKWebView *webView = [[WKWebView alloc] initWithFrame:CGRectMake({%=tempView.x %}, {%=tempView.y %}, {%=tempView.width %}, {%=tempView.height %})];');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										webView.backgroundColor = [UIColor colorWithRed:{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %} green:{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}];//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}webView.layer.cornerRadius = {%=tempView.border_radius%};{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}webView.layer.borderColor = [[UIColor colorWithRed:{% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %} green:{% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}] CGColor];//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}webView.layer.borderWidth = {%=tempView.border_width%};{% } %}');
    document.writeln('										webView.layer.masksToBounds = YES;');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} [{%=fatherView %} addSubview:webView]; {% } %}');
    document.writeln('										webView;');
    document.writeln('									});');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"slider\") { %}');
    document.writeln('  		                            UISlider *{%=tempView.defineName %} = ({');
    document.writeln('										UISlider *slider = [[UISlider alloc] initWithFrame:CGRectMake({%=tempView.x %}, {%=tempView.y %}, {%=tempView.width %}, {%=tempView.height %})];');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										slider.backgroundColor = [UIColor colorWithRed:{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %} green:{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}];//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}slider.layer.cornerRadius = {%=tempView.border_radius%};{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}slider.layer.borderColor = [[UIColor colorWithRed:{% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %} green:{% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}] CGColor];//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}slider.layer.borderWidth = {%=tempView.border_width%};{% } %}');
    document.writeln('										slider.layer.masksToBounds = YES;');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} [{%=fatherView %} addSubview:slider]; {% } %}');
    document.writeln('										slider;');
    document.writeln('									});');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"view\") { %}');
    document.writeln('  								UIView *{%=tempView.defineName %} = ({');
    document.writeln('										UIView *view = [[UIView alloc] initWithFrame:CGRectMake({%=tempView.x %}, {%=tempView.y %}, {%=tempView.width %}, {%=tempView.height %})];');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										view.backgroundColor = [UIColor colorWithRed:{% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %} green:{% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %}];//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}view.layer.cornerRadius = {%=tempView.border_radius%};{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}view.layer.borderColor = [[UIColor colorWithRed:{% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %} green:{% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %} blue:{% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %} alpha:{% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}] CGColor];//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}view.layer.borderWidth = {%=tempView.border_width%};{% } %}');
    document.writeln('										view.layer.masksToBounds = YES;');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} [{%=fatherView %} addSubview:view]; {% } %}');
    document.writeln('										view;');
    document.writeln('									});');
    document.writeln('  		                        {% if (tempView.views) { %}');
    document.writeln('  		                            {% var templateViewsValue = document.getElementById(\"tmpl-ios-code-views\").innerHTML;var map = {};map[\"root\"] = tempView.views;map[\"fatherView\"] = tempView.defineName; var ret = tmpl(templateViewsValue, map); %}');
    document.writeln('  		                            {% if(ret) { %}');
    document.writeln('  		                            {%=ret%}');
    document.writeln('  		                            {% } %}');
    document.writeln('  		                            {% } %}');
    document.writeln('  		{% } %}');
    document.writeln('  		{% } %}');
    document.writeln('  			</script>');
    document.writeln('		<!-- 模板数据View -->');

})(this);

//------------------- iOS代码模板 模块 -------------------






//------------------- iOS代码 模块 -------------------

;(function () {

    document.writeln('<script type=\"text/x-tmpl\" id=\"tmpl-swift-code-views\">');
    document.writeln('');
    document.writeln('  		{% for (var i=0; i<o.root.length; i++) { %}');
    document.writeln('  		{% var tempView = o.root[i]; %}');
    document.writeln('  		{% var fatherView = o[\"fatherView\"]; %}');
    document.writeln('');
    document.writeln('  		{% if (tempView.viewType == \"label\") { %}');
    document.writeln('										let {%=tempView.defineName %} = UILabel.init(frame: CGRect(x: {%=tempView.x %},y: {%=tempView.y %},width: {%=tempView.width %},height: {%=tempView.height %}))');
    document.writeln('										{% if (tempView.text) { %}{%=tempView.defineName %}.text = \"{%=tempView.text %}\"{% } %}');
    document.writeln('										{%=tempView.defineName %}.font = {% if (tempView.font_family) { %}UIFont.init(name: \"{%=tempView.font_family %}\", size: {% if (tempView.font) { %}{%=tempView.font %}{% } else { %}14{% } %}){% } else { %}UIFont.systemFont(ofSize: {% if (tempView.font) { %}{%=tempView.font %}{% } else { %}14{% } %}){% } %}');
    document.writeln('										{% if (tempView.align) { %}');
    document.writeln('										{% if (tempView.align == \"default\") { %}{%=tempView.defineName %}.textAlignment = NSTextAlignment.left{% } %}');
    document.writeln('										{% if (tempView.align == \"left\") { %}{%=tempView.defineName %}.textAlignment = NSTextAlignment.left{% } %}');
    document.writeln('										{% if (tempView.align == \"right\") { %}{%=tempView.defineName %}.textAlignment = NSTextAlignment.right{% } %}');
    document.writeln('										{% if (tempView.align == \"center\") { %}{%=tempView.defineName %}.textAlignment = NSTextAlignment.center{% } %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.textColor) { %}');
    document.writeln('										{%=tempView.defineName %}.textColor = UIColor.init(red: {% if (tempView.textColorRed) { %}{%=tempView.textColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.textColorGreen) { %}{%=tempView.textColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.textColorBlue) { %}{%=tempView.textColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.textColorAlpha) { %}{%=tempView.textColorAlpha %}{% } else { %}1{% } %})//{%=tempView.textColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										{%=tempView.defineName %}.backgroundColor = UIColor.init(red: {% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %})//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}{%=tempView.defineName %}.layer.cornerRadius = {%=tempView.border_radius%}{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}{%=tempView.defineName %}.layer.borderColor = UIColor.init(red: {% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}).cgColor//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}{%=tempView.defineName %}.layer.borderWidth = {%=tempView.border_width%}{% } %}');
    document.writeln('										{%=tempView.defineName %}.layer.masksToBounds = YES');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} {%=fatherView %}.addSubview({%=tempView.defineName %}) {% } %}');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"switch\") { %}');
    document.writeln('  										let {%=tempView.defineName %} = UISwitch.init (frame: CGRect(x: {%=tempView.x %},y: {%=tempView.y %},width: {%=tempView.width %},height: {%=tempView.height %}))');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										{%=tempView.defineName %}.backgroundColor = UIColor.init(red: {% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %})//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}{%=tempView.defineName %}.layer.cornerRadius = {%=tempView.border_radius%}{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}{%=tempView.defineName %}.layer.borderColor = UIColor.init(red: {% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}).cgColor//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}{%=tempView.defineName %}.layer.borderWidth = {%=tempView.border_width%}{% } %}');
    document.writeln('										{%=tempView.defineName %}.layer.masksToBounds = YES');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} {%=fatherView %}.addSubview({%=tempView.defineName %}) {% } %}');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"scrollView\") { %}');
    document.writeln('										let {%=tempView.defineName %} = UIScrollView.init(frame: CGRect(x: {%=tempView.x %},y: {%=tempView.y %},width: {%=tempView.width %},height: {%=tempView.height %}))');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										{%=tempView.defineName %}.backgroundColor = UIColor.init(red: {% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %})//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}{%=tempView.defineName %}.layer.cornerRadius = {%=tempView.border_radius%}{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}{%=tempView.defineName %}.layer.borderColor = UIColor.init(red: {% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}).cgColor//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}{%=tempView.defineName %}.layer.borderWidth = {%=tempView.border_width%}{% } %}');
    document.writeln('										{%=tempView.defineName %}.layer.masksToBounds = YES');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} {%=fatherView %}.addSubview({%=tempView.defineName %}) {% } %}');
    document.writeln('');
    document.writeln('									{% if (tempView.views) { %}');
    document.writeln('  		                            {% var templateViewsValue = document.getElementById(\"tmpl-swift-code-views\").innerHTML;var map = {};map[\"root\"] = tempView.views;map[\"fatherView\"] = tempView.defineName; var ret = tmpl(templateViewsValue, map); %}');
    document.writeln('  		                            {% if(ret) { %}');
    document.writeln('  		                            {%=ret%}');
    document.writeln('  		                            {% } %}');
    document.writeln('  		                            {% } %}');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"textField\") { %}');
    document.writeln('										let {%=tempView.defineName %} = UITextField.init(frame: CGRect(x: {%=tempView.x %},y: {%=tempView.y %},width: {%=tempView.width %},height: {%=tempView.height %}))');
    document.writeln('										{% if (tempView.text) { %}{%=tempView.defineName %}.text = \"{%=tempView.text %}\"{% } %}');
    document.writeln('										{%=tempView.defineName %}.font = {% if (tempView.font_family) { %}UIFont.init(name: \"{%=tempView.font_family %}\", size: {% if (tempView.font) { %}{%=tempView.font %}{% } else { %}14{% } %}){% } else { %}UIFont.systemFont(ofSize: {% if (tempView.font) { %}{%=tempView.font %}{% } else { %}14{% } %}){% } %}');
    document.writeln('										{% if (tempView.align) { %}');
    document.writeln('										{% if (tempView.align == \"default\") { %}{%=tempView.defineName %}.textAlignment = NSTextAlignment.left{% } %}');
    document.writeln('										{% if (tempView.align == \"left\") { %}{%=tempView.defineName %}.textAlignment = NSTextAlignment.left{% } %}');
    document.writeln('										{% if (tempView.align == \"right\") { %}{%=tempView.defineName %}.textAlignment = NSTextAlignment.right{% } %}');
    document.writeln('										{% if (tempView.align == \"center\") { %}{%=tempView.defineName %}.textAlignment = NSTextAlignment.center{% } %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.textColor) { %}');
    document.writeln('										{%=tempView.defineName %}.textColor = UIColor.init(red: {% if (tempView.textColorRed) { %}{%=tempView.textColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.textColorGreen) { %}{%=tempView.textColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.textColorBlue) { %}{%=tempView.textColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.textColorAlpha) { %}{%=tempView.textColorAlpha %}{% } else { %}1{% } %})//{%=tempView.textColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										{%=tempView.defineName %}.backgroundColor = UIColor.init(red: {% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %})//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}{%=tempView.defineName %}.layer.cornerRadius = {%=tempView.border_radius%}{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}{%=tempView.defineName %}.layer.borderColor = UIColor.init(red: {% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}).cgColor//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}{%=tempView.defineName %}.layer.borderWidth = {%=tempView.border_width%}{% } %}');
    document.writeln('										{%=tempView.defineName %}.layer.masksToBounds = YES');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} {%=fatherView %}.addSubview({%=tempView.defineName %}) {% } %}');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"textView\") { %}');
    document.writeln('										let {%=tempView.defineName %} = UITextView.init(frame: CGRect(x: {%=tempView.x %},y: {%=tempView.y %},width: {%=tempView.width %},height: {%=tempView.height %}))');
    document.writeln('										{% if (tempView.text) { %}{%=tempView.defineName %}.text = \"{%=tempView.text %}\"{% } %}');
    document.writeln('										{%=tempView.defineName %}.font = {% if (tempView.font_family) { %}UIFont.init(name: \"{%=tempView.font_family %}\", size: {% if (tempView.font) { %}{%=tempView.font %}{% } else { %}14{% } %}){% } else { %}UIFont.systemFont(ofSize: {% if (tempView.font) { %}{%=tempView.font %}{% } else { %}14{% } %}){% } %}');
    document.writeln('										{% if (tempView.align) { %}');
    document.writeln('										{% if (tempView.align == \"default\") { %}{%=tempView.defineName %}.textAlignment = NSTextAlignment.left{% } %}');
    document.writeln('										{% if (tempView.align == \"left\") { %}{%=tempView.defineName %}.textAlignment = NSTextAlignment.left{% } %}');
    document.writeln('										{% if (tempView.align == \"right\") { %}{%=tempView.defineName %}.textAlignment = NSTextAlignment.right{% } %}');
    document.writeln('										{% if (tempView.align == \"center\") { %}{%=tempView.defineName %}.textAlignment = NSTextAlignment.center{% } %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.textColor) { %}');
    document.writeln('										{%=tempView.defineName %}.textColor = UIColor.init(red: {% if (tempView.textColorRed) { %}{%=tempView.textColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.textColorGreen) { %}{%=tempView.textColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.textColorBlue) { %}{%=tempView.textColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.textColorAlpha) { %}{%=tempView.textColorAlpha %}{% } else { %}1{% } %})//{%=tempView.textColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										{%=tempView.defineName %}.backgroundColor = UIColor.init(red: {% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %})//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}{%=tempView.defineName %}.layer.cornerRadius = {%=tempView.border_radius%}{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}{%=tempView.defineName %}.layer.borderColor = UIColor.init(red: {% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}).cgColor//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}{%=tempView.defineName %}.layer.borderWidth = {%=tempView.border_width%}{% } %}');
    document.writeln('										{%=tempView.defineName %}.layer.masksToBounds = YES');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} {%=fatherView %}.addSubview({%=tempView.defineName %}) {% } %}');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"imageView\") { %}');
    document.writeln('										let {%=tempView.defineName %} = UIImageView.init(frame: CGRect(x: {%=tempView.x %},y: {%=tempView.y %},width: {%=tempView.width %},height: {%=tempView.height %}))');
    document.writeln('										{% if (tempView.image) { %}{%=tempView.defineName %}.image = UIImage(named: \"{%=tempView.image %}\"){% } %}');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										{%=tempView.defineName %}.backgroundColor = UIColor.init(red: {% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %})//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}{%=tempView.defineName %}.layer.cornerRadius = {%=tempView.border_radius%}{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}{%=tempView.defineName %}.layer.borderColor = UIColor.init(red: {% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}).cgColor//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}{%=tempView.defineName %}.layer.borderWidth = {%=tempView.border_width%}{% } %}');
    document.writeln('										{%=tempView.defineName %}.layer.masksToBounds = YES');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} {%=fatherView %}.addSubview({%=tempView.defineName %}) {% } %}');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"activityIndicatorView\") { %}');
    document.writeln('										let {%=tempView.defineName %} = UIActivityIndicatorView.init(frame: CGRect(x: {%=tempView.x %},y: {%=tempView.y %},width: {%=tempView.width %},height: {%=tempView.height %}))');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										{%=tempView.defineName %}.backgroundColor = UIColor.init(red: {% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %})//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}{%=tempView.defineName %}.layer.cornerRadius = {%=tempView.border_radius%}{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}{%=tempView.defineName %}.layer.borderColor = UIColor.init(red: {% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}).cgColor//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}{%=tempView.defineName %}.layer.borderWidth = {%=tempView.border_width%}{% } %}');
    document.writeln('										{%=tempView.defineName %}.layer.masksToBounds = YES');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} {%=fatherView %}.addSubview({%=tempView.defineName %}) {% } %}');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"button\") { %}');
    document.writeln('  										let {%=tempView.defineName %} = UIButton.init(type: .custom)');
    document.writeln('										{%=tempView.defineName %}.frame = CGRect(x: {%=tempView.x %},y: {%=tempView.y %},width: {%=tempView.width %},height: {%=tempView.height %})');
    document.writeln('										loginBut.setTitle(\"按下\", for: .normal)');
    document.writeln('										{% if (tempView.text) { %}{%=tempView.defineName %}.setTitle(\"{%=tempView.text %}\" for: .normal]{% } %}');
    document.writeln('										{%=tempView.defineName %}.titleLabel.font = {% if (tempView.font_family) { %}UIFont.init(name: \"{%=tempView.font_family %}\", size: {% if (tempView.font) { %}{%=tempView.font %}{% } else { %}14{% } %}){% } else { %}UIFont.systemFont(ofSize: {% if (tempView.font) { %}{%=tempView.font %}{% } else { %}14{% } %}){% } %}');
    document.writeln('										{% if (tempView.align) { %}');
    document.writeln('										{% if (tempView.align == \"default\") { %}{%=tempView.defineName %}.titleLabel.textAlignment = NSTextAlignment.left{% } %}');
    document.writeln('										{% if (tempView.align == \"left\") { %}{%=tempView.defineName %}.titleLabel.textAlignment = NSTextAlignment.left{% } %}');
    document.writeln('										{% if (tempView.align == \"right\") { %}{%=tempView.defineName %}.titleLabel.textAlignment = NSTextAlignment.right{% } %}');
    document.writeln('										{% if (tempView.align == \"center\") { %}{%=tempView.defineName %}.titleLabel.textAlignment = NSTextAlignment.center{% } %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.textColor) { %}');
    document.writeln('										{%=tempView.defineName %}.setTitleColor(UIColor.init(red: {% if (tempView.textColorRed) { %}{%=tempView.textColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.textColorGreen) { %}{%=tempView.textColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.textColorBlue) { %}{%=tempView.textColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.textColorAlpha) { %}{%=tempView.textColorAlpha %}{% } else { %}1{% } %}) for: .normal]//{%=tempView.textColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										{%=tempView.defineName %}.backgroundColor = UIColor.init(red: {% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %})//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}{%=tempView.defineName %}.layer.cornerRadius = {%=tempView.border_radius%}{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}{%=tempView.defineName %}.layer.borderColor = UIColor.init(red: {% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}).cgColor//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}{%=tempView.defineName %}.layer.borderWidth = {%=tempView.border_width%}{% } %}');
    document.writeln('										{%=tempView.defineName %}.layer.masksToBounds = YES');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} {%=fatherView %}.addSubview({%=tempView.defineName %}) {% } %}');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"progressView\") { %}');
    document.writeln('										let {%=tempView.defineName %} = UIProgressView.init(frame: CGRect(x: {%=tempView.x %},y: {%=tempView.y %},width: {%=tempView.width %},height: {%=tempView.height %}))');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										{%=tempView.defineName %}.backgroundColor = UIColor.init(red: {% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %})//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}{%=tempView.defineName %}.layer.cornerRadius = {%=tempView.border_radius%}{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}{%=tempView.defineName %}.layer.borderColor = UIColor.init(red: {% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}).cgColor//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}{%=tempView.defineName %}.layer.borderWidth = {%=tempView.border_width%}{% } %}');
    document.writeln('										{%=tempView.defineName %}.layer.masksToBounds = YES');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} {%=fatherView %}.addSubview({%=tempView.defineName %}) {% } %}');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"tableView\") { %}');
    document.writeln('										let {%=tempView.defineName %} = UITableView.init(frame: CGRect(x: {%=tempView.x %},y: {%=tempView.y %},width: {%=tempView.width %},height: {%=tempView.height %}))');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										{%=tempView.defineName %}.backgroundColor = UIColor.init(red: {% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %})//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}{%=tempView.defineName %}.layer.cornerRadius = {%=tempView.border_radius%}{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}{%=tempView.defineName %}.layer.borderColor = UIColor.init(red: {% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}).cgColor//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}{%=tempView.defineName %}.layer.borderWidth = {%=tempView.border_width%}{% } %}');
    document.writeln('										{%=tempView.defineName %}.layer.masksToBounds = YES');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} {%=fatherView %}.addSubview({%=tempView.defineName %}) {% } %}');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"collectionView\") { %}');
    document.writeln('										let {%=tempView.defineName %} = UICollectionView.init(frame: CGRect(x: {%=tempView.x %},y: {%=tempView.y %},width: {%=tempView.width %},height: {%=tempView.height %}))');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										{%=tempView.defineName %}.backgroundColor = UIColor.init(red: {% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %})//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}{%=tempView.defineName %}.layer.cornerRadius = {%=tempView.border_radius%}{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}{%=tempView.defineName %}.layer.borderColor = UIColor.init(red: {% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}).cgColor//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}{%=tempView.defineName %}.layer.borderWidth = {%=tempView.border_width%}{% } %}');
    document.writeln('										{%=tempView.defineName %}.layer.masksToBounds = YES');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} {%=fatherView %}.addSubview({%=tempView.defineName %}) {% } %}');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"stepper\") { %}');
    document.writeln('										let {%=tempView.defineName %} = UIStepper.init(frame: CGRect(x: {%=tempView.x %},y: {%=tempView.y %},width: {%=tempView.width %},height: {%=tempView.height %}))');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										{%=tempView.defineName %}.backgroundColor = UIColor.init(red: {% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %})//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}{%=tempView.defineName %}.layer.cornerRadius = {%=tempView.border_radius%}{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}{%=tempView.defineName %}.layer.borderColor = UIColor.init(red: {% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}).cgColor//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}{%=tempView.defineName %}.layer.borderWidth = {%=tempView.border_width%}{% } %}');
    document.writeln('										{%=tempView.defineName %}.layer.masksToBounds = YES');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} {%=fatherView %}.addSubview({%=tempView.defineName %}) {% } %}');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"pageControl\") { %}');
    document.writeln('										let {%=tempView.defineName %} = UIPageControl.init(frame: CGRect(x: {%=tempView.x %},y: {%=tempView.y %},width: {%=tempView.width %},height: {%=tempView.height %}))');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										{%=tempView.defineName %}.backgroundColor = UIColor.init(red: {% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %})//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}{%=tempView.defineName %}.layer.cornerRadius = {%=tempView.border_radius%}{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}{%=tempView.defineName %}.layer.borderColor = UIColor.init(red: {% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}).cgColor//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}{%=tempView.defineName %}.layer.borderWidth = {%=tempView.border_width%}{% } %}');
    document.writeln('										{%=tempView.defineName %}.layer.masksToBounds = YES');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} {%=fatherView %}.addSubview({%=tempView.defineName %}) {% } %}');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"pickerView\") { %}');
    document.writeln('										let {%=tempView.defineName %} = UIPickerView.init(frame: CGRect(x: {%=tempView.x %},y: {%=tempView.y %},width: {%=tempView.width %},height: {%=tempView.height %}))');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										{%=tempView.defineName %}.backgroundColor = UIColor.init(red: {% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %})//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}{%=tempView.defineName %}.layer.cornerRadius = {%=tempView.border_radius%}{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}{%=tempView.defineName %}.layer.borderColor = UIColor.init(red: {% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}).cgColor//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}{%=tempView.defineName %}.layer.borderWidth = {%=tempView.border_width%}{% } %}');
    document.writeln('										{%=tempView.defineName %}.layer.masksToBounds = YES');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} {%=fatherView %}.addSubview({%=tempView.defineName %}) {% } %}');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"datePicker\") { %}');
    document.writeln('										let {%=tempView.defineName %} = UIDatePicker.init(frame: CGRect(x: {%=tempView.x %},y: {%=tempView.y %},width: {%=tempView.width %},height: {%=tempView.height %}))');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										{%=tempView.defineName %}.backgroundColor = UIColor.init(red: {% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %})//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}{%=tempView.defineName %}.layer.cornerRadius = {%=tempView.border_radius%}{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}{%=tempView.defineName %}.layer.borderColor = UIColor.init(red: {% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}).cgColor//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}{%=tempView.defineName %}.layer.borderWidth = {%=tempView.border_width%}{% } %}');
    document.writeln('										{%=tempView.defineName %}.layer.masksToBounds = YES');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} {%=fatherView %}.addSubview({%=tempView.defineName %}) {% } %}');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"mapView\") { %}');
    document.writeln('										let {%=tempView.defineName %} = UIMapView.init(frame: CGRect(x: {%=tempView.x %},y: {%=tempView.y %},width: {%=tempView.width %},height: {%=tempView.height %}))');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										{%=tempView.defineName %}.backgroundColor = UIColor.init(red: {% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %})//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}{%=tempView.defineName %}.layer.cornerRadius = {%=tempView.border_radius%}{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}{%=tempView.defineName %}.layer.borderColor = UIColor.init(red: {% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}).cgColor//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}{%=tempView.defineName %}.layer.borderWidth = {%=tempView.border_width%}{% } %}');
    document.writeln('										{%=tempView.defineName %}.layer.masksToBounds = YES');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} {%=fatherView %}.addSubview({%=tempView.defineName %}) {% } %}');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"searchBar\") { %}');
    document.writeln('										let {%=tempView.defineName %} = UISearchBar.init(frame: CGRect(x: {%=tempView.x %},y: {%=tempView.y %},width: {%=tempView.width %},height: {%=tempView.height %}))');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										{%=tempView.defineName %}.backgroundColor = UIColor.init(red: {% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %})//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}{%=tempView.defineName %}.layer.cornerRadius = {%=tempView.border_radius%}{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}{%=tempView.defineName %}.layer.borderColor = UIColor.init(red: {% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}).cgColor//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}{%=tempView.defineName %}.layer.borderWidth = {%=tempView.border_width%}{% } %}');
    document.writeln('										{%=tempView.defineName %}.layer.masksToBounds = YES');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} {%=fatherView %}.addSubview({%=tempView.defineName %}) {% } %}');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"webView\") { %}');
    document.writeln('										let {%=tempView.defineName %}= WKWebView.init(frame: CGRect(x: {%=tempView.x %},y: {%=tempView.y %},width: {%=tempView.width %},height: {%=tempView.height %}))');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										{%=tempView.defineName %}.backgroundColor = UIColor.init(red: {% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %})//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}{%=tempView.defineName %}.layer.cornerRadius = {%=tempView.border_radius%}{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}{%=tempView.defineName %}.layer.borderColor = UIColor.init(red: {% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}).cgColor//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}{%=tempView.defineName %}.layer.borderWidth = {%=tempView.border_width%}{% } %}');
    document.writeln('										{%=tempView.defineName %}.layer.masksToBounds = YES');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} {%=fatherView %}.addSubview({%=tempView.defineName %}) {% } %}');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"slider\") { %}');
    document.writeln('										let {%=tempView.defineName %} = UISlider.init(frame: CGRect(x: {%=tempView.x %},y: {%=tempView.y %},width: {%=tempView.width %},height: {%=tempView.height %}))');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										{%=tempView.defineName %}.backgroundColor = UIColor.init(red: {% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %})//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}{%=tempView.defineName %}.layer.cornerRadius = {%=tempView.border_radius%}{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}{%=tempView.defineName %}.layer.borderColor = UIColor.init(red: {% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}).cgColor//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}{%=tempView.defineName %}.layer.borderWidth = {%=tempView.border_width%}{% } %}');
    document.writeln('										{%=tempView.defineName %}.layer.masksToBounds = YES');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} {%=fatherView %}.addSubview({%=tempView.defineName %}) {% } %}');
    document.writeln('  		{% } %}');
    document.writeln('  		{% if (tempView.viewType == \"view\") { %}');
    document.writeln('										let {%=tempView.defineName %} = UIView.init(frame: CGRect(x: {%=tempView.x %},y: {%=tempView.y %},width: {%=tempView.width %},height: {%=tempView.height %}))');
    document.writeln('										{% if (tempView.bgColor) { %}');
    document.writeln('										{%=tempView.defineName %}.backgroundColor = UIColor.init(red: {% if (tempView.bgColorRed) { %}{%=tempView.bgColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.bgColorGreen) { %}{%=tempView.bgColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.bgColorBlue) { %}{%=tempView.bgColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.bgColorAlpha) { %}{%=tempView.bgColorAlpha %}{% } else { %}1{% } %})//{%=tempView.bgColor %}');
    document.writeln('										{% } %}');
    document.writeln('										{% if (tempView.border_radius || tempView.border_width) { %}');
    document.writeln('										{% if (tempView.border_radius) { %}{%=tempView.defineName %}.layer.cornerRadius = {%=tempView.border_radius%}{% } %}');
    document.writeln('										{% if (tempView.borderColorRed) { %}{%=tempView.defineName %}.layer.borderColor = UIColor.init(red: {% if (tempView.borderColorRed) { %}{%=tempView.borderColorRed %}{% } else { %}1{% } %}, green: {% if (tempView.borderColorGreen) { %}{%=tempView.borderColorGreen %}{% } else { %}1{% } %}, blue: {% if (tempView.borderColorBlue) { %}{%=tempView.borderColorBlue %}{% } else { %}1{% } %}, alpha: {% if (tempView.borderColorAlpha) { %}{%=tempView.borderColorAlpha %}{% } else { %}1{% } %}).cgColor//{%=tempView.borderColor %}{% } %}');
    document.writeln('										{% if (tempView.border_width) { %}{%=tempView.defineName %}.layer.borderWidth = {%=tempView.border_width%}{% } %}');
    document.writeln('										{%=tempView.defineName %}.layer.masksToBounds = YES');
    document.writeln('										{% } %}');
    document.writeln('										{% if (fatherView && fatherView.length > 0) { %} {%=fatherView %}.addSubview({%=tempView.defineName %}) {% } %}');
    document.writeln('  		                        {% if (tempView.views) { %}');
    document.writeln('  		                            {% var templateViewsValue = document.getElementById(\"tmpl-swift-code-views\").innerHTML;var map = {};map[\"root\"] = tempView.views;map[\"fatherView\"] = tempView.defineName; var ret = tmpl(templateViewsValue, map); %}');
    document.writeln('  		                            {% if(ret) { %}');
    document.writeln('  		                            {%=ret%}');
    document.writeln('  		                            {% } %}');
    document.writeln('  		                            {% } %}');
    document.writeln('  		{% } %}');
    document.writeln('  		{% } %}');
    document.writeln('  			</script>');
    document.writeln('		<!-- 模板数据View -->');

})(this);

//------------------- iOS代码模板 模块 -------------------






//------------------- 安卓模板 模块 -------------------

;(function () {

    //模板数据layout 最外层
    document.writeln('<!-- 模板数据ViewController -->');
    document.writeln('		<script type=\"text/x-tmpl\" id=\"tmpl-android-xml\">');
    document.writeln('<?xml version=\"1.0\" encoding=\"utf-8\"?>');
    document.writeln('<RelativeLayout');
    document.writeln('    xmlns:android=\"http://schemas.android.com/apk/res/android\"');
    document.writeln('    xmlns:app=\"http://schemas.android.com/apk/res-auto\"');
    document.writeln('    xmlns:tools=\"http://schemas.android.com/tools\"');
    document.writeln('    android:layout_width=\"match_parent\"');
    document.writeln('    android:layout_height=\"match_parent\"');
    document.writeln('    >');
    document.writeln('		      {% if (o.root.views) { %}');
    document.writeln('		      {% var templateViewsValue = document.getElementById(\"tmpl-android-views\").innerHTML;var map = {};map[\"root\"] = o.root.views; var ret = tmpl(templateViewsValue, map); %}');
    document.writeln('		      {% if(ret) { %}');
    document.writeln('		      {%=ret%}');
    document.writeln('		      {% } %}');
    document.writeln('		      {% } %}');
    document.writeln('</RelativeLayout>');
    document.writeln('		    </script>');

    //模板数据View
    document.writeln('<!-- 模板数据View -->');
    document.writeln('<script type=\"text/x-tmpl\" id=\"tmpl-android-views\">');
    document.writeln('');
    document.writeln('    		{% for (var i=0; i<o.root.length; i++) { %}');
    document.writeln('    		{% var tempView = o.root[i]; %}');
    document.writeln('');
    document.writeln('    		{% if (tempView.viewType == \"textView\") { %}');
    document.writeln('                <TextView');
    document.writeln('                    android:layout_width=\"wrap_content\"');
    document.writeln('                    android:layout_height=\"wrap_content\"');
    document.writeln('                    {% if (parseFloat(tempView.x) > 0) { %}android:layout_marginLeft=\"{%=tempView.x %}dp\"{% } %}');
    document.writeln('                    {% if (parseFloat(tempView.y) > 0) { %}android:layout_marginTop=\"{%=tempView.y %}dp\"{% } %}');
    document.writeln('                    {% if (tempView.text) { %}android:text=\"{%=tempView.text %}\"{% } %}');
    document.writeln('                    {% if (tempView.align) { %}android:textAlignment=\"{%=tempView.align %}\"{% } %}');
    document.writeln('                    android:textSize=\"{% if (tempView.font) { %}{%=tempView.font %}{% } else { %}14{% } %}dp\"');
    document.writeln('                    {% if (tempView.font_family) { %}android:fontFamily=\"{%=tempView.font_family %}\"{% } %}');
    document.writeln('                    {% if (tempView.textColor) { %}android:textColor=\"{%=tempView.textColor %}\"{% } %}');
    document.writeln('                    {% if (tempView.bgColor) { %}android:background=\"{%=tempView.bgColor %}\"{% } %}');
    document.writeln('                    >');
    document.writeln('                </TextView>');
    document.writeln('    		{% } %}');
    document.writeln('    		{% if (tempView.viewType == \"switch\") { %}');
    document.writeln('    				<Switch');
    document.writeln('        				android:layout_width=\"wrap_content\"');
    document.writeln('        				android:layout_height=\"wrap_content\">');
    document.writeln('        				{% if (parseFloat(tempView.x) > 0) { %}android:layout_marginLeft=\"{%=tempView.x %}dp\"{% } %}');
    document.writeln('                    	{% if (parseFloat(tempView.y) > 0) { %}android:layout_marginTop=\"{%=tempView.y %}dp\"{% } %}');
    document.writeln('                    	{% if (tempView.bgColor) { %}android:background=\"{%=tempView.bgColor %}\"{% } %}');
    document.writeln('                    	>');
    document.writeln('   					</Switch>');
    document.writeln('    		{% } %}');
    document.writeln('    		{% if (tempView.viewType == \"scrollView\") { %}');
    document.writeln('    				<ScrollView');
    document.writeln('        				android:layout_width=\"{%=tempView.width %}dp\"');
    document.writeln('        				android:layout_height=\"{%=tempView.height %}dp\"');
    document.writeln('        				{% if (parseFloat(tempView.x) > 0) { %}android:layout_marginLeft=\"{%=tempView.x %}dp\"{% } %}');
    document.writeln('                    	{% if (parseFloat(tempView.y) > 0) { %}android:layout_marginTop=\"{%=tempView.y %}dp\"{% } %}');
    document.writeln('                    	{% if (tempView.bgColor) { %}android:background=\"{%=tempView.bgColor %}\"{% } %}');
    document.writeln('                    	>');
    document.writeln('                    	{% if (tempView.views) { %}');
    document.writeln('    		            {% var templateViewsValue = document.getElementById(\"tmpl-android-views\").innerHTML;var map = {};map[\"root\"] = tempView.views; var ret = tmpl(templateViewsValue, map); %}');
    document.writeln('    		            {% if(ret) { %}');
    document.writeln('    		            {%=ret%}');
    document.writeln('    		            {% } %}');
    document.writeln('    		            {% } %}');
    document.writeln('   					</ScrollView>');
    document.writeln('    		{% } %}');
    document.writeln('    		{% if (tempView.viewType == \"editText\") { %}');
    document.writeln('					<EditText');
    document.writeln('						android:layout_width=\"{%=tempView.width %}dp\"');
    document.writeln('        				android:layout_height=\"{%=tempView.height %}dp\"');
    document.writeln('						{% if (parseFloat(tempView.x) > 0) { %}android:layout_marginLeft=\"{%=tempView.x %}dp\"{% } %}');
    document.writeln('						{% if (parseFloat(tempView.y) > 0) { %}android:layout_marginTop=\"{%=tempView.y %}dp\"{% } %}');
    document.writeln('						{% if (tempView.text) { %}android:text=\"{%=tempView.text %}\"{% } %}');
    document.writeln('						{% if (tempView.align) { %}android:textAlignment=\"{%=tempView.align %}\"{% } %}');
    document.writeln('						android:textSize=\"{% if (tempView.font) { %}{%=tempView.font %}{% } else { %}14{% } %}dp\"');
    document.writeln('						{% if (tempView.font_family) { %}android:fontFamily=\"{%=tempView.font_family %}\"{% } %}');
    document.writeln('						{% if (tempView.textColor) { %}android:textColor=\"{%=tempView.textColor %}\"{% } %}');
    document.writeln('						{% if (tempView.bgColor) { %}android:background=\"{%=tempView.bgColor %}\"{% } else { %}android:background=\"@null\"{% } %}');
    document.writeln('						>');
    document.writeln('					</TextView>');
    document.writeln('    		{% } %}');
    document.writeln('    		{% if (tempView.viewType == \"imageView\") { %}');
    document.writeln('    		    	<ImageView');
    document.writeln('    		    		android:layout_width=\"{%=tempView.width %}dp\"');
    document.writeln('        				android:layout_height=\"{%=tempView.height %}dp\"');
    document.writeln('        				android:scaleType=\"fitXY\"');
    document.writeln('        				{% if (parseFloat(tempView.x) > 0) { %}android:layout_marginLeft=\"{%=tempView.x %}dp\"{% } %}');
    document.writeln('                    	{% if (parseFloat(tempView.y) > 0) { %}android:layout_marginTop=\"{%=tempView.y %}dp\"{% } %}');
    document.writeln('                    	{% if (tempView.bgColor) { %}android:background=\"{%=tempView.bgColor %}\"{% } %}');
    document.writeln('                    	{% if (tempView.image) { %}android:src=\"@drawable/{%=tempView.image %}\"{% } %}');
    document.writeln('                    	>');
    document.writeln('   					</ImageView>');
    document.writeln('    		{% } %}');
    document.writeln('    		{% if (tempView.viewType == \"button\") { %}');
    document.writeln('    				<Button');
    document.writeln('    		    		android:layout_width=\"{%=tempView.width %}dp\"');
    document.writeln('        				android:layout_height=\"{%=tempView.height %}dp\"');
    document.writeln('        				{% if (parseFloat(tempView.x) > 0) { %}android:layout_marginLeft=\"{%=tempView.x %}dp\"{% } %}');
    document.writeln('                    	{% if (parseFloat(tempView.y) > 0) { %}android:layout_marginTop=\"{%=tempView.y %}dp\"{% } %}');
    document.writeln('                    	{% if (tempView.text) { %}android:text=\"{%=tempView.text %}\"{% } %}');
    document.writeln('						{% if (tempView.align) { %}android:textAlignment=\"{%=tempView.align %}\"{% } %}');
    document.writeln('						android:textSize=\"{% if (tempView.font) { %}{%=tempView.font %}{% } else { %}14{% } %}dp\"');
    document.writeln('						{% if (tempView.font_family) { %}android:fontFamily=\"{%=tempView.font_family %}\"{% } %}');
    document.writeln('						{% if (tempView.textColor) { %}android:textColor=\"{%=tempView.textColor %}\"{% } %}');
    document.writeln('                    	{% if (tempView.bgColor) { %}android:background=\"{%=tempView.bgColor %}\"{% } %}');
    document.writeln('                    	>');
    document.writeln('   					</Button>');
    document.writeln('    		{% } %}');
    document.writeln('    		{% if (tempView.viewType == \"progressBar\") { %}');
    document.writeln('    				<ProgressBar');
    document.writeln('    		    		android:layout_width=\"{%=tempView.width %}dp\"');
    document.writeln('        				android:layout_height=\"{%=tempView.height %}dp\"');
    document.writeln('        				{% if (parseFloat(tempView.x) > 0) { %}android:layout_marginLeft=\"{%=tempView.x %}dp\"{% } %}');
    document.writeln('                    	{% if (parseFloat(tempView.y) > 0) { %}android:layout_marginTop=\"{%=tempView.y %}dp\"{% } %}');
    document.writeln('                    	{% if (tempView.bgColor) { %}android:background=\"{%=tempView.bgColor %}\"{% } %}');
    document.writeln('                    	>');
    document.writeln('   					</ProgressBar>');
    document.writeln('    		{% } %}');
    document.writeln('    		{% if (tempView.viewType == \"recyclerView\") { %}');
    document.writeln('    				<androidx.recyclerview.widget.RecyclerView');
    document.writeln('    		    		android:layout_width=\"{%=tempView.width %}dp\"');
    document.writeln('        				android:layout_height=\"{%=tempView.height %}dp\"');
    document.writeln('        				{% if (parseFloat(tempView.x) > 0) { %}android:layout_marginLeft=\"{%=tempView.x %}dp\"{% } %}');
    document.writeln('                    	{% if (parseFloat(tempView.y) > 0) { %}android:layout_marginTop=\"{%=tempView.y %}dp\"{% } %}');
    document.writeln('                    	{% if (tempView.bgColor) { %}android:background=\"{%=tempView.bgColor %}\"{% } %}');
    document.writeln('                    	android:orientation=\"vertical\"');
    document.writeln('                    	app:layoutManager=\"androidx.recyclerview.widget.LinearLayoutManager\"');
    document.writeln('                    	>');
    document.writeln('   					</androidx.recyclerview.widget.RecyclerView>');
    document.writeln('                />');
    document.writeln('    		{% } %}');
    document.writeln('    		{% if (tempView.viewType == \"datePicker\") { %}');
    document.writeln('    				<DatePicker');
    document.writeln('    		    		android:layout_width=\"{%=tempView.width %}dp\"');
    document.writeln('        				android:layout_height=\"{%=tempView.height %}dp\"');
    document.writeln('        				{% if (parseFloat(tempView.x) > 0) { %}android:layout_marginLeft=\"{%=tempView.x %}dp\"{% } %}');
    document.writeln('                    	{% if (parseFloat(tempView.y) > 0) { %}android:layout_marginTop=\"{%=tempView.y %}dp\"{% } %}');
    document.writeln('                    	{% if (tempView.bgColor) { %}android:background=\"{%=tempView.bgColor %}\"{% } %}');
    document.writeln('                    	>');
    document.writeln('   					</DatePicker>');
    document.writeln('    		{% } %}');
    document.writeln('    		{% if (tempView.viewType == \"webView\") { %}');
    document.writeln('    				<WebView');
    document.writeln('    		    		android:layout_width=\"{%=tempView.width %}dp\"');
    document.writeln('        				android:layout_height=\"{%=tempView.height %}dp\"');
    document.writeln('        				{% if (parseFloat(tempView.x) > 0) { %}android:layout_marginLeft=\"{%=tempView.x %}dp\"{% } %}');
    document.writeln('                    	{% if (parseFloat(tempView.y) > 0) { %}android:layout_marginTop=\"{%=tempView.y %}dp\"{% } %}');
    document.writeln('                    	{% if (tempView.bgColor) { %}android:background=\"{%=tempView.bgColor %}\"{% } %}');
    document.writeln('                    	>');
    document.writeln('   					</WebView>');
    document.writeln('    		{% } %}');
    document.writeln('    		{% if (tempView.viewType == \"seekBar\") { %}');
    document.writeln('    				<SeekBar');
    document.writeln('    		    		android:layout_width=\"{%=tempView.width %}dp\"');
    document.writeln('        				android:layout_height=\"{%=tempView.height %}dp\"');
    document.writeln('        				{% if (parseFloat(tempView.x) > 0) { %}android:layout_marginLeft=\"{%=tempView.x %}dp\"{% } %}');
    document.writeln('                    	{% if (parseFloat(tempView.y) > 0) { %}android:layout_marginTop=\"{%=tempView.y %}dp\"{% } %}');
    document.writeln('                    	{% if (tempView.bgColor) { %}android:background=\"{%=tempView.bgColor %}\"{% } %}');
    document.writeln('                    	>');
    document.writeln('   					</SeekBar>');
    document.writeln('    		{% } %}');
    document.writeln('    		{% if (tempView.viewType == \"relativeLayout\") { %}');
    document.writeln('    				<RelativeLayout');
    document.writeln('    		    		android:layout_width=\"{%=tempView.width %}dp\"');
    document.writeln('        				android:layout_height=\"{%=tempView.height %}dp\"');
    document.writeln('        				{% if (parseFloat(tempView.x) > 0) { %}android:layout_marginLeft=\"{%=tempView.x %}dp\"{% } %}');
    document.writeln('                    	{% if (parseFloat(tempView.y) > 0) { %}android:layout_marginTop=\"{%=tempView.y %}dp\"{% } %}');
    document.writeln('                    	{% if (tempView.bgColor) { %}android:background=\"{%=tempView.bgColor %}\"{% } %}');
    document.writeln('                    	>');
    document.writeln('                    	{% if (tempView.views) { %}');
    document.writeln('    		            {% var templateViewsValue = document.getElementById(\"tmpl-android-views\").innerHTML;var map = {};map[\"root\"] = tempView.views; var ret = tmpl(templateViewsValue, map); %}');
    document.writeln('    		            {% if(ret) { %}');
    document.writeln('    		            {%=ret%}');
    document.writeln('    		            {% } %}');
    document.writeln('    		            {% } %}');
    document.writeln('   					</RelativeLayout>');
    document.writeln('    		{% } %}');
    document.writeln('');
    document.writeln('    		{% } %}');
    document.writeln('    			</script>');

})(this);

//------------------- 安卓模板 模块 -------------------






//------------------- 字符串工具 模块 -------------------

/**
 * 首字母大写
 */
function upperFirstCase(text){
    if (text.length > 1){
        return text.substring(0,1).toUpperCase() + text.substring(1,text.length);
    }
    return text.toUpperCase();
}

/**
 * 首字母小写
 */
function lowerFirstCase(text){
    if (text.length > 1){
        return text.substring(0,1).toLowerCase() + text.substring(1,text.length);
    }
    return text.toLowerCase();
}

/**
 * 取两个字符串中间的内容
 */
function mid(left,right,text){
    if (text && left && right && text.length > 0 && left.length > 0 && right.length > 0 && text.includes(left) && text.includes(right) && left != right){
        var leftIndex = text.indexOf(left);
        var rightIndex = text.indexOf(right,leftIndex);
        if (leftIndex >= 0 && rightIndex >= 0 && leftIndex + left.length < rightIndex){
            return text.substring(leftIndex + left.length,rightIndex);
        }
    }
    return "";
}

/**
 * 取两个字符串中间的内容,开始处默认为0
 */
function midR(right,text){
    if (text && right && text.length > 0 && right.length > 0 && text.includes(right) && 0 != right){
        var leftIndex = 0;
        var rightIndex = text.indexOf(right,leftIndex);
        if (leftIndex >= 0 && rightIndex >= 0 && leftIndex < rightIndex){
            return text.substring(leftIndex,rightIndex);
        }
    }
    return "";
}

/**
 * 判断字符是否是数字 true:数值型的，false：非数值型
 */
function isNum(value) {
    return ((typeof value === 'number' || typeof value === 'string') && !isNaN(value));
}

/**
 * 转数字
 */
function numValue(value) {
    if (isNum(value))return value;
    return "0";
}

/**
 * 随机字符串
 */
function randomStr(e){
    var t = "0123456789abcdefghijkmnpqrstuvwxyzABCDEFGHIJKMNPQRSTUVWXYZ";
    var a = t.length;
    var n = "";
    for (var i = 0; i < e; i++) {
        n += t.charAt(Math.floor(Math.random() * a));
    }
    return n;
}

/**
 * 获取随机iOS xml idStr
 * 例子:gSS-Oy-SNc
 */
function xml_idStr(){
    return randomStr(3) + "-" + randomStr(2) + "-" +randomStr(3);
}

/**
 * 去除字符串前面的空格
 */
function removeSpacePrefix(text){
    if (text.startsWith(" ")){
        text = text.substring(1);
        return removeSpacePrefix(text);
    }else if (text.startsWith("\t")){
        text = text.replaceAll("\t","");
        return removeSpacePrefix(text);
    }
    return text;
}

/**
 * 去除字符串后面的空格
 */
function removeSpaceSuffix(text){
    if (text.endsWith(" ")){
        text = text.substring(0,text.length - 1);
        return removeSpaceSuffix(text);
    }else if (text.startsWith("\t")){
        text = text.replaceAll("\t","");
        return removeSpaceSuffix(text);
    }
    return text;
}

/**
 * 去除字符串前后面的空格
 */
function removeSpacePrefixSuffix(text){
    return removeSpacePrefix(removeSpaceSuffix(text));
}

/**
 * 去除字符串前后面的空格-包括换行
 */
function removeSpacePrefixSuffixNewLine(text){
    return removeSpacePrefixSuffix(text.replaceAll("\n",""));
}

/**
 * 获取n个"\t'
 */
function getIndentationSpace(count) {
    var str = "";
    for (let i = 0; i < count; i++) { str += "\t"; }
    return str;
}

/**
 * 获取n个"  "
 */
function getSpace(count) {
    var str = "";
    for (let i = 0; i < count; i++) { str += "    "; }
    return str;
}

/**
 * 获取n个"┈"
 */
function getSpecialSpace(count) {
    var str = "";
    for (let i = 0; i < count; i++) { str += "┈"; }
    return str;
}

/**
 * 获取n个"&nbsp;"
 */
function getHtmlSpace(count) {
    var str = "";
    for (let i = 0; i < count; i++) { str += "&nbsp;&nbsp;&nbsp;&nbsp;"; }
    return str;
}

/**
 * 获取n个"  "
 */
function getSpaceFormat(count,type) {
    if (type == "ios")return getSpace(count);
    if (type == "android")return getIndentationSpace(count);
    if (type == "ios_special")return getSpecialSpace(count);
    if (type == "ios_code")return getHtmlSpace(count);
    if (type == "swift_code")return getHtmlSpace(count);
    if (type == "android_special")return getHtmlSpace(count);
    return getSpace(count);
}

/**
 * 获取n个"  "
 */
function getJoinFormat(type) {
    if (type == "ios")return "\n";
    if (type == "android")return "\n";
    if (type == "ios_special")return "\n";
    if (type == "ios_code")return "<br>";
    if (type == "swift_code")return "\n";
    if (type == "android_special")return "<br>";
    return "\n";
}

/**
 * 消除特殊字符,包括html标签,得到纯文本代码
 */
function clearCodeSpecialChar(text){
    if(text.includes("┈"))text = text.replaceAll("┈","\t");
    if(text.includes("&nbsp;"))text = text.replaceAll("&nbsp;","\t");
    if(text.includes("<br>"))text = text.replaceAll("<br>","\t");
    if(text.includes("\&lt"))text = text.replaceAll("\&lt","<");
    if(text.includes("\&gt"))text = text.replaceAll("\&gt",">");
    return text;
}

function hasOutIndex_xml(text) {
    var arr = new Array();
    arr.push("/>");arr.push("/\&gt");
    for (let i = 0; i < arr.length; i++) {
        var str = arr[i];
        if (text.endsWith(str)) { return 1; }
    }
    var arrPrefix = new Array();
    arrPrefix.push("</");arrPrefix.push("\&lt/");
    for (let i = 0; i < arrPrefix.length; i++) {
        var str = arrPrefix[i];
        if (text.includes(str)) { return 2; }
    }
    return 0;
}

function hasInIndex_xml(text) {
    var arr = new Array();
    arr.push("<");arr.push("\&lt");
    for (let i = 0; i < arr.length; i++) {
        var str = arr[i];
        if (text.startsWith(str) && !text.startsWith("</") && !text.startsWith("\&lt/")) { return true; }
    }
    return false;
}

function hasOutIndex_code(text) {
    var arr = new Array();
    arr.push("}");
    arr.push("});");
    for (let i = 0; i < arr.length; i++) {
        var str = arr[i];
        if (text.endsWith(str)) { return true; }
    }
    var arrPrefix = new Array();
    arrPrefix.push("}");
    for (let i = 0; i < arrPrefix.length; i++) {
        var str = arrPrefix[i];
        if (text.startsWith(str)) { return true; }
    }
    return false;
}

function hasInIndex_code(text) {
    var arr = new Array();
    arr.push("{");
    for (let i = 0; i < arr.length; i++) {
        var str = arr[i];
        if (text.endsWith(str))return true;
        if (text.includes("{")) {
            var tempStr = text.substring(text.indexOf("{")+1,text.length);
            tempStr = removeSpacePrefixSuffix(tempStr);
            if (tempStr.startsWith("//")) return true;
        }
    }
    return false;
}

function hasInIndexSpecial_code(text) {
    if (text.endsWith("else")){
        formatCode_specialCount = 1;
        return true;
    }
    if (text.endsWith(")")){
        if (text.startsWith("if")){
            formatCode_specialCount = 1;
            return true;
        }
    }
    return false;
}

/**
 * 格式化xml
 */
function formatXml(text,type) {
    var arrM = new Array();
    var arr = text.split("\n");
    for (let i = 0; i < arr.length; i++) {
        var str = arr[i];
        str = removeSpacePrefixSuffix(str);
        if (str.length > 0){//消除空行
            arrM.push(str);
        }
    }
    var count = 0;
    var tempStr;
    var arrMText = new Array();
    for (let i = 0; i < arrM.length; i++) {
        var str = arrM[i];
        if (str.startsWith("<?") || str.startsWith("<!") || str.startsWith("\&lt?") || str.startsWith("\&lt!")){
            arrMText.push(getSpaceFormat(count,type) + str);
        } else {
            tempStr = str;
            if(hasOutIndex_xml(tempStr) == 1){
                arrMText.push(getSpaceFormat(count,type) + tempStr);
                count--;if (count == -1) count = 0;
            }else if (hasOutIndex_xml(tempStr) > 0){
                count--;if (count == -1) count = 0;
                arrMText.push(getSpaceFormat(count,type) + tempStr);
            }else {
                arrMText.push(getSpaceFormat(count,type) + tempStr);
            }
            if (hasInIndex_xml(tempStr))count ++;
        }
    }
    text = arrMText.join(getJoinFormat(type));
    return text;
}

/**
 * 格式化android_xml
 */
function formatXml_android(text) {
    return formatXml(text,"android");
}

/**
 * 格式化android_special_xml
 */
function formatXml_android_special(text) {
    text = xml_for_html_show(text);
    return formatXml(text,"android_special");
}

/**
 * 格式化ios_special_xml
 */
function formatXml_ios_special(text) {
    return formatXml(text,"ios_special");
}

/**
 * 格式化ios_xml
 */
function formatXml_ios(text) {
    return formatXml(text,"ios");
}

/**
 * 格式化代码
 */
var formatCode_specialCount = 0;
function formatCode(text,type) {
    var arrM = new Array();
    var arr = text.split("\n");
    for (let i = 0; i < arr.length; i++) {
        var str = arr[i];
        str = removeSpacePrefixSuffix(str);
        if (str.length > 0){//消除空行
            arrM.push(str);
        }
    }
    var count = 0;
    var tempStr;
    var arrMText = new Array();
    for (let i = 0; i < arrM.length; i++) {
        var str = arrM[i];
        if (str.startsWith("//")){//如果是注释,不做处理
            arrMText.push(getSpaceFormat(count,type) + str);
        }else {
            tempStr = str;
            if(hasOutIndex_code(tempStr)){
                count--;if (count == -1) count = 0;
            }else {
                if (formatCode_specialCount == 1) count ++;
            }
            arrMText.push(getSpaceFormat(count,type) + str);
            if (hasInIndex_code(tempStr)) { count++; }
            if (hasInIndexSpecial_code(tempStr) == false){
                if (formatCode_specialCount == 1) {
                    count--;
                    if (count == -1) count = 0;
                }
                formatCode_specialCount = 0;
            }
        }
    }
    text = arrMText.join(getJoinFormat(type));
    return text;
}

/**
 * 格式化ios_code
 */
function formatCode_ios(text) {
    var code = formatCode(text,"ios_code");
    if(code && code.length > 0){
        code = code.replaceAll("});","});\n");
        if (code.endsWith("\n"))code = code.substring(0,code.length - 1);
    }
    return code;
}

/**
 * 格式化ios_code
 */
function formatCode_swift(text) {
    var code = formatCode(text,"swift_code");
    if(code && code.length > 0){
        code = code.replaceAll("let","\nlet");
        if (code.startsWith("\n"))code = code.substring(1,code.length);
    }
    return code;
}

/**
 * xml显示到innerHTML里面,标签会被解析,显示不出来,这个专门做转义处理
 */
function xml_for_html_show(text) {
    text=text.replace(/</g, "\&lt");
    text=text.replace(/>/g, "\&gt");
    return text;
}


function copyClipboard(text) {
    if (text && text.length > 0){
        const input = document.createElement('textarea');
        document.body.appendChild(input);
        input.innerHTML = text;
        input.setAttribute('code',1);
        input.select();
        document.execCommand("Copy");

        var list = document.getElementsByTagName('textarea');
        var inputList = Array.prototype.slice.call(list);
        inputList.forEach((item)=>{
            if(item.getAttribute('code'))document.body.removeChild(item);
        });
        showToast("复制成功");
    }
}

function js_template_escape(ret) {
    if (ret && ret.length > 0){
        while(ret.includes("&lt;") ||
            ret.includes("&gt;") ||
            ret.includes("&amp;") ||
            ret.includes("&quot;") ||
            ret.includes("&#39;")
            ){
            if (ret.includes("&lt;")) ret = ret.replace(new RegExp("&lt;","gm"),"<");
            if (ret.includes("&gt;")) ret = ret.replace(new RegExp("&gt;","gm"),">");
            if (ret.includes("&amp;")) ret = ret.replace(new RegExp("&amp;","gm"),"&");
            if (ret.includes("&quot;")) ret = ret.replace(new RegExp("&quot;","gm"),"\"");
            if (ret.includes("&#39;")) ret = ret.replace(new RegExp("&#39;","gm"),"'");
        }
    }
    return ret;
}

/**
 * rgba -> hex
 */
function rgba_to_hex(rgba){
    if (rgba){
        var hexs = new Array();
        if (rgba.length >= 4 && parseFloat(rgba[3]) < 1) {
            if (parseFloat(rgba[3]) <= 0) hexs.push("00");
            else hexs.push((parseFloat(rgba[3]) * 255).toString(16));
        }
        if (rgba.length >= 3) for (let i = 0; i < 3; i++) {
            if (parseFloat(rgba[i]) <= 0) hexs.push("00");
            else hexs.push(parseFloat(rgba[i]).toString(16));
        }
        if (hexs.length > 0) {
            var hexStr = hexs.join("");
            if (hexStr != "00000000") return "#" + hexStr;
        }
    }
    return "";
}

/**
 * rgba / 255
 */
function rgb_div_255(rgb){
    if (isNum(rgb) && parseFloat(rgb) > 1){
        rgb = "" + (parseFloat(rgb) / 255.0);
    }
    return rgb;
}

function isHtmlCode(text){
    if (text && text.length > 0){
        if (text.includes("<br>") || text.includes("&nbsp;"))return true;
    }
    return false;
}

//------------------- 字符串工具 模块 -------------------


//------------------- Dom 模块 -------------------

/**
 * 查找dom
 */
function findDomView(className) {
    var view = $('*[class*="page_copy"]').find("*[class*='"+className+"']");
    return view;
}

/**
 * Toast提示
 */
function showToast(msg){
    var m = document.createElement('div');
    m.innerHTML = msg;
    m.style.cssText="width:20%; font-size: 8px;background:#000; opacity:0.8; height:auto;min-height: 30px; color:#fff; line-height:30px; text-align:center; border-radius:4px; position:fixed; top:10%; left:40%; z-index:999999;";
    document.body.appendChild(m);
    setTimeout(function() {
        var d = 0.5;
        m.style.webkitTransition = '-webkit-transform ' + d + 's ease-in, opacity ' + d + 's ease-in';
        m.style.opacity = '0';
        setTimeout(function() { document.body.removeChild(m) }, d * 1000);
    }, 1500);
}




// OC SWIFT

/**
 * 初始化切换控件类型面板数据
 */
var ios_switch_view_type_dialog_is_init = false;
function initDefineDialogIos_OC_Swift(){
    if (ios_switch_view_type_dialog_is_init == true)return;
    ios_switch_view_type_dialog_is_init = true;

    var datas = new Array();
    var data_sub1 = new Array();
    data_sub1.push({"bg_id":"ios_switch_view_type_bg1","img_id":"ios_switch_view_type_img1","text_id":"ios_switch_view_type_text1","text":"UILabel","src":"https://upload-images.jianshu.io/upload_images/14003450-c114e679a24d1e8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    data_sub1.push({"bg_id":"ios_switch_view_type_bg2","img_id":"ios_switch_view_type_img2","text_id":"ios_switch_view_type_text2","text":"UIImageView","src":"https://upload-images.jianshu.io/upload_images/14003450-e69ce0ad8e908007.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    data_sub1.push({"bg_id":"ios_switch_view_type_bg3","img_id":"ios_switch_view_type_img3","text_id":"ios_switch_view_type_text3","text":"UIButton","src":"https://upload-images.jianshu.io/upload_images/14003450-5308bad9df4eb932.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    data_sub1.push({"bg_id":"ios_switch_view_type_bg4","img_id":"ios_switch_view_type_img4","text_id":"ios_switch_view_type_text4","text":"UIView","src":"https://upload-images.jianshu.io/upload_images/14003450-00a22844a1138a38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    var data_sub2 = new Array();
    data_sub2.push({"bg_id":"ios_switch_view_type_bg5","img_id":"ios_switch_view_type_img5","text_id":"ios_switch_view_type_text5","text":"UITextField","src":"https://upload-images.jianshu.io/upload_images/14003450-7d82eb225c1ea8da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    data_sub2.push({"bg_id":"ios_switch_view_type_bg6","img_id":"ios_switch_view_type_img6","text_id":"ios_switch_view_type_text6","text":"UITextView","src":"https://upload-images.jianshu.io/upload_images/14003450-619c41116d084826.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    data_sub2.push({"bg_id":"ios_switch_view_type_bg7","img_id":"ios_switch_view_type_img7","text_id":"ios_switch_view_type_text7","text":"UIScrollView","src":"https://upload-images.jianshu.io/upload_images/14003450-835c390a62e9fac4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    data_sub2.push({"bg_id":"ios_switch_view_type_bg8","img_id":"ios_switch_view_type_img8","text_id":"ios_switch_view_type_text8","text":"UISwitch","src":"https://upload-images.jianshu.io/upload_images/14003450-4dffa33d04f87d6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    var data_sub3 = new Array();
    data_sub3.push({"bg_id":"ios_switch_view_type_bg9","img_id":"ios_switch_view_type_img9","text_id":"ios_switch_view_type_text9","text":"UIActivityIndicatorView","src":"https://upload-images.jianshu.io/upload_images/14003450-98ce5ec9fa78dcdb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    data_sub3.push({"bg_id":"ios_switch_view_type_bg10","img_id":"ios_switch_view_type_img10","text_id":"ios_switch_view_type_text10","text":"UIProgressView","src":"https://upload-images.jianshu.io/upload_images/14003450-2857fb5d5ba168f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    data_sub3.push({"bg_id":"ios_switch_view_type_bg11","img_id":"ios_switch_view_type_img11","text_id":"ios_switch_view_type_text11","text":"UITableView","src":"https://upload-images.jianshu.io/upload_images/14003450-c5eae0711075f94b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    data_sub3.push({"bg_id":"ios_switch_view_type_bg12","img_id":"ios_switch_view_type_img12","text_id":"ios_switch_view_type_text12","text":"UICollectionView","src":"https://upload-images.jianshu.io/upload_images/14003450-ff91b56ce74d6c3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    var data_sub4 = new Array();
    data_sub4.push({"bg_id":"ios_switch_view_type_bg13","img_id":"ios_switch_view_type_img13","text_id":"ios_switch_view_type_text13","text":"UIStepper","src":"https://upload-images.jianshu.io/upload_images/14003450-b1cf5711506871f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    data_sub4.push({"bg_id":"ios_switch_view_type_bg14","img_id":"ios_switch_view_type_img14","text_id":"ios_switch_view_type_text14","text":"UIPageControl","src":"https://upload-images.jianshu.io/upload_images/14003450-44fc6322e7e24181.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    data_sub4.push({"bg_id":"ios_switch_view_type_bg15","img_id":"ios_switch_view_type_img15","text_id":"ios_switch_view_type_text15","text":"UIPickerView","src":"https://upload-images.jianshu.io/upload_images/14003450-f55cf3f4135f3cad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    data_sub4.push({"bg_id":"ios_switch_view_type_bg16","img_id":"ios_switch_view_type_img16","text_id":"ios_switch_view_type_text16","text":"UIDatePicker","src":"https://upload-images.jianshu.io/upload_images/14003450-9983042c31cfb901.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    var data_sub5 = new Array();
    data_sub5.push({"bg_id":"ios_switch_view_type_bg17","img_id":"ios_switch_view_type_img17","text_id":"ios_switch_view_type_text17","text":"UIMapView","src":"https://upload-images.jianshu.io/upload_images/14003450-88202e84842e97da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    data_sub5.push({"bg_id":"ios_switch_view_type_bg18","img_id":"ios_switch_view_type_img18","text_id":"ios_switch_view_type_text18","text":"UISearchBar","src":"https://upload-images.jianshu.io/upload_images/14003450-78fbea9bbacc5422.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    data_sub5.push({"bg_id":"ios_switch_view_type_bg19","img_id":"ios_switch_view_type_img19","text_id":"ios_switch_view_type_text19","text":"WKWebView","src":"https://upload-images.jianshu.io/upload_images/14003450-ba6ad7b78384f942.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    data_sub5.push({"bg_id":"ios_switch_view_type_bg20","img_id":"ios_switch_view_type_img20","text_id":"ios_switch_view_type_text20","text":"UISlider","src":"https://upload-images.jianshu.io/upload_images/14003450-279c6b081ff83d9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    datas.push(data_sub1,data_sub2,data_sub3,data_sub4,data_sub5);

    var mapJson = {"root":{"datas":datas}};
    var templateInputValue = document.getElementById('tmpl-define-dialog-father').innerHTML.replace(/^\n|\s+$| {6}/g,'');
    var ret = tmpl(templateInputValue, mapJson);
    ret = js_template_escape(ret);
    ret = formatXml_android(ret);
    var dialog = $("#ios_switch_view_type_dialog");
    var info_view_type_bg = $("#info_view_type_bg");
    dialog.append(ret);
    dialog.css("margin-left",info_view_type_bg.offset().left + "px");
    dialog.css("margin-top",(info_view_type_bg.offset().top + 40) + "px");
    document.getElementById("ios_switch_view_type_dialog").addEventListener('click', function (ev) {
        if (ev.target.nodeName === 'DIALOG')hide_ios_switch_view_type_dialog();
    });
    //添加点击事件
    dialog.find("*[class*='define_view_box_view']").on({
        click: function (event) {
            var text = $(this).text();
            switch_view_type_callback(text);
            hide_ios_switch_view_type_dialog();
            event.stopPropagation();
        }
    });
}

var ios_switch_view_type_dialog_is_show = false;
function show_ios_switch_view_type_dialog() {
    if (ios_switch_view_type_dialog_is_show == true)return;
    ios_switch_view_type_dialog_is_show = true;
    var dom_dialog = document.getElementById("ios_switch_view_type_dialog");
    dom_dialog.showModal();
}
function show_swift_switch_view_type_dialog() {
    show_ios_switch_view_type_dialog();
}
function hide_ios_switch_view_type_dialog() {
    if (ios_switch_view_type_dialog_is_show == false)return;
    ios_switch_view_type_dialog_is_show = false;
    var dom_dialog = document.getElementById("ios_switch_view_type_dialog");
    dom_dialog.close();
}

function initDefineDialogIos(){
    initDefineDialogIos_OC_Swift();
}

function initDefineDialogSwift(){
    initDefineDialogIos_OC_Swift();
}

// OC SWIFT



// 安卓

/**
 * 初始化切换控件类型面板数据
 */
var android_switch_view_type_dialog_is_init = false;
function initDefineDialogAndroid(){
    if (android_switch_view_type_dialog_is_init == true)return;
    android_switch_view_type_dialog_is_init = true;

    var datas = new Array();
    var data_sub1 = new Array();
    data_sub1.push({"bg_id":"android_switch_view_type_bg1","img_id":"android_switch_view_type_img1","text_id":"android_switch_view_type_text1","text":"TextView","src":"https://upload-images.jianshu.io/upload_images/14003450-c114e679a24d1e8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    data_sub1.push({"bg_id":"android_switch_view_type_bg2","img_id":"android_switch_view_type_img2","text_id":"android_switch_view_type_text2","text":"ImageView","src":"https://upload-images.jianshu.io/upload_images/14003450-e69ce0ad8e908007.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    data_sub1.push({"bg_id":"android_switch_view_type_bg3","img_id":"android_switch_view_type_img3","text_id":"android_switch_view_type_text3","text":"Button","src":"https://upload-images.jianshu.io/upload_images/14003450-5308bad9df4eb932.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    data_sub1.push({"bg_id":"android_switch_view_type_bg4","img_id":"android_switch_view_type_img4","text_id":"android_switch_view_type_text4","text":"RelativeLayout","src":"https://upload-images.jianshu.io/upload_images/14003450-00a22844a1138a38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    var data_sub2 = new Array();
    data_sub2.push({"bg_id":"android_switch_view_type_bg5","img_id":"android_switch_view_type_img5","text_id":"android_switch_view_type_text5","text":"EditText","src":"https://upload-images.jianshu.io/upload_images/14003450-7d82eb225c1ea8da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    data_sub2.push({"bg_id":"android_switch_view_type_bg7","img_id":"android_switch_view_type_img7","text_id":"android_switch_view_type_text7","text":"ScrollView","src":"https://upload-images.jianshu.io/upload_images/14003450-835c390a62e9fac4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    data_sub2.push({"bg_id":"android_switch_view_type_bg8","img_id":"android_switch_view_type_img8","text_id":"android_switch_view_type_text8","text":"Switch","src":"https://upload-images.jianshu.io/upload_images/14003450-4dffa33d04f87d6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    data_sub2.push({"bg_id":"android_switch_view_type_bg10","img_id":"android_switch_view_type_img10","text_id":"android_switch_view_type_text10","text":"ProgressBar","src":"https://upload-images.jianshu.io/upload_images/14003450-2857fb5d5ba168f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    var data_sub3 = new Array();
    data_sub3.push({"bg_id":"android_switch_view_type_bg11","img_id":"android_switch_view_type_img11","text_id":"android_switch_view_type_text11","text":"RecyclerView","src":"https://upload-images.jianshu.io/upload_images/14003450-c5eae0711075f94b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    data_sub3.push({"bg_id":"android_switch_view_type_bg16","img_id":"android_switch_view_type_img16","text_id":"android_switch_view_type_text16","text":"DatePicker","src":"https://upload-images.jianshu.io/upload_images/14003450-9983042c31cfb901.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    data_sub3.push({"bg_id":"android_switch_view_type_bg19","img_id":"android_switch_view_type_img19","text_id":"android_switch_view_type_text19","text":"WebView","src":"https://upload-images.jianshu.io/upload_images/14003450-ba6ad7b78384f942.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    data_sub3.push({"bg_id":"android_switch_view_type_bg20","img_id":"android_switch_view_type_img20","text_id":"android_switch_view_type_text20","text":"SeekBar","src":"https://upload-images.jianshu.io/upload_images/14003450-279c6b081ff83d9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    datas.push(data_sub1,data_sub2,data_sub3);

    var mapJson = {"root":{"datas":datas}};
    var templateInputValue = document.getElementById('tmpl-define-dialog-father').innerHTML.replace(/^\n|\s+$| {6}/g,'');
    var ret = tmpl(templateInputValue, mapJson);
    ret = js_template_escape(ret);
    ret = formatXml_android(ret);
    var dialog = $("#android_switch_view_type_dialog");
    var info_view_type_bg = $("#info_view_type_bg");
    dialog.append(ret);
    dialog.css("margin-left",info_view_type_bg.offset().left + "px");
    dialog.css("margin-top",(info_view_type_bg.offset().top + 40) + "px");
    document.getElementById("android_switch_view_type_dialog").addEventListener('click', function (ev) {
        if (ev.target.nodeName === 'DIALOG')hide_android_switch_view_type_dialog();
    });
    //添加点击事件
    dialog.find("*[class*='define_view_box_view']").on({
        click: function (event) {
            var text = $(this).text();
            switch_view_type_callback(text);
            hide_android_switch_view_type_dialog();
            event.stopPropagation();
        }
    });
}


var android_switch_view_type_dialog_is_show = false;
function show_android_switch_view_type_dialog() {
    if (android_switch_view_type_dialog_is_show == true)return;
    android_switch_view_type_dialog_is_show = true;
    var dom_dialog = document.getElementById("android_switch_view_type_dialog");
    dom_dialog.showModal();
}
function hide_android_switch_view_type_dialog() {
    if (android_switch_view_type_dialog_is_show == false) return;
    android_switch_view_type_dialog_is_show = false;
    var dom_dialog = document.getElementById("android_switch_view_type_dialog");
    dom_dialog.close();
}

// 安卓


// 控件合成 - OC SWIFT

/**
 * 初始化合成控件类型面板数据
 */
var ios_union_view_type_dialog_is_init = false;
function initDefineUnionDialogIos_OC_Swift(){
    if (ios_union_view_type_dialog_is_init == true)return;
    ios_union_view_type_dialog_is_init = true;

    var datas = new Array();
    var data_sub1 = new Array();
    data_sub1.push({"bg_id":"ios_union_view_type_bg3","img_id":"ios_union_view_type_img3","text_id":"ios_union_view_type_text3","text":"UIButton","src":"https://upload-images.jianshu.io/upload_images/14003450-5308bad9df4eb932.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    data_sub1.push({"bg_id":"ios_union_view_type_bg5","img_id":"ios_union_view_type_img5","text_id":"ios_union_view_type_text5","text":"UITextField","src":"https://upload-images.jianshu.io/upload_images/14003450-7d82eb225c1ea8da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    data_sub1.push({"bg_id":"ios_union_view_type_bg6","img_id":"ios_union_view_type_img6","text_id":"ios_union_view_type_text6","text":"UITextView","src":"https://upload-images.jianshu.io/upload_images/14003450-619c41116d084826.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    datas.push(data_sub1);

    var mapJson = {"root":{"datas":datas}};
    var templateInputValue = document.getElementById('tmpl-define-dialog-father').innerHTML.replace(/^\n|\s+$| {6}/g,'');
    var ret = tmpl(templateInputValue, mapJson);
    ret = js_template_escape(ret);
    ret = formatXml_android(ret);
    var dialog = $("#ios_union_view_type_dialog");
    var info_view_layer_union_bg = $("#info_view_layer_union_bg");
    dialog.append(ret);
    dialog.css("margin-left",info_view_layer_union_bg.offset().left + "px");
    dialog.css("margin-top",(info_view_layer_union_bg.offset().top + 40) + "px");
    document.getElementById("ios_union_view_type_dialog").addEventListener('click', function (ev) {
        if (ev.target.nodeName === 'DIALOG')hide_ios_union_view_type_dialog();
    });
    //添加点击事件
    dialog.find("*[class*='define_view_box_view']").on({
        click: function (event) {
            var text = $(this).text();
            union_view_type_callback(text);
            hide_ios_union_view_type_dialog();
            event.stopPropagation();
        }
    });
}

var ios_union_view_type_dialog_is_show = false;
function show_ios_union_view_type_dialog() {
    if (ios_union_view_type_dialog_is_show == true)return;
    ios_union_view_type_dialog_is_show = true;
    var dom_dialog = document.getElementById("ios_union_view_type_dialog");
    dom_dialog.showModal();
}
function show_swift_union_view_type_dialog() {
    show_ios_union_view_type_dialog();
}
function hide_ios_union_view_type_dialog() {
    if (ios_union_view_type_dialog_is_show == false)return;
    ios_union_view_type_dialog_is_show = false;
    var dom_dialog = document.getElementById("ios_union_view_type_dialog");
    dom_dialog.close();
}

function initDefineUnionDialogIos(){
    initDefineUnionDialogIos_OC_Swift();
}

function initDefineUnionDialogSwift(){
    initDefineUnionDialogIos_OC_Swift();
}

// 控件合成 - OC SWIFT


// 控件合成 - 安卓

/**
 * 初始化合成控件类型面板数据
 */
var android_union_view_type_dialog_is_init = false;
function initDefineUnionDialogAndroid(){
    if (android_union_view_type_dialog_is_init == true)return;
    android_union_view_type_dialog_is_init = true;

    var datas = new Array();
    var data_sub1 = new Array();
    data_sub1.push({"bg_id":"android_union_view_type_bg3","img_id":"android_union_view_type_img3","text_id":"android_union_view_type_text3","text":"Button","src":"https://upload-images.jianshu.io/upload_images/14003450-5308bad9df4eb932.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    data_sub1.push({"bg_id":"android_union_view_type_bg6","img_id":"android_union_view_type_img6","text_id":"android_union_view_type_text6","text":"EditText","src":"https://upload-images.jianshu.io/upload_images/14003450-619c41116d084826.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"});
    datas.push(data_sub1);

    var mapJson = {"root":{"datas":datas}};
    var templateInputValue = document.getElementById('tmpl-define-dialog-father').innerHTML.replace(/^\n|\s+$| {6}/g,'');
    var ret = tmpl(templateInputValue, mapJson);
    ret = js_template_escape(ret);
    ret = formatXml_android(ret);
    var dialog = $("#android_union_view_type_dialog");
    var info_view_layer_union_bg = $("#info_view_layer_union_bg");
    dialog.append(ret);
    dialog.css("margin-left",info_view_layer_union_bg.offset().left + "px");
    dialog.css("margin-top",(info_view_layer_union_bg.offset().top + 40) + "px");
    document.getElementById("android_union_view_type_dialog").addEventListener('click', function (ev) {
        if (ev.target.nodeName === 'DIALOG')hide_android_union_view_type_dialog();
    });
    //添加点击事件
    dialog.find("*[class*='define_view_box_view']").on({
        click: function (event) {
            var text = $(this).text();
            union_view_type_callback(text);
            hide_android_union_view_type_dialog();
            event.stopPropagation();
        }
    });
}

var android_union_view_type_dialog_is_show = false;
function show_android_union_view_type_dialog() {
    if (android_union_view_type_dialog_is_show == true)return;
    android_union_view_type_dialog_is_show = true;
    var dom_dialog = document.getElementById("android_union_view_type_dialog");
    dom_dialog.showModal();
}
function hide_android_union_view_type_dialog() {
    if (android_union_view_type_dialog_is_show == false)return;
    android_union_view_type_dialog_is_show = false;
    var dom_dialog = document.getElementById("android_union_view_type_dialog");
    dom_dialog.close();
}

// 控件合成 - 安卓





// 设置弹框模块

/**
 * 初始化合成控件类型面板数据
 */
var software_set_dialog_is_init = false;
function init_software_set_dialog(){
    if (software_set_dialog_is_init == true)return;
    software_set_dialog_is_init = true;

    var templateValue = document.getElementById('tmpl-set-dialog').innerHTML.replace(/^\n|\s+$| {6}/g,'');
    var dialog = $("#software_set_dialog");
    dialog.append(templateValue);
    document.getElementById("software_set_dialog").addEventListener('click', function (ev) {
        if (ev.target.nodeName === 'DIALOG')hide_software_set_dialog();
    });
}

var software_set_dialog_is_show = false;
function show_software_set_dialog() {
    if (software_set_dialog_is_show == true)return;
    software_set_dialog_is_show = true;
    var dom_dialog = document.getElementById("software_set_dialog");
    dom_dialog.showModal();
}
function hide_software_set_dialog() {
    if (software_set_dialog_is_show == false)return;
    software_set_dialog_is_show = false;
    var dom_dialog = document.getElementById("software_set_dialog");
    dom_dialog.close();
}

// 设置弹框模块

//------------------- Dom 模块 -------------------





//------------------- 控件信息组合 模块 -------------------



function assembleProperty(){
    //拼装属性,得到控件所有属性
    var array = new Array();
    var cur = 0;

    //获取画布的x,y
    var canvas_x = $('*[class*="page_copy"]').offset().left;
    var canvas_y = $('*[class*="page_copy"]').offset().top;

    $('*[class^="page_copy"]').find("*").each(function(){
        var isClass = false;
        var className = "";
        var src = "";
        $.each(this.attributes, function() {
            if(this.specified) {
                var name = this.name;
                var value = this.value;
                if(name == "src") src = value;
                if(name == "class"){
                    className = value;
                    isClass = true;
                }
            }
        });
        if(isClass == true){
            //拼装属性
            var map = {};
            map["cur"] = cur.toString();cur ++;
            map["className"] = className.toString();
            var tagName = $(this)[0].tagName;  map["tagName"] = tagName.toString();
            var index = $(this).parents().length;  map["index"] = index.toString();
            var brother_index = $(this).index();  map["brother_index"] = brother_index.toString();
            var parent = $(this).parent().prop("class"); map["parent"] = parent.toString();
            var visibility = $(this).css("visibility");map["visibility"] = visibility;
            var window_x = $(this).offset().left - canvas_x;  map["window_x"] = window_x.toString();
            var window_y = $(this).offset().top - canvas_y;  map["window_y"] = window_y.toString();
            var width = $(this).width();  map["width"] = width.toString();
            var height = $(this).height();  map["height"] = height.toString();
            var background_color = $(this).css("background-color");  map["background_color"] = background_color.toString();
            var left = $(this).css("left");  map["left"] = left.toString();
            var top = $(this).css("top");  map["top"] = top.toString();
            var right = $(this).css("right");  map["right"] = right.toString();
            var bottom = $(this).css("bottom");  map["bottom"] = bottom.toString();
            var margin = $(this).css("margin");  map["margin"] = margin.toString();
            var margin_top = $(this).css("margin-top");  map["margin_top"] = margin_top.toString();
            var margin_left = $(this).css("margin-left");  map["margin_left"] = margin_left.toString()
            var margin_right = $(this).css("margin-right");  map["margin_right"] = margin_right.toString();
            var margin_bottom = $(this).css("margin-bottom");  map["margin_bottom"] = margin_bottom.toString();
            var color = $(this).css("color");  map["color"] = color.toString();
            var font_size = $(this).css("font-size");  map["font_size"] = font_size.toString();
            var font_family = $(this).css("font-family");  map["font_family"] = font_family.toString();
            var line_height = $(this).css("line-height");  map["line_height"] = line_height.toString();
            var text_align = $(this).css("text-align");  map["text_align"] = text_align.toString();
            var border = $(this).css("border");  map["border"] = border.toString();
            var border_radius = $(this).css("border-radius");  map["border_radius"] = border_radius.toString();
            var background = $(this).css("background");  map["background"] = background.toString();
            var justify_content = $(this).css("justify-content");  map["justify_content"] = justify_content.toString();
            var display = $(this).css("display");  map["display"] = display.toString();
            var flex_direction = $(this).css("flex-direction");  map["flex_direction"] = flex_direction.toString();
            var opacity = $(this).css("opacity");  map["opacity"] = opacity.toString();
            var align_items = $(this).css("align-items");  map["align_items"] = align_items.toString();
            if (tagName.toLowerCase() == "span"){
                var text = $(this).text();  map["text"] = text;
                if(color) map["text_color"] = color;
            }
            if (src && src.length > 0) map["src"] = src;
            array.push(map);
        }
    });
    return array;
}


//------------------- 控件信息组合 模块 -------------------



//------------------- 添加HTML界面 模块 -------------------

//添加复制界面html
var page_div = $("body").children(".page");
var className = page_div.prop("class");
page_div.attr("class",className + " " + "fuceng");
var page_html = page_div.html();
var page_copy_html = "<div class='page_copy " + className + " fuceng" +"'>" + page_html + "</div>";
$("body").children(".page").after(page_copy_html);

//添加操作模块界面
var operatingAreaHTML = document.getElementById('operating-area').innerHTML//操作模板数据
$('*[class^="page "]').after(operatingAreaHTML);

//添加切换语言模块界面
var operatingAreaHTML = document.getElementById('operating-lan').innerHTML//操作模板数据
$('*[class^="page_copy"]').after(operatingAreaHTML);

//添加控件信息模块界面
var operatingAreaHTML = document.getElementById('show_info_view').innerHTML//操作模板数据
$('*[class^="operating_lan_div"]').after(operatingAreaHTML);

//------------------- 添加HTML界面 模块 -------------------

//------------------- 显示信息公共方法 模块 -------------------

function info_view_type_lan(text) {
    if (isIOS())return "UI"+upperFirstCase(text);
    if (isANDROID())return upperFirstCase(text);
    if (isFLUTTER())return upperFirstCase(text);
    if (isSWIFT())return "UI"+upperFirstCase(text);
    return text;
}

function chang_to_info_view_type_lan(text) {
    if (isIOS()) {
        if(text.startsWith("UI"))text = text.substring(2,text.length);
        return lowerFirstCase(text);
    }
    if (isANDROID())return lowerFirstCase(text);
    if (isFLUTTER())return lowerFirstCase(text);
    if (isSWIFT()) {
        if(text.startsWith("UI"))text = text.substring(2,text.length);
        return lowerFirstCase(text);
    }
    return text;
}

//------------------- 显示信息公共方法 模块 -------------------





//------------------- 选择控件后,显示信息到右边的显示面板 模块 -------------------

var info_view_type = document.getElementById('info_view_type');
var info_view_type_bg = document.getElementById('info_view_type_bg');
var info_view_define_name = document.getElementById('info_view_define_name');
var info_view_define_name_bg = document.getElementById('info_view_define_name_bg');
var info_view_layer_union = document.getElementById('info_view_layer_union');
var info_view_layer_union_bg = document.getElementById('info_view_layer_union_bg');
var info_view_code = document.getElementById('info_view_code');

var curSelClassName = "";
var curSelDomView = null;//选中的Dom View控件
var curSelMapView = null;//选中的Json组合数据中的Map节点
var curViews = "";//当前所有控件Map

// 输入框输入事件代理回调
$("input[id='info_view_define_name']").on('change', function () {
    var text = info_view_define_name.value + "";
    db_saveData(curSelClassName,text,Save_Data_Type_Define_Name());
    showToast("命名成功");
    changeViewInfoDone();
});

//切换控件类型事件回调
function switch_view_type_callback(viewType) {
    viewType = removeSpacePrefixSuffixNewLine(viewType);
    showToast("已更改成"+viewType);
    viewType = chang_to_info_view_type_lan(viewType);//要切换成对应的兼容类型
    db_saveData(curSelClassName,viewType,Save_Data_Type_Switch_View_Type());
    changeViewInfoDone();
}

//合并控件类型事件回调
function union_view_type_callback(viewType) {
    viewType = removeSpacePrefixSuffixNewLine(viewType);
    showToast("已合成为"+viewType);
    viewType = chang_to_info_view_type_lan(viewType);//要切换成对应的兼容类型
    //unionViewType 内容格式:className1,className2,unionViewType
    var fatherClassName = curSelMapView.parent;
    var unionViewTypeStr = fatherClassName + "," + curSelClassName + ","+viewType;
    db_saveData(fatherClassName,unionViewTypeStr,Save_Data_Type_Union_View_Type());
    db_saveData(curSelClassName,unionViewTypeStr,Save_Data_Type_Union_View_Type());
    changeViewInfoDone();
}

//修改属性成功,并刷新属性信息
function changeViewInfoDone() {
    refresh_show_select_view();
}

info_view_type_bg.onclick = function() {
    if (isIOS()){
        initDefineDialogIos();
        show_ios_switch_view_type_dialog();
    }
    if (isSWIFT()){
        initDefineDialogSwift();
        show_swift_switch_view_type_dialog();
    }
    if (isANDROID()){
        initDefineDialogAndroid();
        show_android_switch_view_type_dialog();
    }
    if (isFLUTTER()){

    }
};
info_view_define_name_bg.onclick = function() {
    $('#info_view_define_name_bg').focus();
};
info_view_layer_union_bg.onclick = function() {
    if (isIOS()){
        initDefineUnionDialogIos();
        show_ios_union_view_type_dialog();
    }
    if (isSWIFT()){
        initDefineUnionDialogSwift();
        show_swift_union_view_type_dialog();
    }
    if (isANDROID()){
        initDefineUnionDialogAndroid();
        show_android_union_view_type_dialog();
    }
    if (isFLUTTER()){

    }
};
info_view_code.onclick = function() {
    var text = info_view_code.innerText;
    text = clearCodeSpecialChar(text);
    copyClipboard(text);
};

function info_view_type_bg_can_click(can) {
    if (can) {
        $("#info_view_type_bg").css("pointer-events", "auto");
        $("#info_view_type_bg").attr("title","点击切换控件类型");
        $("#info_view_type_img").css("opacity", 1);
    } else {
        $("#info_view_type_bg").css("pointer-events", "none");
        $("#info_view_type_bg").attr("title","");
        $("#info_view_type_img").css("opacity", 0);
    }
}

function info_view_define_name_bg_can_click(can) {
    if (can) {
        $("#info_view_define_name_bg").css("pointer-events", "auto");
        $("#info_view_define_name_bg").attr("title","点击开始输入名称");
        $("#info_view_define_name_img").css("opacity", 1);
    } else {
        $("#info_view_define_name_bg").css("pointer-events", "none");
        $("#info_view_define_name_bg").attr("title","");
        $("#info_view_define_name_img").css("opacity", 0);
    }
}

function info_view_layer_union_bg_can_click(can) {
    if (can) {
        $("#info_view_layer_union_bg").css("pointer-events", "auto");
        $("#info_view_layer_union_bg").attr("title","点击进行控件合并");
        $("#info_view_layer_union_img").css("opacity", 1);
    } else {
        $("#info_view_layer_union_bg").css("pointer-events", "none");
        $("#info_view_layer_union_bg").attr("title","");
        $("#info_view_layer_union_img").css("opacity", 0);
    }
}

function show_info_view_type(text) {
    if (info_view_type)info_view_type.innerText = text;
}

function show_info_view_define_name(text,placeholder) {
    if (info_view_define_name){
        info_view_define_name.value = text;
        if(placeholder && placeholder.length > 0) info_view_define_name.placeholder = placeholder;
        else info_view_define_name.placeholder = "未命名";
    }
}

function show_info_view_layer_union(text) {
    if (info_view_layer_union)info_view_layer_union.innerText = text;
}

function show_info_view_code(text) {
    if (info_view_code){
        if (isHtmlCode(text))info_view_code.innerHTML = text;
        else info_view_code.innerText = text;
    }
}

function show_select_view_type(view,click,longClick) {
    if (view){
        if (click || !haveChilds(view)){
            if (view.viewType) show_info_view_type(info_view_type_lan(view.viewType));
            else show_info_view_type("未知类型");
            info_view_type_bg_can_click(true);
        }else if(longClick){
            show_info_view_type("多个控件");
            info_view_type_bg_can_click(false);
        }
    }else {
        info_view_type_bg_can_click(false);
        show_info_view_type("未选择");
    }
}

function show_select_view_define_name(view,click,longClick) {
    if (view){
        if (click || !haveChilds(view)){
            var defineName = db_getData(curSelClassName,Save_Data_Type_Define_Name());
            show_info_view_define_name(defineName,"");
            info_view_define_name_bg_can_click(true);
        }else if(longClick){
            info_view_define_name_bg_can_click(false);
            show_info_view_define_name("","多个控件,不支持命名");
        }
    }else {
        info_view_define_name_bg_can_click(false);
        show_info_view_define_name("","未选择");
    }
}

function show_select_view_layer_union(view,click,longClick) {
    if (view){
        if (click || !haveChilds(view)){
            if (view.viewType && (
                view.viewType == "label" ||
                view.viewType == "textView"
            )){
                info_view_layer_union_bg_can_click(true);
                show_info_view_layer_union("支持合成");
            }else{
                info_view_layer_union_bg_can_click(false);
                if (isIOS())show_info_view_layer_union("仅支持UILabel合成");
                if (isSWIFT())show_info_view_layer_union("仅支持UILabel合成");
                if (isANDROID())show_info_view_layer_union("仅支持TextView合成");
                if (isFLUTTER())show_info_view_layer_union("不支持合成");
            }
        }else if(longClick){
            info_view_layer_union_bg_can_click(false);
            show_info_view_layer_union("多个控件不支持合成");
        }
    }else {
        info_view_layer_union_bg_can_click(false);
        show_info_view_layer_union("未选择");
    }
}

function show_select_view_code(view,click,longClick) {
    if (view){
        if (click || longClick || !haveChilds(view)){
            var code = "";
            var includeChild = longClick;
            if (isIOS())code = export_ios_xml_for_view(curSelMapView,includeChild);
            if (isANDROID())code = export_android_xml_for_view(curSelMapView,includeChild);
            if (isFLUTTER())code = export_android_xml_for_view(curSelMapView,includeChild);
            if (isSWIFT())code = export_swift_xml_for_view(curSelMapView,includeChild);
            if (code && code.length > 0) show_info_view_code(code);
            else show_info_view_code("没有生成代码");
        }
    }else {
        show_info_view_code("");
    }
}

//当修改命名,修改控件类型,修改合成控件类型时,需要重新刷新控件信息,包括代码
function refresh_show_select_view() {
    show_select_view(curSelClassName,true,false);
}

/**
 * click:单击,是查看某个控件
 * longClick:长按,是查看某个控件和其子控件
 */
function show_select_view(viewClassName,click,longClick) {
    var views = null;
    if (isIOS()) views = conversionViewsPure_ios();
    else if (isANDROID()) views = conversionViewsPure_android();
    else if (isFLUTTER()) views = conversionViewsPure_android();
    else if (isSWIFT()) views = conversionViewsPure_ios();
    else return;
    curViews = views;

    var view = null;
    if (views){
        if (isIOS()) view = findView_ios(views,viewClassName);
        if (isANDROID()) view = findView_android(views,viewClassName);
        if (isFLUTTER()) view = findView_android(views,viewClassName);
        if (isSWIFT()) view = findView_ios(views,viewClassName);
    }

    curSelMapView = view;
    curSelClassName = view ? viewClassName : "";
    curSelDomView = view ? findDomView(viewClassName) : null;

    show_select_view_type(view,click,longClick);
    show_select_view_define_name(view,click,longClick);
    show_select_view_layer_union(view,click,longClick);
    show_select_view_code(view,click,longClick);

    //控件不存在
    if (viewClassName && viewClassName.length > 0 && view == null) {
        clearSelStatus();
    }
}

//------------------- 选择控件后,显示信息到右边的显示面板 模块 -------------------





//------------------- iOS导出 模块 -------------------

/**
 * 添加属性
 */
function addKeyValue_ios(info,key,value){
    if (info && key && value){
        info[key] = value;
    }
}

/**
 * 去除像素单位
 */
function remove_px_ios(text){
    if (text.includes("px")){
        text = text.replace("px","");
    }
    return text;
}

/**
 * 提起RGBA
 */
function getRGBA_ios(color){
    if (color && color.includes("rgba(")){
        //提取rgba
        var rgbaStr = mid("rgba(",")",color);
        rgbaStr = rgbaStr.replaceAll(" ","");
        var arr = rgbaStr.split(",");
        return arr;
    }
    if (color && color.includes("rgb(")){
        //提取rgba
        var rgbaStr = mid("rgb(",")",color);
        rgbaStr = rgbaStr.replaceAll(" ","");
        var arr = rgbaStr.split(",");
        arr.push("1");
        return arr;
    }
    return new Array();
}

/**
 * 控件是否隐藏
 */
function isVisible_ios(map){
    var visibility = map["visibility"];
    if (visibility && visibility == "hidden"){
        return false;
    }
    return true;
}

/**
 * class_name
 */
function set_class_name_ios(info,map){
    var className = map["className"];
    if (className && className.length > 0){
        info["className"] = className;
    }
}

/**
 * parent
 */
function set_parent_ios(info,map){
    var parent = map["parent"];
    if (parent && parent.length > 0){
        info["parent"] = parent;
    }else {
        info["parent"] = "";
    }
}

/**
 * tagName
 */
function set_tagName_ios(info,map){
    var tagName = map["tagName"];
    if (tagName){
        if (tagName.length > 0)info["tagName"] = tagName;
    }
}

/**
 * visibility
 */
function set_visibility_ios(info,map){
    var visibility = map["visibility"];
    if (visibility){
        if (visibility.length > 0)info["visibility"] = visibility;
    }
}

/**
 * window_x
 */
function set_window_x_ios(info,map){
    var window_x = map["window_x"];
    if (window_x && window_x.length > 0){
        info["window_x"] = window_x;
    }
}

/**
 * window_y
 */
function set_window_y_ios(info,map){
    var window_y = map["window_y"];
    if (window_y && window_y.length > 0){
        info["window_y"] = window_y;
    }
}

/**
 * 背景颜色
 */
function set_bgcolor_ios(info,map){
    var background_color = map["background_color"];
    if (background_color){
        var rgba = getRGBA_ios(background_color);
        if (rgba.length > 0)addKeyValue_ios(info,"bgColorRed",rgb_div_255(rgba[0]));
        if (rgba.length > 1)addKeyValue_ios(info,"bgColorGreen",rgb_div_255(rgba[1]));
        if (rgba.length > 2)addKeyValue_ios(info,"bgColorBlue",rgb_div_255(rgba[2]));
        if (rgba.length > 3)addKeyValue_ios(info,"bgColorAlpha",rgb_div_255(rgba[3]));
        if (rgba.length > 0)addKeyValue_ios(info,"bgColor",rgba_to_hex(rgba));
    }
}

/**
 * textColor
 */
function set_textcolor_ios(info,map){
    var text_color = map["text_color"];
    if (text_color){
        var rgba = getRGBA_ios(text_color);
        if (rgba.length > 0)addKeyValue_ios(info,"textColorRed",rgb_div_255(rgba[0]));
        if (rgba.length > 1)addKeyValue_ios(info,"textColorGreen",rgb_div_255(rgba[1]));
        if (rgba.length > 2)addKeyValue_ios(info,"textColorBlue",rgb_div_255(rgba[2]));
        if (rgba.length > 3)addKeyValue_ios(info,"textColorAlpha",rgb_div_255(rgba[3]));
        if (rgba.length > 0)addKeyValue_ios(info,"textColor",rgba_to_hex(rgba));
    }
}

/**
 * text
 */
function set_text_ios(info,map){
    var text = map["text"];
    if (text){
        if (text.length > 0)addKeyValue_ios(info,"text",text);
    }
}

/**
 * font 文字大小
 */
function set_font_size_ios(info,map){
    var font_size = map["font_size"];
    if (font_size){
        if (font_size.length > 0)addKeyValue_ios(info,"font",remove_px_ios(font_size));
    }
}

/**
 * x
 */
function set_x_ios(info,map){
    var x = map["left"];
    var margin_left = map["margin_left"];
    if (x || margin_left){
        var x_v = parseFloat(numValue(remove_px_ios(x)));
        var margin_left_v = parseFloat(numValue(remove_px_ios(margin_left)));
        var max = Math.max(x_v,margin_left_v);
        info["x"] = max + "";
    }
}

/**
 * y
 */
function set_y_ios(info,map){
    var y = map["top"];
    var margin_top = map["margin_top"];
    if (y || margin_top){
        var y_v = parseFloat(numValue(remove_px_ios(y)));
        var margin_top_v = parseFloat(numValue(remove_px_ios(margin_top)));
        var max = Math.max(y_v,margin_top_v);
        info["y"] = max + "";
    }
}

/**
 * right
 */
function set_right_ios(info,map){
    var right = map["right"];
    var margin_right = map["margin_right"];
    if (right || margin_right){
        var right_v = parseFloat(numValue(remove_px_ios(right)));
        var margin_right_v = parseFloat(numValue(remove_px_ios(margin_right)));
        var max = Math.max(right_v,margin_right_v);
        info["right"] = max + "";
    }
}

/**
 * bottom
 */
function set_bottom_ios(info,map){
    var bottom = map["bottom"];
    var margin_bottom = map["margin_bottom"];
    if (bottom || margin_bottom){
        var bottom_v = parseFloat(numValue(remove_px_ios(bottom)));
        var margin_bottom_v = parseFloat(numValue(remove_px_ios(margin_bottom)));
        var max = Math.max(bottom_v,margin_bottom_v);
        info["bottom"] = max + "";
    }
}

/**
 * width
 */
function set_width_ios(info,map){
    var width = map["width"];
    if (width){
        if (width.length > 0)info["width"] = numValue(remove_px_ios(width));
    }
}

function get_width_ios(map){
    var width = map["width"];
    if (width && width.length > 0){
        return parseFloat(numValue(remove_px_ios(width)));
    }
    return 0;
}

/**
 * width for textView
 */
function set_width_for_textView_ios(info,map){
    if (isTextView_ios(map)){
        var width = map["width"];
        if (width){
            if (width.length > 0)info["width"] = "" + (parseFloat(numValue(remove_px_ios(width))) + 2.5);
        }
    }
}

/**
 * height
 */
function set_height_ios(info,map){
    var height = map["height"];
    if (height){
        if (height.length > 0)info["height"] = numValue(remove_px_ios(height));
    }
}

function get_height_ios(map){
    var height = map["height"];
    if (height && height.length > 0){
        return parseFloat(numValue(remove_px_ios(height)));
    }
    return 0;
}

/**
 * idStr
 */
function set_idStr_ios(info,map){
    var idStr = xml_idStr();
    info["idStr"] = idStr;
}

function isImg_ios(map){
    var src = map["src"];
    var background = map["background"];
    if (src && src.includes("/img/"))return true;
    if (background && background.includes("/img/"))return true;
    return false;
}

function isImgDiv_ios(map){
    if (map && map["image"]){
        var tagName = map["tagName"];
        if (tagName){
            tagName = tagName.toLowerCase();
            if (tagName == "div") {//特殊一点
                return true;
            }
        }
    }
    return false;
}

function isView_ios(map){
    if (map){
        var tagName = map["tagName"];
        if (tagName){
            tagName = tagName.toLowerCase();
            if (tagName == "div") {//特殊一点
                return true;
            }
        }
    }
    return false;
}

/**
 * viewType
 */
function set_viewType_ios(info,map){
    var viewType = map["viewType"];
    if (viewType){
        if (viewType.length > 0)info["viewType"] = viewType;
    }else {
        var tagName = map["tagName"];
        if (tagName){
            tagName = tagName.toLowerCase();
            if (tagName == "div") {//特殊一点
                if(isImg_ios(map)) viewType = "imageView";
                else viewType = "view";
            }
            if (tagName == "span") viewType = "label";
            if (tagName == "img") viewType = "imageView";
            if (viewType.length > 0)info["viewType"] = viewType;
        }
    }
}

/**
 * image
 */
function set_image_ios(info,map){
    if(isImg_ios(map)) {
        var imgurl = "";
        var src = map["src"];
        var background = map["background"];
        if (src && src.includes("/img/")) imgurl = src;
        if (background && background.includes("/img/")) imgurl = background;
        if (imgurl.length <= 0)return;
        imgurl = imgurl += "\"";
        //提取rgba
        var imageName = mid("/img/","\"",imgurl);
        if (imageName && imageName.length > 0)addKeyValue_ios(info,"image",imageName);
    }
}

function isTextView_ios(map){
    var text = map["text"];
    if (text && text.length > 0)return true;
    return false;
}

/**
 * font_family
 * 需要适配很多字体
 */
function set_font_family_ios(info,map){
    if (isTextView_ios(map)){
        var font_family = map["font_family"];
        if (font_family && font_family.length > 0){
            if (font_family == "PingFangSC-Regular" ||
                font_family == "PingFangSC-Medium" ||
                font_family == "PingFangSC-Semibold" ||
                font_family == "PingFangSC-Light"
            ){
                addKeyValue_ios(info,"font_family",font_family);
                addKeyValue_ios(info,"font_family_for_name","PingFang SC");
            }
            if (font_family == "PingFangHK-Regular" ||
                font_family == "PingFangHK-Medium"
            ){
                addKeyValue_ios(info,"font_family",font_family);
                addKeyValue_ios(info,"font_family_for_name","PingFang HK");
            }
            if (font_family == "STHeitiSC-Light"){
                addKeyValue_ios(info,"font_family",font_family);
                addKeyValue_ios(info,"font_family_for_name","STHeiti SC");
            }
            if (font_family == "DINAlternate-Bold"){
                addKeyValue_ios(info,"font_family",font_family);
                addKeyValue_ios(info,"font_family_for_name","DIN Alternate");
            }
            if (font_family == "Helvetica"){
                addKeyValue_ios(info,"font_family",font_family);
                addKeyValue_ios(info,"font_family_for_name","Helvetica");
            }
        }
    }
}

/**
 * text_align
 */
function set_text_align_ios(info,map){
    if (isTextView_ios(map)){
        var text_align = map["text_align"];
        if (text_align && text_align.length > 0) {
            if (text_align == "left") addKeyValue_ios(info, "align", "left");
            else if (text_align == "start") addKeyValue_ios(info, "align", "left");
            else if (text_align == "justify") addKeyValue_ios(info, "align", "left");
            else if (text_align == "match-parent") addKeyValue_ios(info, "align", "left");
            else if (text_align == "right") addKeyValue_ios(info, "align", "right");
            else if (text_align == "end") addKeyValue_ios(info, "align", "right");
            else if (text_align == "center") addKeyValue_ios(info, "align", "center");
            else addKeyValue_ios(info, "align", "left");
        }
    }
}

/**
 * border颜色
 */
function set_border_color_ios(info,map){
    var border_color = map["border"];
    if (border_color){
        if (border_color.includes("none"))return;
        var rgba = getRGBA_ios(border_color);
        if (rgba.length > 0)addKeyValue_ios(info,"borderColorRed",rgb_div_255(rgba[0]));
        if (rgba.length > 1)addKeyValue_ios(info,"borderColorGreen",rgb_div_255(rgba[1]));
        if (rgba.length > 2)addKeyValue_ios(info,"borderColorBlue",rgb_div_255(rgba[2]));
        if (rgba.length > 3)addKeyValue_ios(info,"borderColorAlpha",rgb_div_255(rgba[3]));
        if (rgba.length > 0)addKeyValue_ios(info,"borderColor",rgba_to_hex(rgba));
    }
}

/**
 * border radius
 */
function set_border_radius_ios(info,map){
    var border_radius = map["border_radius"];
    if (border_radius && border_radius.length > 0){
        if (border_radius.includes("%")) {
            var height = map["height"];
            if (height){
                var heightV = parseFloat(numValue(remove_px_ios(height)));
                border_radius = border_radius.replaceAll("%","");
                if (parseFloat(numValue(remove_px_ios(border_radius))) > 0)
                    addKeyValue_ios(info,"border_radius",""+(heightV * border_radius / 100.0));
            }
        }
        else {
            if (parseFloat(numValue(remove_px_ios(border_radius))) > 0)
                addKeyValue_ios(info,"border_radius",numValue(remove_px_ios(border_radius)));
        }
    }
}

/**
 * border width
 */
function set_border_width_ios(info,map){
    var border = map["border"];
    if (border){
        if (border.includes("none"))return;
        var border_width = midR(" ",border);
        if (border_width && border_width.length > 0) addKeyValue_ios(info,"border_width",numValue(remove_px_ios(border_width)));
    }
}

/**
 * 根据className查找控件
 */
function findView_ios(views, className) {
    if (views && views.length > 0 && className && className.length > 0){
        for (let i = 0; i < views.length; i++) {
            var view = views[i];
            if (view){
                if (view["className"] == className) return view;
                var childs = view["views"];
                if (childs && childs.length > 0){
                    var target = findView_ios(childs,className);
                    if(target) return target;
                }
            }
        }
    }
    return null;
}

/**
 * 是否有子控件
 */
function haveChilds(view) {
    if (view){
        var childs = view["views"];
        if (childs && childs.length > 0){
            return true;
        }
    }
    return false;
}

/**
 * 根据父控件查找子控件
 */
function findChildViews_ios(views,className) {
    var childViews = new Array();
    if (views && views.length > 0 && className && className.length > 0){
        for (let i = 0; i < views.length; i++) {
            var map = views[i];
            if (map && map["parent"] == className) childViews.push(map);
        }
    }
    return childViews;
}

/**
 * 根据子控件查找父控件
 */
function findParentView_ios(views,className) {
    if (views && views.length > 0 && className && className.length > 0){
        for (let i = 0; i < views.length; i++) {
            var map = views[i];
            if (map && map["className"] == className) return map;
        }
    }
    return null;
}

/**
 * 因为控件都是相对父控件的相对位置,所以这里要进行绝对x,y计算
 */
function view_position_absolute_x_y_ios(parent,child) {
    var window_x = child["window_x"];
    var window_y = child["window_y"];
    child["x"] = window_x;
    child["y"] = window_y;
}

/**
 * 因为控件都是相对父控件的相对位置,所以这里要进行绝对x,y计算
 */
function view_position_relative_x_y_ios(parent,child) {
    if (parent && child){
        //这里有个特殊的地方,就是如果parent是隐藏的,那要往上找显示的parent
        var window_x_parent = parent["window_x"];
        var window_y_parent = parent["window_y"];
        var window_x_child = child["window_x"];
        var window_y_child = child["window_y"];

        child["x"] = "" + (parseFloat(window_x_child) - parseFloat(window_x_parent));
        child["y"] = "" + (parseFloat(window_y_child) - parseFloat(window_y_parent));
    } else {
        var window_x = child["window_x"];
        var window_y = child["window_y"];
        child["x"] = window_x;
        child["y"] = window_y;
    }
}

/**
 * 对控件不进行父子归类,递归方法
 */
function view_position_absolute_recursive_ios(views,parents,parent){
    if (views && views.length > 0 && parents && parents.length > 0){
        //因为所有控件都是相对父控件的相对位置,所以这里要进行绝对x,y计算
        for (let i = 0; i < parents.length; i++) {
            var view = parents[i];
            var className = view["className"];
            view_position_absolute_x_y_ios(parent,view);
            //开始递归
            var childViews = findChildViews_ios(views,className);
            view_position_absolute_recursive_ios(views,childViews,view);
        }
    }
}

/**
 * 对控件不进行父子归类,直接平铺在同一级上,有些用户可能想要这种
 */
function view_position_absolute_ios(views){
    if (views && views.length > 0){
        //因为所有控件都是相对父控件的相对位置,所以这里要进行绝对x,y计算
        //要从父控件开始,寻找父控件
        var parents = new Array();
        for (let i = 0; i < views.length; i++) {
            var map = views[i];
            var parent = map["parent"];
            var parentView = findParentView_ios(views,parent);
            if (parentView == null){
                parents.push(map);
            }
        }
        if (parents.length > 0){
            view_position_absolute_recursive_ios(views,parents,null);
        }
    }
}

/**
 * map复制
 */
function mapCopy_ios(map) {
    var map_copy = {};
    $.each(map,function(key,value){
        map_copy[key] = value;
    });
    return map_copy;
}

/**
 * 特殊情况,明明是张图片,偏要用div显示,导致这个图片还可能有子控件,无法加到ios_xml里面,因为imageview里是不允许有subviews的
 */
function imageview_position_relative_special_deal_ios(views,view){
    if (isImgDiv_ios(view)){//明明是张图片,偏要用div显示
        var className = view["className"];
        var childViews = findChildViews_ios(views,className);
        if (childViews && childViews.length > 0){//还有子控件
            //1.创建一个imageview子控件
            var map_copy = mapCopy_ios(view);
            map_copy["className"] = map_copy["className"] + "copy";
            map_copy["parent"] = view["className"];
            map_copy["idStr"] = xml_idStr();
            views.unshift(map_copy);
            //2.将这个控件变换类型,变成view
            view["viewType"] = "view";
        }
    }
}

/**
 * 对控件进行父子归类,递归方法
 */
function view_position_relative_recursive_ios(views,parents,parent){
    if (views && views.length > 0 && parents && parents.length > 0){
        //因为所有控件都是相对父控件的相对位置,所以这里要进行绝对x,y计算
        for (let i = 0; i < parents.length; i++) {
            var view = parents[i];
            //特殊情况,明明是张图片,偏要用div显示,导致这个图片还可能有子控件,无法加到ios_xml里面,
            //因为imageview里是不允许有subviews的
            imageview_position_relative_special_deal_ios(views,view);

            var className = view["className"];
            view_position_relative_x_y_ios(parent,view);
            //开始递归
            var childViews = findChildViews_ios(views,className);
            if (childViews && childViews.length > 0){
                view["views"] = childViews;
                view_position_relative_recursive_ios(views,childViews,view);
            }
        }
    }
}

/**
 * 对控件进行父子归类
 */
function view_position_relative_ios(views){
    if (views && views.length > 0){
        var parents = new Array();
        for (let i = 0; i < views.length; i++) {
            var map = views[i];
            var parent = map["parent"];
            var parentView = findParentView_ios(views,parent);
            if (parentView == null){
                parents.push(map);
            }
        }
        if (parents.length > 0){
            view_position_relative_recursive_ios(views,parents,null);
            return parents;
        }
    }
    return views;
}

/**
 * 对隐藏控件进行父子归类,因为如果隐藏的控件是View,那所有子控件都需要重新指向父控件
 */
function view_deal_hide_position_relative_ios(views){
    if (views && views.length > 0){
        for (let i = 0; i < views.length; i++) {
            var view = views[i];
            if (!isVisible_ios(view)){
                var childViews = findChildViews_ios(views,view["className"]);
                if (childViews && childViews.length > 0){
                    for (let j = 0; j < childViews.length; j++) {
                        var childView = childViews[j];
                        childView.parent = view.parent;
                    }
                }
            }
        }
    }
}

function conversionSetValue_ios(map){
    if (map == null)return null;
    var info = {};
    set_tagName_ios(info,map);
    set_visibility_ios(info,map);
    set_class_name_ios(info,map);
    set_parent_ios(info,map);
    set_bgcolor_ios(info,map);
    set_textcolor_ios(info,map);
    set_text_ios(info,map);
    set_font_size_ios(info,map);
    set_x_ios(info,map);
    set_y_ios(info,map);
    set_window_x_ios(info,map);
    set_window_y_ios(info,map);
    set_right_ios(info,map);
    set_bottom_ios(info,map);
    set_width_ios(info,map);
    set_width_for_textView_ios(info,map);
    set_height_ios(info,map);
    set_idStr_ios(info,map);
    set_viewType_ios(info,map);
    set_image_ios(info,map);
    set_font_family_ios(info,map);
    set_text_align_ios(info,map);
    set_border_color_ios(info,map);
    set_border_width_ios(info,map);
    set_border_radius_ios(info,map);
    return info;
}

/**
 * 控件自定义名称
 */
function defineNameForView_ios(info,defineName,defaultName) {
    if(defineName && defineName.length > 0) {
        info.defineName = defineName;
    }
    //如果没有自定义名字就赋值随机名字
    if (defaultName && defaultName.length > 0){
        if ((info["defineName"] == null || info["defineName"].length <= 0)){
            var viewType = info.viewType;
            if (viewType && viewType.length > 0)info["defineName"] = viewType + defaultName;
        }
    }
}

/**
 * 控件类型切换
 */
function switchViewTypeForView_ios(info,switchViewType) {
    if(switchViewType && switchViewType.length > 0) {
        if (!info["oriViewType"]) info["oriViewType"] = info.viewType;
        info.viewType = switchViewType;
    }
}

/**
 * 控件合成
 */
function unionViewTypeForView_ios(views,info,unionViewType) {
    if(unionViewType && unionViewType.length > 0) {
        //unionViewType 内容格式:className1,className2,unionViewType
        var splits = unionViewType.split(",");
        if (splits.length == 3){
            var viewType = splits[2];
            if (!info["oriViewType"]) info["oriViewType"] = info.viewType;
            info.viewType = viewType;
        }
        if (isView_ios(info)) {//如果是View,那就把合并对象的Label属性加上
            if (splits.length == 3){
                var className1 = splits[0];
                var className2 = splits[1];
                unionViewTypeForProperty_ios(views,className1,className2);
            }
        }
        return true;
    }
    return false;
}

/**
 * 控件合成,文本属性进行复制
 */
function unionViewTypeForProperty_ios(views, className1, className2) {
    var view = findView_ios(views,className1);
    var label = findView_ios(views,className2);
    if (view && label){
        if (label.text)view.text = label.text;
        if (label.color)view.color = label.color;
        if (label.text_color)view.text_color = label.text_color;
        if (label.font_size)view.font_size = label.font_size;
        if (label.font_family)view.font_family = label.font_family;
        if (label.line_height)view.line_height = label.line_height;
        if (label.text_align)view.text_align = label.text_align;
        if (label.justify_content)view.justify_content = label.justify_content;
        if (label.text_color)view.justify_content = label.justify_content;
    }
}

/**
 * 赋值自定义控件名,控件类型,控件合成类型
 */
function conversionSetDefineValue_ios(views,needDefaultName) {
    if (views && views.length > 0){
        var newViews = new Array();
        var defineNames = db_getAllDataForType(Save_Data_Type_Define_Name());
        var switchViewTypes = db_getAllDataForType(Save_Data_Type_Switch_View_Type());
        var unionViewTypes = db_getAllDataForType(Save_Data_Type_Union_View_Type());

        for (let i = 0; i < views.length; i++) {
            var info = views[i];
            if (info == null)continue;
            var className = info["className"];

            //控件类型切换
            var switchViewType = switchViewTypes[className];
            switchViewTypeForView_ios(switchViewType);

            //控件合成
            var unionViewType = unionViewTypes[className];
            var isUnionSuccessful = unionViewTypeForView_ios(views,info,unionViewType);

            //赋值自定义控件名
            var defineName = defineNames[className];
            defineNameForView_ios(info,defineName,needDefaultName ? (i + "") : "");

            if (isUnionSuccessful && isTextView_ios(info) && !isView_ios(info)) {//如果是文本控件,那可以直接跳过,不需要继续添加
                info.visibility = "hidden";
                continue;
            }

            newViews.push(info);
        }
        return newViews;
    }
    return views;
}

/**
 * 生成用于导出sb xml的JSON Map数据
 */
function conversionViews_ios() {
    var array = assembleProperty();
    view_deal_hide_position_relative_ios(array);
    array = conversionSetDefineValue_ios(array,false);//这一行的顺序不能后移
    var views = new Array();
    var mapRoot = {};
    var maxW = 375,maxH = 667;
    for (let i = 0; i < array.length; i++) {
        var map = array[i];
        var info = conversionSetValue_ios(map);
        if (isVisible_ios(map))views.push(info);
        if (get_width_ios(info) > maxW)maxW = get_width_ios(info);
        if (get_height_ios(info) > maxH)maxH = get_height_ios(info);
    }
    // view_position_absolute_ios(views);
    views = view_position_relative_ios(views);
    mapRoot["views"] = views;
    mapRoot["idStr"] = xml_idStr();
    mapRoot["width"] = maxW;
    mapRoot["height"] = maxH;
    return mapRoot;
}

/**
 * 生成用于操作的Views数组
 */
function conversionViewsPure_ios() {
    var array = assembleProperty();
    view_deal_hide_position_relative_ios(array);
    array = conversionSetDefineValue_ios(array,true);//这一行的顺序不能后移
    var views = new Array();
    for (let i = 0; i < array.length; i++) {
        var map = array[i];
        var info = conversionSetValue_ios(map);
        if (isVisible_ios(map))views.push(info);
    }
    views = view_position_relative_ios(views);
    return views;
}

//转换成模板生成器需要的JSON数据格式
function conversionTemplateJson_ios(){
    var mapJson = {};
    mapJson["root"] = conversionViews_ios();
    var paramsJson = JSON.stringify(mapJson);
    //console.log(paramsJson)
    return paramsJson;
}

function export_ios() {

    //main模板数据
    var templateInputValue = document.getElementById('tmpl-ios-viewcontroller').innerHTML.replace(/^\n|\s+$| {6}/g,'');
    var ret = tmpl(templateInputValue, JSON.parse(conversionTemplateJson_ios()));
    ret = js_template_escape(ret);
    ret = formatXml_ios(ret);

    //导出.storyboard
    var zipToolStoryboard = new JSZip();
    zipToolStoryboard.file("export.storyboard", ret);
    zipToolStoryboard.generateAsync({
        type: "blob"
    }).then(function(content) {
        saveAs(content, "export_ios.zip");
    });
}

/**
 * 导出局部xml的代码,也就是纯手写代码 Object-C
 * selView 当前选中的控件
 * includeChild 是否要导出子控件
 */
function export_ios_xml_for_view(selView,includeChild) {
    if (selView){
        // console.log(selView)
        if (includeChild == false) delete selView["views"];
        var templateViewsValue = document.getElementById('tmpl-ios-code-views').innerHTML.replace(/^\n|\s+$| {6}/g,'');
        var map = {};
        var views = new Array();
        views.push(selView);
        map['root'] = views;
        var ret = tmpl(templateViewsValue, map);
        if (ret){
            ret = js_template_escape(ret);
            ret = formatCode_ios(ret);
            // console.log(ret)
            return ret;
        }
    }
    return "";
}

/**
 * 导出局部xml的代码,也就是纯手写代码 Swift
 * selView 当前选中的控件
 * includeChild 是否要导出子控件
 */
function export_swift_xml_for_view(selView,includeChild) {
    if (selView){
        //console.log(selView)
        if (includeChild == false) delete selView["views"];
        var templateViewsValue = document.getElementById('tmpl-swift-code-views').innerHTML.replace(/^\n|\s+$| {6}/g,'');
        var map = {};
        var views = new Array();
        views.push(selView);
        map['root'] = views;
        var ret = tmpl(templateViewsValue, map);
        if (ret){
            ret = js_template_escape(ret);
            ret = formatCode_swift(ret);
            //console.log(ret)
            return ret;
        }
    }
    return "";
}

//------------------- iOS导出 模块 -------------------






//------------------- 安卓导出 模块 -------------------


/**
 * 添加属性
 */
function addKeyValue_android(info,key,value){
    if (info && key && value){
        info[key] = value;
    }
}

/**
 * 去除像素单位
 */
function remove_px_android(text){
    if (text.includes("px")){
        text = text.replace("px","");
    }
    return text;
}

/**
 * 提起RGBA
 */
function getRGBA_android(color){
    if (color && color.includes("rgba(")){
        //提取rgba
        var rgbaStr = mid("rgba(",")",color);
        rgbaStr = rgbaStr.replaceAll(" ","");
        var arr = rgbaStr.split(",");
        return arr;
    }
    if (color && color.includes("rgb(")){
        //提取rgba
        var rgbaStr = mid("rgb(",")",color);
        rgbaStr = rgbaStr.replaceAll(" ","");
        var arr = rgbaStr.split(",");
        arr.push("1");
        return arr;
    }
    return new Array();
}

/**
 * 控件是否隐藏
 */
function isVisible_android(map){
    var visibility = map["visibility"];
    if (visibility && visibility == "hidden"){
        return false;
    }
    return true;
}

/**
 * class_name
 */
function set_class_name_android(info,map){
    var className = map["className"];
    if (className && className.length > 0){
        info["className"] = className;
    }
}

/**
 * parent
 */
function set_parent_android(info,map){
    var parent = map["parent"];
    if (parent && parent.length > 0){
        info["parent"] = parent;
    }else {
        info["parent"] = "";
    }
}

/**
 * tagName
 */
function set_tagName_android(info,map){
    var tagName = map["tagName"];
    if (tagName){
        if (tagName.length > 0)info["tagName"] = tagName;
    }
}

/**
 * visibility
 */
function set_visibility_android(info,map){
    var visibility = map["visibility"];
    if (visibility){
        if (visibility.length > 0)info["visibility"] = visibility;
    }
}

/**
 * window_x
 */
function set_window_x_android(info,map){
    var window_x = map["window_x"];
    if (window_x && window_x.length > 0){
        info["window_x"] = window_x;
    }
}

/**
 * window_y
 */
function set_window_y_android(info,map){
    var window_y = map["window_y"];
    if (window_y && window_y.length > 0){
        info["window_y"] = window_y;
    }
}

/**
 * 背景颜色
 */
function set_bgcolor_android(info,map){
    var background_color = map["background_color"];
    if (background_color){
        var rgba = getRGBA_android(background_color);
        if (rgba.length > 0)addKeyValue_android(info,"bgColorRed",rgb_div_255(rgba[0]));
        if (rgba.length > 1)addKeyValue_android(info,"bgColorGreen",rgb_div_255(rgba[1]));
        if (rgba.length > 2)addKeyValue_android(info,"bgColorBlue",rgb_div_255(rgba[2]));
        if (rgba.length > 3)addKeyValue_android(info,"bgColorAlpha",rgb_div_255(rgba[3]));
        if (rgba.length > 0)addKeyValue_android(info,"bgColor",rgba_to_hex(rgba));
    }
}

/**
 * textColor
 */
function set_textcolor_android(info,map){
    var text_color = map["text_color"];
    if (text_color){
        var rgba = getRGBA_android(text_color);
        if (rgba.length > 0)addKeyValue_android(info,"textColorRed",rgb_div_255(rgba[0]));
        if (rgba.length > 1)addKeyValue_android(info,"textColorGreen",rgb_div_255(rgba[1]));
        if (rgba.length > 2)addKeyValue_android(info,"textColorBlue",rgb_div_255(rgba[2]));
        if (rgba.length > 3)addKeyValue_android(info,"textColorAlpha",rgb_div_255(rgba[3]));
        if (rgba.length > 0)addKeyValue_android(info,"textColor",rgba_to_hex(rgba));
    }
}

/**
 * text
 */
function set_text_android(info,map){
    var text = map["text"];
    if (text){
        if (text.length > 0)addKeyValue_android(info,"text",text);
    }
}

/**
 * font 文字大小
 */
function set_font_size_android(info,map){
    var font_size = map["font_size"];
    if (font_size){
        if (font_size.length > 0)addKeyValue_android(info,"font",remove_px_android(font_size));
    }
}

/**
 * x
 */
function set_x_android(info,map){
    var x = map["left"];
    var margin_left = map["margin_left"];
    if (x || margin_left){
        var x_v = parseFloat(numValue(remove_px_android(x)));
        var margin_left_v = parseFloat(numValue(remove_px_android(margin_left)));
        var max = Math.max(x_v,margin_left_v);
        info["x"] = max + "";
    }
}

/**
 * y
 */
function set_y_android(info,map){
    var y = map["top"];
    var margin_top = map["margin_top"];
    if (y || margin_top){
        var y_v = parseFloat(numValue(remove_px_android(y)));
        var margin_top_v = parseFloat(numValue(remove_px_android(margin_top)));
        var max = Math.max(y_v,margin_top_v);
        info["y"] = max + "";
    }
}

/**
 * right
 */
function set_right_android(info,map){
    var right = map["right"];
    var margin_right = map["margin_right"];
    if (right || margin_right){
        var right_v = parseFloat(numValue(remove_px_android(right)));
        var margin_right_v = parseFloat(numValue(remove_px_android(margin_right)));
        var max = Math.max(right_v,margin_right_v);
        info["right"] = max + "";
    }
}

/**
 * bottom
 */
function set_bottom_android(info,map){
    var bottom = map["bottom"];
    var margin_bottom = map["margin_bottom"];
    if (bottom || margin_bottom){
        var bottom_v = parseFloat(numValue(remove_px_android(bottom)));
        var margin_bottom_v = parseFloat(numValue(remove_px_android(margin_bottom)));
        var max = Math.max(bottom_v,margin_bottom_v);
        info["bottom"] = max + "";
    }
}

/**
 * width
 */
function set_width_android(info,map){
    var width = map["width"];
    if (width){
        if (width.length > 0)info["width"] = numValue(remove_px_android(width));
    }
}

function get_width_android(map){
    var width = map["width"];
    if (width && width.length > 0){
        return parseFloat(numValue(remove_px_android(width)));
    }
    return 0;
}

/**
 * width for textView
 */
function set_width_for_textView_android(info,map){
    if (isTextView_android(map)){
        var width = map["width"];
        if (width){
            if (width.length > 0)info["width"] = "" + (parseFloat(numValue(remove_px_android(width))) + 2.5);
        }
    }
}

/**
 * height
 */
function set_height_android(info,map){
    var height = map["height"];
    if (height){
        if (height.length > 0)info["height"] = numValue(remove_px_android(height));
    }
}

function get_height_android(map){
    var height = map["height"];
    if (height && height.length > 0){
        return parseFloat(numValue(remove_px_android(height)));
    }
    return 0;
}

/**
 * idStr
 */
function set_idStr_android(info,map){
    var idStr = xml_idStr();
    info["idStr"] = idStr;
}

function isImg_android(map){
    var src = map["src"];
    var background = map["background"];
    if (src && src.includes("/img/"))return true;
    if (background && background.includes("/img/"))return true;
    return false;
}

function isImgDiv_android(map){
    if (map && map["image"]){
        var tagName = map["tagName"];
        if (tagName){
            tagName = tagName.toLowerCase();
            if (tagName == "div") {//特殊一点
                return true;
            }
        }
    }
    return false;
}

function isView_android(map){
    if (map){
        var tagName = map["tagName"];
        if (tagName){
            tagName = tagName.toLowerCase();
            if (tagName == "div") {//特殊一点
                return true;
            }
        }
    }
    return false;
}

/**
 * viewType
 */
function set_viewType_android(info,map){
    var viewType = map["viewType"];
    if (viewType){
        if (viewType.length > 0)info["viewType"] = viewType;
    }else {
        var tagName = map["tagName"];
        if (tagName){
            tagName = tagName.toLowerCase();
            if (tagName == "div") {//特殊一点
                if(isImg_android(map)) viewType = "imageView";
                else viewType = "relativeLayout";
            }
            if (tagName == "span") viewType = "textView";
            if (tagName == "img") viewType = "imageView";
            if (viewType.length > 0)info["viewType"] = viewType;
        }
    }
}

/**
 * image
 */
function set_image_android(info,map){
    if(isImg_android(map)) {
        var imgurl = "";
        var src = map["src"];
        var background = map["background"];
        if (src && src.includes("/img/")) imgurl = src;
        if (background && background.includes("/img/")) imgurl = background;
        if (imgurl.length <= 0)return;
        imgurl = imgurl += ".";
        var imageName = mid("/img/",".",imgurl);
        if (imageName && imageName.length > 0)addKeyValue_android(info,"image",imageName.toLowerCase());
    }
}

function isTextView_android(map){
    var text = map["text"];
    if (text && text.length > 0)return true;
    return false;
}

/**
 * font_family
 * 需要适配很多字体
 */
function set_font_family_android(info,map){
    if (isTextView_android(map)){
        var font_family = map["font_family"];
        if (font_family && font_family.length > 0){
            if (font_family == "PingFangSC-Regular")addKeyValue_android(info,"font_family","sans-serif");
            else if (font_family == "PingFangSC-Medium")addKeyValue_android(info,"font_family","sans-serif-medium");
            else if (font_family == "PingFangSC-Semibold")addKeyValue_android(info,"font_family","sans-serif-black");
            else if (font_family == "PingFangSC-Light")addKeyValue_android(info,"font_family","sans-serif-light");
            else if (font_family.toLowerCase().includes("light"))addKeyValue_android(info,"font_family","sans-serif-light");
            else if (font_family.toLowerCase().includes("semibold"))addKeyValue_android(info,"font_family","sans-serif-black");
            else if (font_family.toLowerCase().includes("medium"))addKeyValue_android(info,"font_family","sans-serif-medium");
            else if (font_family.toLowerCase().includes("bold"))addKeyValue_android(info,"font_family","sans-serif-medium");
            else if (font_family.toLowerCase().includes("regular"))addKeyValue_android(info,"font_family","sans-serif");
        }
    }
}

/**
 * text_align
 */
function set_text_align_android(info,map){
    if (isTextView_android(map)){
        var text_align = map["text_align"];
        if (text_align && text_align.length > 0) {
            if (text_align == "left") addKeyValue_android(info, "align", "left");
            else if (text_align == "start") addKeyValue_android(info, "align", "left");
            else if (text_align == "justify") addKeyValue_android(info, "align", "left");
            else if (text_align == "match-parent") addKeyValue_android(info, "align", "left");
            else if (text_align == "right") addKeyValue_android(info, "align", "right");
            else if (text_align == "end") addKeyValue_android(info, "align", "right");
            else if (text_align == "center") addKeyValue_android(info, "align", "center");
            else addKeyValue_android(info, "align", "left");
        }
    }
}

/**
 * border颜色
 */
function set_border_color_android(info,map){
    var border_color = map["border"];
    if (border_color){
        if (border_color.includes("none"))return;
        var rgba = getRGBA_android(border_color);
        if (rgba.length > 0)addKeyValue_android(info,"borderColorRed",rgb_div_255(rgba[0]));
        if (rgba.length > 1)addKeyValue_android(info,"borderColorGreen",rgb_div_255(rgba[1]));
        if (rgba.length > 2)addKeyValue_android(info,"borderColorBlue",rgb_div_255(rgba[2]));
        if (rgba.length > 3)addKeyValue_android(info,"borderColorAlpha",rgb_div_255(rgba[3]));
        if (rgba.length > 0)addKeyValue_android(info,"borderColor",rgba_to_hex(rgba));
    }
}

/**
 * border radius
 */
function set_border_radius_android(info,map){
    var border_radius = map["border_radius"];
    if (border_radius && border_radius.length > 0){
        if (border_radius.includes("%")) {
            var height = map["height"];
            if (height){
                var heightV = parseFloat(numValue(remove_px_android(height)));
                border_radius = border_radius.replaceAll("%","");
                if (parseFloat(numValue(remove_px_android(border_radius))) > 0)
                    addKeyValue_android(info,"border_radius",""+(heightV * border_radius / 100.0));
            }
        }
        else {
            if (parseFloat(numValue(remove_px_android(border_radius))) > 0)
                addKeyValue_android(info, "border_radius", numValue(remove_px_android(border_radius)));
        }
    }
}

/**
 * border width
 */
function set_border_width_android(info,map){
    var border = map["border"];
    if (border){
        if (border.includes("none"))return;
        var border_width = midR(" ",border);
        if (border_width && border_width.length > 0) addKeyValue_android(info,"border_width",numValue(remove_px_android(border_width)));
    }
}

/**
 * 根据className查找控件
 */
function findView_android(views, className) {
    if (views && views.length > 0 && className && className.length > 0){
        for (let i = 0; i < views.length; i++) {
            var view = views[i];
            if (view){
                if (view["className"] == className) return view;
                var childs = view["views"];
                if (childs && childs.length > 0){
                    var target = findView_android(childs,className);
                    if(target) return target;
                }
            }
        }
    }
    return null;
}

/**
 * 根据父控件查找子控件
 */
function findChildViews_android(views,className) {
    var childViews = new Array();
    if (views && views.length > 0 && className && className.length > 0){
        for (let i = 0; i < views.length; i++) {
            var map = views[i];
            if (map && map["parent"] == className) childViews.push(map);
        }
    }
    return childViews;
}

/**
 * 根据子控件查找父控件
 */
function findParentView_android(views,className) {
    if (views && views.length > 0 && className && className.length > 0){
        for (let i = 0; i < views.length; i++) {
            var map = views[i];
            if (map && map["className"] == className) return map;
        }
    }
    return null;
}

/**
 * 因为控件都是相对父控件的相对位置,所以这里要进行绝对x,y计算
 */
function view_position_relative_x_y_android(parent,child) {
    if (parent && child){
        var window_x_parent = parent["window_x"];
        var window_y_parent = parent["window_y"];
        var window_x_child = child["window_x"];
        var window_y_child = child["window_y"];
        child["x"] = "" + (parseFloat(window_x_child) - parseFloat(window_x_parent));
        child["y"] = "" + (parseFloat(window_y_child) - parseFloat(window_y_parent));
    } else {
        var window_x = child["window_x"];
        var window_y = child["window_y"];
        child["x"] = window_x;
        child["y"] = window_y;
    }
}

/**
 * map复制
 */
function mapCopy_android(map) {
    var map_copy = {};
    $.each(map,function(key,value){
        map_copy[key] = value;
    });
    return map_copy;
}

/**
 * 特殊情况,明明是张图片,偏要用div显示,导致这个图片还可能有子控件,无法加到android_xml里面,因为imageview里是不允许有subviews的
 */
function imageview_position_relative_special_deal_android(views,view){
    if (isImgDiv_android(view)){//明明是张图片,偏要用div显示
        var className = view["className"];
        var childViews = findChildViews_android(views,className);
        if (childViews && childViews.length > 0){//还有子控件
            //1.创建一个imageview子控件
            var map_copy = mapCopy_android(view);
            map_copy["className"] = map_copy["className"] + "copy";
            map_copy["parent"] = view["className"];
            map_copy["idStr"] = xml_idStr();
            views.unshift(map_copy);
            //2.将这个控件变换类型,变成view
            view["viewType"] = "view";
        }
    }
}

/**
 * 对控件进行父子归类,递归方法
 */
function view_position_relative_recursive_android(views,parents,parent){
    if (views && views.length > 0 && parents && parents.length > 0){
        //因为所有控件都是相对父控件的相对位置,所以这里要进行绝对x,y计算
        for (let i = 0; i < parents.length; i++) {
            var view = parents[i];
            //特殊情况,明明是张图片,偏要用div显示,导致这个图片还可能有子控件,无法加到android_xml里面,
            //因为imageview里是不允许有subviews的
            imageview_position_relative_special_deal_android(views,view);

            var className = view["className"];
            view_position_relative_x_y_android(parent,view);
            //开始递归
            var childViews = findChildViews_android(views,className);
            if (childViews && childViews.length > 0){
                view["views"] = childViews;
                view_position_relative_recursive_android(views,childViews,view);
            }
        }
    }
}

/**
 * 对控件进行父子归类
 */
function view_position_relative_android(views){
    if (views && views.length > 0){
        var parents = new Array();
        for (let i = 0; i < views.length; i++) {
            var map = views[i];
            var parent = map["parent"];
            var parentView = findParentView_android(views,parent);
            if (parentView == null){
                parents.push(map);
            }
        }
        if (parents.length > 0){
            view_position_relative_recursive_android(views,parents,null);
            return parents;
        }
    }
    return views;
}

/**
 * 对隐藏控件进行父子归类,因为如果隐藏的控件是View,那所有子控件都需要重新指向父控件
 */
function view_deal_hide_position_relative_android(views){
    if (views && views.length > 0){
        for (let i = 0; i < views.length; i++) {
            var view = views[i];
            if (!isVisible_android(view)){
                var childViews = findChildViews_android(views,view["className"]);
                if (childViews && childViews.length > 0){
                    for (let j = 0; j < childViews.length; j++) {
                        var childView = childViews[j];
                        childView.parent = view.parent;
                    }
                }
            }
        }
    }
}

function conversionSetValue_android(map){
    if (map == null)return null;
    var info = {};
    set_tagName_android(info,map);
    set_visibility_android(info,map);
    set_class_name_android(info,map);
    set_parent_android(info,map);
    set_bgcolor_android(info,map);
    set_textcolor_android(info,map);
    set_text_android(info,map);
    set_font_size_android(info,map);
    set_x_android(info,map);
    set_y_android(info,map);
    set_window_x_android(info,map);
    set_window_y_android(info,map);
    set_right_android(info,map);
    set_bottom_android(info,map);
    set_width_android(info,map);
    set_width_for_textView_android(info,map);
    set_height_android(info,map);
    set_idStr_android(info,map);
    set_viewType_android(info,map);
    set_image_android(info,map);
    set_font_family_android(info,map);
    set_text_align_android(info,map);
    set_border_color_android(info,map);
    set_border_width_android(info,map);
    set_border_radius_android(info,map);
    return info;
}

/**
 * 控件自定义名称
 */
function defineNameForView_android(info,defineName,defaultName) {
    if(defineName && defineName.length > 0) {
        info.defineName = defineName;
    }
    //如果没有自定义名字就赋值随机名字
    if (defaultName && defaultName.length > 0){
        if ((info["defineName"] == null || info["defineName"].length <= 0)){
            var viewType = info.viewType;
            if (viewType && viewType.length > 0)info["defineName"] = viewType + defaultName;
        }
    }
}

/**
 * 控件类型切换
 */
function switchViewTypeForView_android(info,switchViewType) {
    if(switchViewType && switchViewType.length > 0) {
        if (!info["oriViewType"]) info["oriViewType"] = info.viewType;
        info.viewType = switchViewType;
    }
}

/**
 * 控件合成
 */
function unionViewTypeForView_android(views,info,unionViewType) {
    if(unionViewType && unionViewType.length > 0) {
        //unionViewType 内容格式:className1,className2,unionViewType
        var splits = unionViewType.split(",");
        if (splits.length == 3){
            var viewType = splits[2];
            if (!info["oriViewType"]) info["oriViewType"] = info.viewType;
            info.viewType = viewType;
        }
        if (isView_android(info)) {//如果是View,那就把合并对象的Label属性加上
            if (splits.length == 3){
                var className1 = splits[0];
                var className2 = splits[1];
                unionViewTypeForProperty_android(views,className1,className2);
            }
        }
        return true;
    }
    return false;
}

/**
 * 控件合成,文本属性进行复制
 */
function unionViewTypeForProperty_android(views,className1,className2) {
    var view = findView_android(views,className1);
    var label = findView_android(views,className2);
    if (view && label){
        if (label.text)view.text = label.text;
        if (label.color)view.color = label.color;
        if (label.text_color)view.text_color = label.text_color;
        if (label.font_size)view.font_size = label.font_size;
        if (label.font_family)view.font_family = label.font_family;
        if (label.line_height)view.line_height = label.line_height;
        if (label.text_align)view.text_align = label.text_align;
        if (label.justify_content)view.justify_content = label.justify_content;
        if (label.text_color)view.justify_content = label.justify_content;
    }
}

/**
 * 赋值自定义控件名,控件类型,控件合成类型
 */
function conversionSetDefineValue_android(views,needDefaultName) {
    if (views && views.length > 0){
        var newViews = new Array();
        var defineNames = db_getAllDataForType(Save_Data_Type_Define_Name());
        var switchViewTypes = db_getAllDataForType(Save_Data_Type_Switch_View_Type());
        var unionViewTypes = db_getAllDataForType(Save_Data_Type_Union_View_Type());

        for (let i = 0; i < views.length; i++) {
            var info = views[i];
            if (info == null)continue;
            var className = info["className"];

            //控件类型切换
            var switchViewType = switchViewTypes[className];
            switchViewTypeForView_android(switchViewType);

            //控件合成
            var unionViewType = unionViewTypes[className];
            var isUnionSuccessful = unionViewTypeForView_android(views,info,unionViewType);

            //赋值自定义控件名
            var defineName = defineNames[className];
            defineNameForView_android(info,defineName,needDefaultName ? (i + "") : "");

            if (isUnionSuccessful && isTextView_android(info) && !isView_android(info)) {//如果是文本控件,那可以直接跳过,不需要继续添加
                info.visibility = "hidden";
                continue;
            }

            newViews.push(info);
        }
        return newViews;
    }
    return views;
}

/**
 * 生成用于导出sb xml的JSON Map数据
 */
function conversionViews_android() {
    var array = assembleProperty();
    view_deal_hide_position_relative_android(array);
    array = conversionSetDefineValue_android(array,false);//这一行的顺序不能后移
    var views = new Array();
    var mapRoot = {};
    var maxW = 375,maxH = 667;
    for (let i = 0; i < array.length; i++) {
        var map = array[i];
        var info = conversionSetValue_android(map);
        if (isVisible_android(map))views.push(info);
        if (get_width_android(info) > maxW)maxW = get_width_android(info);
        if (get_height_android(info) > maxH)maxH = get_height_android(info);
    }
    views = view_position_relative_android(views);
    mapRoot["views"] = views;
    mapRoot["idStr"] = xml_idStr();
    mapRoot["width"] = maxW;
    mapRoot["height"] = maxH;
    return mapRoot;
}

/**
 * 生成用于操作的Views数组
 */
function conversionViewsPure_android() {
    var array = assembleProperty();
    view_deal_hide_position_relative_android(array);
    array = conversionSetDefineValue_android(array,false);//这一行的顺序不能后移
    var views = new Array();
    for (let i = 0; i < array.length; i++) {
        var map = array[i];
        var info = conversionSetValue_android(map);
        if (isVisible_android(map))views.push(info);
    }
    views = view_position_relative_android(views);
    return views;
}

//转换成模板生成器需要的JSON数据格式
function conversionTemplateJson_android(){
    var mapJson = {};
    mapJson["root"] = conversionViews_android();
    var paramsJson = JSON.stringify(mapJson);
    // console.log(paramsJson)
    return paramsJson;
}

/**
 * 导出整个xml
 */
function export_android() {
    //main模板数据
    var templateInputValue = document.getElementById('tmpl-android-xml').innerHTML.replace(/^\n|\s+$| {6}/g,'');
    var ret = tmpl(templateInputValue, JSON.parse(conversionTemplateJson_android()));
    ret = js_template_escape(ret);
    ret = formatXml_android(ret);

    //导出.storyboard
    var zipToolStoryboard = new JSZip();
    zipToolStoryboard.file("export.xml", ret);
    zipToolStoryboard.generateAsync({
        type: "blob"
    }).then(function(content) {
        saveAs(content, "export_android.zip");
    });
}

/**
 * 导出局部xml
 * selView 当前选中的控件
 * includeChild 是否要导出子控件
 */
function export_android_xml_for_view(selView,includeChild) {
    if (selView){
        // console.log(selView)
        if (includeChild == false) delete selView["views"];
        var templateViewsValue = document.getElementById('tmpl-android-views').innerHTML.replace(/^\n|\s+$| {6}/g,'');
        var map = {};
        var views = new Array();
        views.push(selView);
        map['root'] = views;
        var ret = tmpl(templateViewsValue, map);
        if (ret){
            ret = js_template_escape(ret);
            ret = formatXml_android_special(ret);
            // console.log(ret)
            return ret;
        }
    }
    return "";
}

//------------------- 安卓导出 模块 -------------------





//------------------- 界面html 模块 -------------------

//添加操作模块点击事件
document.getElementById("all_visiable_img").onclick = function() {
    $('*[class*="page_copy"]').find("*").css({"visibility":"visible"});
    //$('*[class*="page_copy"]').css({"visibility":"visible"});
};
document.getElementById("all_invisiable_img").onclick = function() {
    $('*[class*="page_copy"]').find("*").css({"visibility":"hidden"});
    //$('*[class*="page_copy"]').css({"visibility":"hidden"});
};
document.getElementById("software_set_img").onclick = function() {
    init_software_set_dialog();
    show_software_set_dialog();
};
document.getElementById("help_img").onclick = function() {
    window.open("http://www.baidu.com");
};

var switch_ios_img = document.getElementById("switch_ios_img");
var switch_android_img = document.getElementById("switch_android_img");
var switch_swift_img = document.getElementById("switch_swift_img");
var switch_flutter_img = document.getElementById("switch_flutter_img");
var export_btn_img = document.getElementById("export_btn_img");
var export_btn_text = document.getElementById("export_btn_text");

function setCurLan(lan) {
    if (cur_lan == lan)return;
    cur_lan = lan;
    saveStorageCurLan();
    if (isIOS()) {
        showToast("已切换成 iOS");
        $("#export_btn_img").attr("src","https://upload-images.jianshu.io/upload_images/14003450-c89d154f59ba4ab6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240");
        $("#export_btn_text").text("生成iOS布局");
    }
    if (isANDROID()) {
        showToast("已切换成 Android");
        $("#export_btn_img").attr("src","https://upload-images.jianshu.io/upload_images/14003450-6bbeafd5410d6d1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240");
        $("#export_btn_text").text("生成Android布局");
    }
    if (isFLUTTER()) {
        showToast("已切换成 Flutter");
        $("#export_btn_img").attr("src","https://upload-images.jianshu.io/upload_images/14003450-b8ea934846d54842.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240");
        $("#export_btn_text").text("生成Flutter布局");
    }
    if (isSWIFT()) {
        showToast("已切换成 Swift");
        $("#export_btn_img").attr("src","https://upload-images.jianshu.io/upload_images/14003450-aab36867ca011e9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240");
        $("#export_btn_text").text("生成Swift布局");
    }
    $("#switch_ios_img").css("opacity",isIOS() ? 1 : 0.3);
    $("#switch_android_img").css("opacity",isANDROID() ? 1 : 0.3);
    $("#switch_flutter_img").css("opacity",isFLUTTER() ? 1 : 0.3);
    $("#switch_swift_img").css("opacity",isSWIFT() ? 1 : 0.3);
    clearSelStatus();
}

function loadStorageCurLan() {
    if (!db_isSupportStorage())return;
    var lan = localStorage.getItem("cur_lan");
    if (lan && lan.length > 0){
        setCurLan(parseInt(lan));
    }
}

function saveStorageCurLan() {
    if (!db_isSupportStorage())return;
    localStorage.setItem("cur_lan",""+cur_lan);
}

loadStorageCurLan();

//添加切换语言模块点击事件
switch_ios_img.onclick = function() {
    if (DevelopDone_Lan_ios){
        setCurLan(Develop_Lan_ios);
    }else {
        showToast("iOS 功能开发中...");
    }
};
switch_android_img.onclick = function() {
    if (DevelopDone_Lan_android){
        setCurLan(Develop_Lan_android);
    }else {
        showToast("Android 功能开发中...");
    }
};
switch_swift_img.onclick = function() {
    if (DevelopDone_Lan_swift){
        setCurLan(Develop_Lan_swift);
    }else {
        showToast("Swift 功能开发中...");
    }
};
switch_flutter_img.onclick = function() {
    if (DevelopDone_Lan_flutter){
        setCurLan(Develop_Lan_flutter);
    }else {
        showToast("Flutter 功能开发中...");
    }
};

//添加事件
$('*').css({"visibility":"visible"});
var longTapClassName = "";
function checkIsLongTapView(className){var ret = className == longTapClassName;longTapClassName = "";return ret;}
$('*[class^="page "]').find("*").on({
    mousedown: function(event) {
        var className = $(this).prop("class");
        timeout = setTimeout(function() {
            //长按事件,将整个块选中或者隐藏
            var view = $('*[class*="page_copy"]').find("*[class*='"+className+"']");
            var visibility = view.css('visibility');
            if(visibility == 'hidden'){
                view.css({"visibility":"visible"});
                view.eq(0).find("*").css({"visibility":"visible"});
            }else{
                view.css({"visibility":"hidden"});
                view.eq(0).find("*").css({"visibility":"hidden"});
            }
            longTapClassName = className;
        }, 500);
        event.stopPropagation();
    },
    mouseup: function(event) {
        clearTimeout(timeout);
        event.stopPropagation();
    },
    mouseout: function(event) {
        clearTimeout(timeout);
        event.stopPropagation();
    },
    click: function (event) {
        $(this).css({"outline":"red solid 1px"});
        var className = $(this).prop("class");
        if(checkIsLongTapView(className))return;
        var view = $('*[class*="page_copy"]').find("*[class*='"+className+"']");
        var visibility = view.css('visibility');
        if(visibility == 'hidden'){
            view.css({"visibility":"visible"});
        }else{
            view.css({"visibility":"hidden"});
        }
        event.stopPropagation();
    },
    mouseover: function (event) { $(this).css({"outline":"red dashed 1px"});event.stopPropagation(); },
    mouseout: function (event) { $(this).css({"outline":""}); event.stopPropagation(); }
});

var page_copy_sel_view_class = null;
var timeout;
var timeout_copy;
$('*[class^="page_copy"]').find("*").on({
    mousedown: function(event) {
        var className = $(this).prop("class");
        timeout_copy = setTimeout(function() {
            //长按事件,将整个块选中或者隐藏
            longTapClassName = className;

            //长按也是选中
            $('*[class^="page_copy"]').find("*").css({"outline":""});
            if(page_copy_sel_view_class != null){
                if(className == page_copy_sel_view_class){
                    page_copy_sel_view_class = "";
                    return;
                }
            }
            var view = $('*[class*="page_copy"]').find("*[class*='"+className+"']");
            view.css({"outline":"blue solid 1px"});
            page_copy_sel_view_class = className;
            show_select_view(className,false,true);
        }, 750);
        event.stopPropagation();
    },
    mouseup: function(event) {
        clearTimeout(timeout_copy);
        event.stopPropagation();
    },
    mouseout: function(event) {
        clearTimeout(timeout_copy);
        event.stopPropagation();
    },
    click: function (event) {
        var className = $(this).prop("class");
        if(checkIsLongTapView(className)){event.stopPropagation();return;}
        $('*[class^="page_copy"]').find("*").css({"outline":""});
        if(page_copy_sel_view_class != null){
            if(className == page_copy_sel_view_class){
                page_copy_sel_view_class = "";
                show_select_view(page_copy_sel_view_class,true,false);
                event.stopPropagation();
                return;
            }
        }
        $(this).css({"outline":"blue solid 1px"});
        page_copy_sel_view_class = className;
        show_select_view(page_copy_sel_view_class,true,false);
        event.stopPropagation();
    },
    mouseover: function (event) {
        if(page_copy_sel_view_class != null){
            var className = $(this).prop("class");
            if(className == page_copy_sel_view_class){
                event.stopPropagation();
                return;
            }
        }
        $(this).css({"outline":"blue dashed 1px"});event.stopPropagation();
    },
    mouseout: function (event) {
        if(page_copy_sel_view_class != null){
            var className = $(this).prop("class");
            if(className == page_copy_sel_view_class){
                event.stopPropagation();
                return;
            }
        }
        $(this).css({"outline":""}); event.stopPropagation();
    }
});

function clearSelStatus() {
    $('*[class^="page_copy"]').find("*").css({"outline":""});
    page_copy_sel_view_class = "";
    longTapClassName = "";
    show_select_view(page_copy_sel_view_class,true,false);
}

//生成xml代码按钮

document.getElementById("export_xml").onclick = function() {
    if (isIOS())export_ios();
    if (isSWIFT())export_ios();
    if (isANDROID())export_android();
    if (isFLUTTER())export_android();
};

//------------------- 界面html 模块 -------------------